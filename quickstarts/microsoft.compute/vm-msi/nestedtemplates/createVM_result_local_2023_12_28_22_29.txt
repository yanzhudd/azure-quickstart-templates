arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}, "type": "string", "defaultValue": "zytest"}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}, "_artifactsLocationSasToken": {"defaultValue": "", "metadata": {"description": "The sasToken required to access _artifactsLocation."}, "type": "securestring"}, "adminPasswordOrKey": {"metadata": {"description": "OS Admin password or SSH Key depending on value of authentication type"}, "type": "securestring", "defaultValue": "zytest"}, "adminUsername": {"metadata": {"description": "Username for the Virtual Machine."}, "type": "string", "defaultValue": "zytest"}, "authenticationType": {"allowedValues": ["password", "sshPublicKey"], "defaultValue": "password", "metadata": {"description": "Authentication type"}, "type": "string"}, "azureCLI2DockerImage": {"defaultValue": "azuresdk/azure-cli-python:latest", "metadata": {"description": "The Docker image to rin the azure CLI from"}, "type": "string"}, "containerName": {"type": "string", "defaultValue": "zytest"}, "location": {"metadata": {"description": "The Location For the resources"}, "type": "string", "defaultValue": "westus"}, "nsgId": {"metadata": {"description": "The nsg id for the VM"}, "type": "string", "defaultValue": "zytest"}, "operatingSystem": {"type": "string", "metadata": {"description": "OS for the VM, this is the offer and SKU concatenated with underscores and then mapped to a variable"}, "defaultValue": "zytest"}, "provisionExtensions": {"metadata": {"description": "determines whether to provision the extensions"}, "type": "bool", "defaultValue": "zytest"}, "storageAccountId": {"metadata": {"description": "The storage account Id for boot diagnostics for the VMs"}, "type": "string", "defaultValue": "zytest"}, "storageAccountName": {"type": "string", "metadata": {"description": "The name of the storage account for the blob copy"}, "defaultValue": "zytest"}, "subnetRef": {"type": "string", "defaultValue": "zytest"}, "vmSize": {"defaultValue": "Standard_D2s_v3", "metadata": {"description": "The size of the VM to create"}, "type": "string"}, "vmName": {"metadata": {"description": "The name of the vm"}, "type": "string", "defaultValue": "zytest"}}, "variables": {"extensionName": "GuestAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "isWindowsOS": "[bool(contains(toLower(variables(\'imageReference\')[parameters(\'operatingSystem\')].offer), \'windows\'))]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}, "imageReference": {"UbuntuServer_23_04-gen2": {"publisher": "Canonical", "offer": "0001-com-ubuntu-server-lunar", "sku": "23_04-gen2", "version": "latest"}, "UbuntuServer_23_04-daily-gen2": {"publisher": "Canonical", "offer": "0001-com-ubuntu-server-lunar-daily", "sku": "23_04-daily-gen2", "version": "latest"}, "WindowsServer_2022-datacenter-azure-edition": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "2022-datacenter-azure-edition", "version": "latest"}, "WindowsServer_2022-datacenter-smalldisk-g2": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "WindowsServer_2022-datacenter-smalldisk-g2", "version": "latest"}}, "windowsConfiguration": {"provisionVmAgent": "true"}, "publicIPAddressName": "publicIp", "nicName": "nic"}, "resources": [{"apiVersion": "2019-11-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'Location\')]", "properties": {"publicIPAllocationMethod": "Dynamic"}}, {"apiVersion": "2019-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'Location\')]", "dependsOn": ["[variables(\'publicIPAddressName\')]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[parameters(\'subnetRef\')]"}}}], "networkSecurityGroup": {"id": "[parameters(\'nsgId\')]"}}}, {"apiVersion": "2022-11-01", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[variables(\'nicName\')]"], "identity": {"type": "SystemAssigned"}, "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]", "windowsConfiguration": "[if(variables(\'isWindowsOS\'), variables(\'windowsConfiguration\'), json(\'null\'))]"}, "storageProfile": {"imageReference": "[variables(\'imageReference\')[parameters(\'operatingSystem\')]]"}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]", "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(parameters(\'storageAccountId\'), \'2018-02-01\').primaryEndpoints.blob]"}}}}, {"type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2022-03-01", "name": "[format(\'{0}/GuestAttestation\', parameters(\'vmName\'))]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"], "properties": {"publisher": "Microsoft.Azure.Security.WindowsAttestation", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "", "maaTenantName": "[variables(\'maaTenantName\')]"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}, "useCustomToken": "false", "disableAlerts": "false"}}}, "condition": "[and(variables(\'isWindowsOS\'),and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true()))))]"}, {"type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2022-03-01", "name": "[format(\'{0}/GuestAttestation\', parameters(\'vmName\'))]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"], "properties": {"publisher": "Microsoft.Azure.Security.LinuxAttestation", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "", "maaTenantName": "[variables(\'maaTenantName\')]"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}, "useCustomToken": "false", "disableAlerts": "false"}}}, "condition": "[and(not(variables(\'isWindowsOS\')), and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true()))))]"}, {"condition": "[and(variables(\'isWindowsOS\'), parameters(\'provisionExtensions\'))]", "name": "[concat(parameters(\'vmName\'),\'/cse-windows\')]", "type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2019-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'vmName\')]"], "properties": {"publisher": "Microsoft.Compute", "type": "CustomScriptExtension", "typeHandlerVersion": "1.10", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[uri(parameters(\'_artifactsLocation\'), concat(\'writeblob.ps1\', parameters(\'_artifactsLocationSasToken\')))]"], "commandToExecute": "[concat(\'powershell -ExecutionPolicy Unrestricted -File  .\\\\writeblob.ps1  -SubscriptionId \', subscription().subscriptionId, \' -TenantId \', subscription().tenantId,\' -ResourceGroupName \', resourceGroup().Name, \' -StorageAccountName \', parameters(\'storageAccountName\'), \' -ContainerName \', parameters(\'containerName\'),\' -Verbose\')]"}}}, {"condition": "[and(not(variables(\'isWindowsOS\')), parameters(\'provisionExtensions\'))]", "name": "[concat(parameters(\'vmName\'),\'/cse-linux\')]", "type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2019-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'vmName\')]"], "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[uri(parameters(\'_artifactsLocation\'), concat(\'scripts/writeblob.sh\', parameters(\'_artifactsLocationSasToken\')))]", "[uri(parameters(\'_artifactsLocation\'), concat(\'scripts/install-and-run-cli-2.sh\', parameters(\'_artifactsLocationSasToken\')))]"]}, "protectedSettings": {"commandToExecute": "[concat(\'./install-and-run-cli-2.sh -i \\"\', parameters(\'azureCLI2DockerImage\'),\'\\" -a \\"\', parameters(\'storageAccountName\'), \'\\" -c \\"\', parameters(\'containerName\'), \'\\" -r \\"\', resourceGroup().Name, \'\\"\')]"}}}], "outputs": {"principalId": {"type": "string", "value": "[reference(resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\')), \'2019-12-01\', \'Full\').identity.principalId]"}, "linuxTest": {"type": "bool", "value": "[and(not(variables(\'isWindowsOS\')), parameters(\'provisionExtensions\'))]"}, "windowsTest": {"type": "bool", "value": "[and(variables(\'isWindowsOS\'), parameters(\'provisionExtensions\'))]"}}}


cli_script
Below is the translated Azure CLI bash script from the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Define the template parameters as variables\n_artifactsLocation="zytest"\nsecurityType="TrustedLaunch"\n_artifactsLocationSasToken=""\nadminPasswordOrKey="zytest"\nadminUsername="zytest"\nauthenticationType="password"\nazureCLI2DockerImage="azuresdk/azure-cli-python:latest"\ncontainerName="zytest"\nlocation="westus"\nnsgId="zytest"\noperatingSystem="zytest"\nprovisionExtensions="zytest"\nstorageAccountId="zytest"\nstorageAccountName="zytest"\nsubnetRef="zytest"\nvmSize="Standard_D2s_v3"\nvmName="zytest"\n\n# Variables from the ARM template\npublicIPAddressName="publicIp"\nnicName="nic"\n\n# Create a public IP address\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --location $location \\\n    --allocation-method Dynamic\n\n# Create a network interface with the public IP created above\naz network nic create \\\n    --name $nicName \\\n    --location $location \\\n    --subnet $subnetRef \\\n    --network-security-group $nsgId \\\n    --public-ip-address $publicIPAddressName\n\n# Create a virtual machine\naz vm create \\\n    --name $vmName \\\n    --location $location \\\n    --nics $nicName \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --authentication-type $authenticationType \\\n    --admin-password $adminPasswordOrKey \\\n    --image Canonical:UbuntuServer:18.04-LTS:latest \\\n    --boot-diagnostics-storage $storageAccountId\n\n# Conditional resources based on parameters and variables are not directly translatable to CLI commands.\n# You will need to implement the logic to decide whether to run the following commands or not.\n\n# Create VM extension for Windows Attestation if conditions are met\n# Note: Replace the conditions with appropriate bash conditional logic\nif [ "$isWindowsOS" = true ] && [ "$securityType" = "TrustedLaunch" ]; then\n    az vm extension set \\\n        --publisher Microsoft.Azure.Security.WindowsAttestation \\\n        --vm-name $vmName \\\n        --name GuestAttestation \\\n        --location $location\nfi\n\n# Create VM extension for Linux Attestation if conditions are met\n# Note: Replace the conditions with appropriate bash conditional logic\nif [ "$isWindowsOS" = false ] && [ "$securityType" = "TrustedLaunch" ]; then\n    az vm extension set \\\n        --publisher Microsoft.Azure.Security.LinuxAttestation \\\n        --vm-name $vmName \\\n        --name GuestAttestation \\\n        --location $location\nfi\n\n# Create Custom Script Extension for Windows if conditions are met\n# Note: Replace the conditions with appropriate bash conditional logic\nif [ "$isWindowsOS" = true ] && [ "$provisionExtensions" = true ]; then\n    az vm extension set \\\n        --publisher Microsoft.Compute \\\n        --vm-name $vmName \\\n        --name cse-windows \\\n        --location $location \\\n        --settings \'{"commandToExecute":"powershell -ExecutionPolicy Unrestricted -File writeblob.ps1 ..."}\'\nfi\n\n# Create Custom Script Extension for Linux if conditions are met\n# Note: Replace the conditions with appropriate bash conditional logic\nif [ "$isWindowsOS" = false ] && [ "$provisionExtensions" = true ]; then\n    az vm extension set \\\n        --publisher Microsoft.Azure.Extensions \\\n        --vm-name $vmName \\\n        --name cse-linux \\\n        --location $location \\\n        --settings \'{"fileUris":["https://.../writeblob.sh","https://.../install-and-run-cli-2.sh"]}\' \\\n        --protected-settings \'{"commandToExecute":"./install-and-run-cli-2.sh ..."}\'\nfi\n\n# Outputs are not directly translatable to CLI commands.\n# You can use `az resource show` or `az vm show` to retrieve the necessary information.\n```\n\nPlease note that some of the conditional logic used in the ARM template cannot be directly translated into Azure CLI commands. You will need to implement the appropriate bash conditional logic to determine whether or not to run certain commands based on the conditions specified in the ARM template. Additionally, the ARM template uses a complex object for the image reference, which I\'ve replaced with a placeholder image (`Canonical:UbuntuServer:18.04-LTS:latest`) for the purpose of this CLI script. You will need to adjust this to use the correct image based on your requirements.


verify_result
