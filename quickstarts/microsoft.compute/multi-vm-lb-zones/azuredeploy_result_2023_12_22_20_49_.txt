arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for the VMs, only certain regions support zones."}}, "adminUsername": {"type": "string", "metadata": {"description": "Username for the Virtual Machine."}, "defaultValue": "zytest"}, "dnsName": {"type": "string", "metadata": {"description": "Unique DNS Name for the Public IP for the frontend load balancer."}, "defaultValue": "zytest"}, "windowsOrUbuntu": {"type": "string", "allowedValues": ["Windows", "Ubuntu"], "defaultValue": "Ubuntu", "metadata": {"description": "Operation System for the Virtual Machine."}}, "numberOfVms": {"type": "int", "defaultValue": 3, "minValue": 1, "maxValue": 10, "metadata": {"description": "Number of VMs to provision"}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of the virtual machine"}}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}, "OSVersion": {"defaultValue": "2022-datacenter-azure-edition", "allowedValues": ["2022-datacenter-azure-edition", "2022-datacenter-azure-edition-core", "2022-datacenter-azure-edition-core-smalldisk", "2022-datacenter-azure-edition-smalldisk", "2022-datacenter-core-g2", "2022-datacenter-core-smalldisk-g2", "2022-datacenter-g2", "2022-datacenter-smalldisk-g2"], "type": "String", "metadata": {"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}}}, "variables": {"extensionName": "GuestAttestation", "extensionPublisherLin": "Microsoft.Azure.Security.LinuxAttestation", "extensionPublisherWin": "Microsoft.Azure.Security.WindowsAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "storageAccountName": "[concat(\'diags\', uniquestring(resourceGroup().id))]", "nicName": "myVMNic", "subnetName": "Subnet-1", "publicIPAddressName": "myPublicIP", "virtualNetworkName": "MyVNET", "networkSecurityGroupName": "allowRemoting", "lbName": "multiVMLB", "subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets/\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]", "frontEndIPConfigID": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\', variables(\'lbName\'), \'loadBalancerFrontend\')]", "inboundNatRuleName": "remoting", "windowsImage": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'OSVersion\')]", "version": "latest"}, "linuxImage": {"publisher": "Canonical", "offer": "0001-com-ubuntu-server-lunar-daily", "sku": "23_04-daily-gen2", "version": "latest"}, "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Storage/storageAccounts", "name": "[variables(\'storageAccountName\')]", "apiVersion": "2019-06-01", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "StorageV2", "properties": {}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "Standard"}, "properties": {"publicIPAllocationMethod": "Static", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsName\')]"}}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/networkSecurityGroups", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "RemoteConnection", "properties": {"description": "Allow RDP/SSH", "protocol": "Tcp", "sourcePortRange": "*", "destinationPortRange": "[if(equals(parameters(\'windowsOrUbuntu\'), \'Windows\'), 3389, 22)]", "sourceAddressPrefix": "*", "destinationAddressPrefix": "*", "access": "Allow", "priority": 100, "direction": "Inbound"}}]}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[variables(\'networkSecurityGroupName\')]"], "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "10.0.0.0/24", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'nicName\'), copyindex())]", "location": "[parameters(\'location\')]", "copy": {"name": "nicLoop", "count": "[parameters(\'numberOfVms\')]"}, "dependsOn": ["[variables(\'virtualNetworkName\')]", "[variables(\'lbName\')]", "lbNatLoop"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "subnet": {"id": "[variables(\'subnetRef\')]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'lbName\'), \'LoadBalancerBackend\')]"}], "loadBalancerInboundNatRules": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\', variables(\'lbName\'), concat(variables(\'inboundNatRuleName\'), copyindex()))]"}]}}]}}, {"apiVersion": "2020-05-01", "name": "[variables(\'lbName\')]", "type": "Microsoft.Network/loadBalancers", "location": "[parameters(\'location\')]", "sku": {"name": "Standard"}, "dependsOn": ["[variables(\'publicIPAddressName\')]"], "properties": {"frontendIPConfigurations": [{"name": "LoadBalancerFrontend", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"}}}], "backendAddressPools": [{"name": "LoadBalancerBackend"}], "loadbalancingRules": [{"name": "port80", "properties": {"frontendIPConfiguration": {"id": "[variables(\'frontendIPConfigID\')]"}, "backendaddressPool": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'lbName\'), \'LoadBalancerBackend\')]"}, "protocol": "Tcp", "frontendPort": 80, "backendPort": 80, "probe": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/probes\', variables(\'lbName\'), \'tcpProbe\')]"}}}], "probes": [{"name": "tcpProbe", "properties": {"protocol": "Tcp", "port": 80, "intervalInSeconds": 5, "numberOfProbes": 2}}]}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/loadBalancers/inboundNatRules", "name": "[concat(variables(\'lbName\'), \'/\', variables(\'inboundNatRuleName\'), copyIndex())]", "location": "[parameters(\'location\')]", "copy": {"name": "lbNatLoop", "count": "[parameters(\'numberOfVms\')]"}, "dependsOn": ["[variables(\'lbName\')]"], "properties": {"frontendIPConfiguration": {"id": "[variables(\'frontEndIPConfigID\')]"}, "protocol": "Tcp", "frontendPort": "[copyIndex(50000)]", "backendPort": "[if(equals(parameters(\'windowsOrUbuntu\'), \'Windows\'), 3389, 22)]", "enableFloatingIP": false}}, {"apiVersion": "2021-03-01", "type": "Microsoft.Compute/virtualMachines", "name": "[concat(parameters(\'dnsName\'), copyindex())]", "zones": "[split(string(add(mod(copyIndex(),3),1)), \',\')]", "copy": {"name": "virtualMachineLoop", "count": "[parameters(\'numberOfVms\')]"}, "location": "[parameters(\'location\')]", "dependsOn": ["nicLoop"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[concat(parameters(\'dnsName\'), copyIndex())]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "storageProfile": {"imageReference": "[if(equals(parameters(\'windowsOrUbuntu\'), \'Windows\'), variables(\'windowsImage\'), variables(\'linuxImage\'))]", "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',concat(variables(\'nicName\'),copyindex()))]"}]}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]", "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(resourceId(\'Microsoft.Storage/storageAccounts/\', variables(\'storageAccountName\'))).primaryEndpoints.blob]"}}}}, {"type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2022-03-01", "name": "[format(\'{0}/GuestAttestation\', concat(parameters(\'dnsName\'), copyindex()))]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', concat(parameters(\'dnsName\'), copyindex()))]"], "properties": {"publisher": "[if(equals(parameters(\'windowsOrUbuntu\'), \'Windows\'), variables(\'extensionPublisherWin\'), variables(\'extensionPublisherLin\'))]", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "", "maaTenantName": "[variables(\'maaTenantName\')]"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}, "useCustomToken": "false", "disableAlerts": "false"}}}, "copy": {"name": "virtualMachineLoop", "count": "[parameters(\'numberOfVms\')]"}, "condition": "[and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true())))]"}], "outputs": {"hostname": {"type": "string", "value": "[reference(variables(\'publicIPAddressName\')).dnsSettings.fqdn]"}}}


cli_script
Here is the equivalent CLI script:\n\n```bash\n#!/bin/bash\n\n# Define parameters\nlocation="westus"\nadminUsername="zytest"\ndnsName="zytest"\nwindowsOrUbuntu="Ubuntu"\nnumberOfVms=3\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\nvmSize="Standard_D2s_v3"\nsecurityType="TrustedLaunch"\nOSVersion="2022-datacenter-azure-edition"\n\n# Create storage account\naz storage account create --name diags$(uuidgen) --sku Standard_LRS --kind StorageV2 --location $location\n\n# Create public IP address\naz network public-ip create --name myPublicIP --sku Standard --location $location --dns-name $dnsName\n\n# Create network security group\naz network nsg create --name allowRemoting --location $location\n\n# Create virtual network\naz network vnet create --name MyVNET --location $location --address-prefix 10.0.0.0/16 --subnet-name Subnet-1 --network-security-group allowRemoting\n\n# Create load balancer\naz network lb create --name multiVMLB --location $location --sku Standard --public-ip-address myPublicIP --frontend-ip-name LoadBalancerFrontend --backend-pool-name LoadBalancerBackend\n\n# Create inbound NAT rules and network interfaces\nfor ((i=0; i<$numberOfVms; i++)); do\n  az network lb inbound-nat-rule create --lb-name multiVMLB --name remoting$i --protocol Tcp --frontend-port $((50000+i)) --backend-port $(if [ "$windowsOrUbuntu" = "Windows" ]; then echo 3389; else echo 22; fi) --frontend-ip-name LoadBalancerFrontend\n  az network nic create --name myVMNic$i --location $location --vnet-name MyVNET --subnet Subnet-1 --lb-name multiVMLB --lb-address-pools LoadBalancerBackend --lb-inbound-nat-rules remoting$i\ndone\n\n# Create virtual machines\nfor ((i=0; i<$numberOfVms; i++)); do\n  az vm create --name $dnsName$i --location $location --size $vmSize --admin-username $adminUsername --admin-password $adminPasswordOrKey --authentication-type $authenticationType --image $(if [ "$windowsOrUbuntu" = "Windows" ]; then echo "MicrosoftWindowsServer:WindowsServer:$OSVersion:latest"; else echo "Canonical:0001-com-ubuntu-server-lunar-daily:23_04-daily-gen2:latest"; fi) --nics myVMNic$i --os-disk-size-gb 30 --storage-sku Standard_LRS --boot-diagnostics-storage diags$(uuidgen)\ndone\n\n# Create VM extensions\nfor ((i=0; i<$numberOfVms; i++)); do\n  az vm extension set --publisher $(if [ "$windowsOrUbuntu" = "Windows" ]; then echo "Microsoft.Azure.Security.WindowsAttestation"; else echo "Microsoft.Azure.Security.LinuxAttestation"; fi) --name GuestAttestation --version 1.0 --vm-name $dnsName$i --location $location\ndone\n```\n\nPlease replace the `uuidgen` with a real unique string generator in your environment. This script assumes that Azure CLI is installed and logged in with an account that has sufficient permissions.


verify_result
