arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"type": "string", "defaultValue": "[deployment().properties.templateLink.uri]", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "scaleNumber": {"type": "int", "defaultValue": 2, "metadata": {"description": "Number of VMs to deploy"}}, "newStorageAccountName": {"type": "string", "metadata": {"description": "Name of new storage account"}, "defaultValue": "zytest"}, "vmName": {"type": "string", "metadata": {"description": "Name of the VM"}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "defaultValue": "Standard_D2_v3", "metadata": {"description": "Size of the VM"}}, "imagePublisher": {"type": "string", "defaultValue": "Canonical", "metadata": {"description": "Image Publisher"}}, "imageOffer": {"type": "string", "defaultValue": "UbuntuServer", "metadata": {"description": "Image Offer"}}, "imageSKU": {"type": "string", "defaultValue": "18.04-LTS", "metadata": {"description": "Image SKU"}}, "adminUsername": {"type": "string", "metadata": {"description": "VM Admin Username"}, "defaultValue": "zytest"}, "customScriptCommandToExecute": {"type": "string", "metadata": {"description": "Command to execute on the VM"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}}, "variables": {"availabilitySetName": "myAVSet", "publicIPAddressType": "Dynamic", "virtualNetworkName": "myVNET", "addressPrefix": "10.0.0.0/16", "subnet1Name": "Subnet-1", "subnet1Prefix": "10.0.0.0/24", "subnet1Ref": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnet1Name\'))]", "nicName": "myNic", "vmExtensionName": "myCustomScriptExtension", "networkSecurityGroupName": "default-NSG", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Storage/storageAccounts", "name": "[parameters(\'newStorageAccountName\')]", "apiVersion": "2021-02-01", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "Storage"}, {"type": "Microsoft.Compute/availabilitySets", "name": "[variables(\'availabilitySetName\')]", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "properties": {"platformFaultDomainCount": 2, "platformUpdateDomainCount": 2}, "sku": {"name": "Aligned"}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[concat(\'publicIP\', copyIndex())]", "location": "[parameters(\'location\')]", "copy": {"name": "foo", "count": "[parameters(\'scaleNumber\')]"}, "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]"}}, {"comments": "Default Network Security Group for template", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-11-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-22", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "22", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnet1Name\')]", "properties": {"addressPrefix": "[variables(\'subnet1Prefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'nicName\'), 0)]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', \'publicIP0\')]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIP0\')]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'nicName\'), 1)]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', \'publicIP1\')]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIP1\')]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[concat(parameters(\'vmName\'), copyIndex())]", "location": "[parameters(\'location\')]", "copy": {"name": "foo", "count": "[parameters(\'scaleNumber\')]"}, "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts/\', parameters(\'newStorageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(variables(\'nicName\'), copyIndex()))]", "[resourceId(\'Microsoft.Compute/availabilitySets/\', variables(\'availabilitySetName\'))]"], "properties": {"availabilitySet": {"id": "[resourceId(\'Microsoft.Compute/availabilitySets\', variables(\'availabilitySetName\'))]"}, "hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[concat(parameters(\'vmName\'), copyIndex())]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "storageProfile": {"imageReference": {"publisher": "[parameters(\'imagePublisher\')]", "offer": "[parameters(\'imageOffer\')]", "sku": "[parameters(\'imageSKU\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', concat(variables(\'nicName\'), copyIndex()))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(parameters(\'newStorageAccountName\'), \'2021-02-01\').primaryEndpoints[\'blob\']]"}}}}, {"type": "Microsoft.Compute/virtualMachines/extensions", "name": "[concat(parameters(\'vmName\'), \'1/\', variables(\'vmExtensionName\'))]", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines/\', concat(parameters(\'vmName\'), \'1\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(variables(\'nicName\'), \'0\'))]"], "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[uri(parameters(\'_artifactsLocation\'), concat(\'privateip.sh\', parameters(\'_artifactsLocationSasToken\')))]"], "commandToExecute": "[concat(parameters(\'customScriptCommandToExecute\'), reference(resourceId(\'Microsoft.Network/networkInterfaces\', concat(variables(\'nicName\'), \'0\'))).ipConfigurations[0].properties.privateIPAddress)]"}}}]}


cli_script
Below is the translated bash script from the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Parameters\n_artifactsLocation="[deployment().properties.templateLink.uri]"\n_artifactsLocationSasToken=""\nscaleNumber=2\nnewStorageAccountName="zytest"\nvmName="zytest"\nvmSize="Standard_D2_v3"\nimagePublisher="Canonical"\nimageOffer="UbuntuServer"\nimageSKU="18.04-LTS"\nadminUsername="zytest"\ncustomScriptCommandToExecute="zytest"\nlocation="westus"\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\n\n# Variables\navailabilitySetName="myAVSet"\npublicIPAddressType="Dynamic"\nvirtualNetworkName="myVNET"\naddressPrefix="10.0.0.0/16"\nsubnet1Name="Subnet-1"\nsubnet1Prefix="10.0.0.0/24"\nnicName="myNic"\nvmExtensionName="myCustomScriptExtension"\nnetworkSecurityGroupName="default-NSG"\nlinuxConfiguration=\'{"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "/home/\'$adminUsername\'/.ssh/authorized_keys", "keyData": "\'$adminPasswordOrKey\'"}]}}\'\n\n# Create a new storage account\naz storage account create --name $newStorageAccountName --location $location --sku Standard_LRS --kind Storage\n\n# Create an availability set\naz vm availability-set create --name $availabilitySetName --location $location --platform-fault-domain-count 2 --platform-update-domain-count 2 --sku Aligned\n\n# Create public IP addresses\nfor i in $(seq 0 $(($scaleNumber - 1))); do\n  az network public-ip create --name publicIP$i --location $location --allocation-method $publicIPAddressType\ndone\n\n# Create a network security group and a default rule\naz network nsg create --name $networkSecurityGroupName --location $location\naz network nsg rule create --nsg-name $networkSecurityGroupName --name default-allow-22 --priority 1000 --access Allow --direction Inbound --destination-port-ranges 22 --protocol Tcp --source-address-prefix \'*\' --source-port-range \'*\' --destination-address-prefix \'*\'\n\n# Create a virtual network and subnet\naz network vnet create --name $virtualNetworkName --location $location --address-prefix $addressPrefix --subnet-name $subnet1Name --subnet-prefix $subnet1Prefix --network-security-group $networkSecurityGroupName\n\n# Create network interfaces\nfor i in $(seq 0 $(($scaleNumber - 1))); do\n  az network nic create --name ${nicName}${i} --location $location --vnet-name $virtualNetworkName --subnet $subnet1Name --public-ip-address publicIP$i\ndone\n\n# Create VMs\nfor i in $(seq 0 $(($scaleNumber - 1))); do\n  az vm create --name ${vmName}${i} --location $location --availability-set $availabilitySetName --nics ${nicName}${i} --image $imagePublisher:$imageOffer:$imageSKU:latest --size $vmSize --admin-username $adminUsername --authentication-type $authenticationType --ssh-key-value $adminPasswordOrKey --generate-ssh-keys\ndone\n\n# Add custom script extensions to VMs\nfor i in $(seq 0 $(($scaleNumber - 1))); do\n  privateIp=$(az network nic show --name ${nicName}${i} --query "ipConfigurations[0].privateIpAddress" -o tsv)\n  scriptCommand="$customScriptCommandToExecute $privateIp"\n  az vm extension set --publisher Microsoft.Azure.Extensions --name CustomScript --vm-name ${vmName}${i} --settings \'{"fileUris": ["\'$(_artifactsLocation)\'privateip.sh\'${_artifactsLocationSasToken}\'"],"commandToExecute": "\'$scriptCommand\'"}\'\ndone\n```\n\nThis script will deploy the resources as defined in the ARM template. Make sure to have the Azure CLI installed and logged in to your Azure account before running the script. Also, you may need to adjust the script based on the actual values provided for parameters and any constraints in your environment.


verify_result
