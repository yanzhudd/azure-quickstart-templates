arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"adminUsername": {"type": "string", "metadata": {"description": "UserName of existing VM Scale Set"}, "defaultValue": "zytest"}, "existingvmss": {"type": "string", "metadata": {"description": "Name of existing VM Scale Set"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "keyVaultName": {"type": "string", "metadata": {"description": "Name of the KeyVault to place the volume encryption key"}, "defaultValue": "zytest"}, "keyVaultResourceGroup": {"type": "string", "metadata": {"description": "Resource group of the KeyVault"}, "defaultValue": "zytest"}, "keyEncryptionKeyURL": {"type": "string", "defaultValue": "", "metadata": {"description": "URL of the KeyEncryptionKey used to encrypt the volume encryption key"}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}}, "variables": {"virtualNetworkName": "[concat(parameters(\'existingvmss\'), \'vnet\')]", "publicIPAddressName": "[concat(parameters(\'existingvmss\'), \'pip\')]", "subnetName": "[concat(parameters(\'existingvmss\'), \'subnet\')]", "loadBalancerName": "[concat(parameters(\'existingvmss\'), \'lb\')]", "natPoolName": "[concat(parameters(\'existingvmss\'), \'natpool\')]", "bePoolName": "[concat(parameters(\'existingvmss\'), \'bepool\')]", "keyVaultResourceID": "[resourceId(parameters(\'keyVaultResourceGroup\'), \'Microsoft.KeyVault/vaults/\', parameters(\'keyVaultName\'))]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2020-08-01", "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "10.0.0.0/24"}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2018-02-01", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[toLower(substring(concat(parameters(\'existingvmss\'), uniqueString(resourceGroup().id)), 0, 16))]"}}}, {"type": "Microsoft.Network/loadBalancers", "name": "[variables(\'loadBalancerName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2018-02-01", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]"], "properties": {"frontendIPConfigurations": [{"name": "LoadBalancerFrontEnd", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'bePoolName\')]"}], "inboundNatPools": [{"name": "[variables(\'natPoolName\')]", "properties": {"frontendIPConfiguration": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\', variables(\'loadBalancerName\'), \'loadBalancerFrontEnd\')]"}, "protocol": "tcp", "frontendPortRangeStart": 50000, "frontendPortRangeEnd": 50119, "backendPort": 3389}}]}}, {"type": "Microsoft.Compute/virtualMachineScaleSets", "name": "[parameters(\'existingvmss\')]", "location": "[parameters(\'location\')]", "apiVersion": "2017-03-30", "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers/\', variables(\'loadBalancerName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "sku": {"name": "Standard_D2_v3", "tier": "Standard", "capacity": 2}, "properties": {"overprovision": true, "upgradePolicy": {"mode": "Automatic"}, "virtualMachineProfile": {"storageProfile": {"osDisk": {"createOption": "FromImage"}, "imageReference": {"publisher": "RedHat", "offer": "RHEL", "sku": "7.5", "version": "latest"}}, "osProfile": {"computerNamePrefix": "existvmss", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "networkProfile": {"networkInterfaceConfigurations": [{"name": "[concat(parameters(\'existingvmss\'), \'nic\')]", "properties": {"primary": true, "ipConfigurations": [{"name": "[concat(parameters(\'existingvmss\'), \'ipconfig\')]", "properties": {"subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'loadBalancerName\'), variables(\'bePoolName\'))]"}], "loadBalancerInboundNatPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatPools\', variables(\'loadBalancerName\'), variables(\'natPoolName\'))]"}]}}]}}]}, "extensionProfile": {"extensions": [{"name": "AzureDiskEncryptionForLinux", "properties": {"publisher": "Microsoft.Azure.Security", "type": "AzureDiskEncryptionForLinux", "typeHandlerVersion": "1.1", "autoUpgradeMinorVersion": true, "forceUpdateTag": "[uniqueString(resourceGroup().id, deployment().name)]", "settings": {"EncryptionOperation": "EnableEncryption", "KeyVaultURL": "[reference(variables(\'keyVaultResourceId\'),\'2018-02-14-preview\').vaultUri]", "KeyVaultResourceId": "[variables(\'keyVaultResourceID\')]", "KeyEncryptionKeyURL": "[parameters(\'keyEncryptionKeyURL\')]", "KekVaultResourceId": "[variables(\'keyVaultResourceID\')]", "KeyEncryptionAlgorithm": "RSA-OAEP", "VolumeType": "Data"}}}]}}}}], "outputs": {"vmssName": {"type": "string", "value": "[parameters(\'existingvmss\')]"}}}


cli_script
Below is the translated Azure CLI script from the provided ARM template and template parameters:\n\n```bash\n#!/bin/bash\n\n# Template Parameters\nadminUsername="zytest"\nexistingvmss="zytest"\nlocation="westus"\nkeyVaultName="zytest"\nkeyVaultResourceGroup="zytest"\nkeyEncryptionKeyURL=""\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\n\n# Derived Variables\nvirtualNetworkName="${existingvmss}vnet"\npublicIPAddressName="${existingvmss}pip"\nsubnetName="${existingvmss}subnet"\nloadBalancerName="${existingvmss}lb"\nnatPoolName="${existingvmss}natpool"\nbePoolName="${existingvmss}bepool"\n# Note: In the ARM template, resourceId function is used, which is not directly translatable to CLI.\n# The keyVaultResourceID would be the Azure Resource ID for the Key Vault and needs to be constructed or retrieved.\n# For simplicity, we are assuming the Key Vault exists and we are using its name and resource group to form the ID.\nkeyVaultResourceID="/subscriptions/{subscription-id}/resourceGroups/${keyVaultResourceGroup}/providers/Microsoft.KeyVault/vaults/${keyVaultName}"\n\n# LinuxConfiguration is not directly translatable to CLI, so we are assuming the use of sshPublicKey and omitting password authentication.\ndisablePasswordAuthentication=true\nsshPublicKeyPath="/home/${adminUsername}/.ssh/authorized_keys"\nsshPublicKeyData="${adminPasswordOrKey}"\n\n# Create Virtual Network\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --resource-group $keyVaultResourceGroup \\\n    --location $location \\\n    --address-prefixes "10.0.0.0/16" \\\n    --subnet-name $subnetName \\\n    --subnet-prefix "10.0.0.0/24"\n\n# Create Public IP Address\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --resource-group $keyVaultResourceGroup \\\n    --location $location \\\n    --allocation-method Dynamic\n\n# Create Load Balancer\naz network lb create \\\n    --name $loadBalancerName \\\n    --resource-group $keyVaultResourceGroup \\\n    --location $location \\\n    --frontend-ip-name LoadBalancerFrontEnd \\\n    --public-ip-address $publicIPAddressName \\\n    --backend-pool-name $bePoolName\n\n# Create Inbound NAT Pool\naz network lb inbound-nat-pool create \\\n    --resource-group $keyVaultResourceGroup \\\n    --lb-name $loadBalancerName \\\n    --name $natPoolName \\\n    --protocol tcp \\\n    --frontend-port-range-start 50000 \\\n    --frontend-port-range-end 50119 \\\n    --backend-port 3389 \\\n    --frontend-ip-name LoadBalancerFrontEnd\n\n# Create Virtual Machine Scale Set\naz vmss create \\\n    --name $existingvmss \\\n    --resource-group $keyVaultResourceGroup \\\n    --location $location \\\n    --vm-sku Standard_D2_v3 \\\n    --instance-count 2 \\\n    --upgrade-policy-mode Automatic \\\n    --admin-username $adminUsername \\\n    --authentication-type $authenticationType \\\n    --admin-password $adminPasswordOrKey \\\n    --image "RedHat:RHEL:7.5:latest" \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnetName \\\n    --load-balancer $loadBalancerName \\\n    --backend-pool-name $bePoolName\n\n# Note: The extension to enable disk encryption is not directly translatable to CLI and would require additional commands.\n# The following is a placeholder for where you would add the disk encryption extension.\n# az vmss extension set \\\n#     --resource-group $keyVaultResourceGroup \\\n#     --vmss-name $existingvmss \\\n#     --name "AzureDiskEncryptionForLinux" \\\n#     --publisher "Microsoft.Azure.Security" \\\n#     --version "1.1" \\\n#     --settings \'{...}\'  # Settings need to be provided in JSON format\n\n# Outputs\necho "VM Scale Set Name: $existingvmss"\n```\n\nPlease note that the above script assumes you have the necessary permissions and that the specified resources and resource groups already exist. The `keyVaultResourceID` and `linuxConfiguration` have been simplified for CLI use and may require further adjustments depending on your actual Azure environment. The `az vmss extension set` command for enabling disk encryption is commented out and needs to be completed with actual settings in JSON format.


verify_result
