arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmName": {"type": "string", "metadata": {"description": "Name of the VM"}, "defaultValue": "zytest"}, "osType": {"type": "string", "allowedValues": ["Windows", "Linux"], "metadata": {"description": "Type of OS on the existing vhd"}, "defaultValue": "zytest"}, "osDiskVhdUri": {"type": "string", "metadata": {"description": "Uri of the existing OS VHD in ARM standard or premium storage"}, "defaultValue": "zytest"}, "dataDisk0VhdUri": {"type": "string", "metadata": {"description": "Uri of the existing data disk VHD in ARM standard or premium storage"}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "metadata": {"description": "Size of the VM"}, "defaultValue": "zytest"}, "existingVirtualNetworkName": {"type": "string", "metadata": {"description": "Name of the existing VNET"}, "defaultValue": "zytest"}, "existingVirtualNetworkResourceGroup": {"type": "string", "defaultValue": "[resourceGroup().name]", "metadata": {"description": "Name of the existing VNET resource group"}}, "subnetName": {"type": "string", "metadata": {"description": "Name of the subnet in the virtual network you want to use"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"diagStorageAccountName": "[concat(parameters(\'vmName\'), \'diag\')]", "publicIPAddressType": "Dynamic", "subnetRef": "[resourceId(parameters(\'existingVirtualNetworkResourceGroup\'), \'Microsoft.Network/virtualNetworks/subnets\', parameters(\'existingVirtualNetworkName\'),  parameters(\'subnetName\'))]", "nicName": "[concat(parameters(\'vmName\'), \'-nic1\')]", "publicIPAddressName": "[concat(parameters(\'vmName\'), \'-pip\')]"}, "resources": [{"apiVersion": "2021-01-01", "type": "Microsoft.Storage/storageAccounts", "name": "[variables(\'diagStorageAccountName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_GRS"}, "kind": "StorageV2", "properties": {}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "tags": {"displayName": "PublicIPAddress"}, "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]"}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]"], "tags": {"displayName": "NetworkInterface"}, "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[variables(\'subnetRef\')]"}}}]}}, {"type": "Microsoft.Compute/disks", "apiVersion": "2017-03-30", "name": "[concat(parameters(\'vmName\'), \'_OSdisk\')]", "location": "[parameters(\'location\')]", "properties": {"creationData": {"createOption": "Import", "sourceUri": "[parameters(\'osDiskVhdUri\')]"}, "osType": "[parameters(\'osType\')]"}}, {"type": "Microsoft.Compute/disks", "apiVersion": "2017-03-30", "name": "[concat(parameters(\'vmName\'), \'_Datadisk\')]", "location": "[parameters(\'location\')]", "properties": {"creationData": {"createOption": "Import", "sourceUri": "[parameters(\'dataDisk0VhdUri\')]"}}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "tags": {"displayName": "VirtualMachine"}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces/\', variables(\'nicName\'))]", "[resourceId(\'Microsoft.Compute/disks\', concat(parameters(\'vmName\'), \'_OSdisk\'))]", "[resourceId(\'Microsoft.Compute/disks\', concat(parameters(\'vmName\'), \'_Datadisk\'))]"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "storageProfile": {"osDisk": {"osType": "[parameters(\'osType\')]", "caching": "ReadWrite", "createOption": "Attach", "managedDisk": {"id": "[resourceId(\'Microsoft.Compute/disks\', concat(parameters(\'vmName\'), \'_OSdisk\'))]"}}, "dataDisks": [{"lun": 0, "managedDisk": {"id": "[resourceId(\'Microsoft.Compute/disks\', concat(parameters(\'vmName\'), \'_Datadisk\'))]"}, "caching": "ReadOnly", "createOption": "Attach"}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',variables(\'nicName\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(variables(\'diagStorageAccountName\'), \'2021-02-01\').primaryEndpoints[\'blob\']]"}}}}]}


cli_script
Here is the equivalent CLI script:\n\n```bash\n#!/bin/bash\n\n# Define parameters\nvmName="zytest"\nosType="zytest"\nosDiskVhdUri="zytest"\ndataDisk0VhdUri="zytest"\nvmSize="zytest"\nexistingVirtualNetworkName="zytest"\nexistingVirtualNetworkResourceGroup=$(az group show --name $(az group list --query "[?contains(name, \'zytest\')].name" --output tsv) --query id --output tsv)\nsubnetName="zytest"\nlocation="westus"\n\n# Define variables\ndiagStorageAccountName="${vmName}diag"\npublicIPAddressType="Dynamic"\nsubnetRef=$(az network vnet subnet show --name $subnetName --vnet-name $existingVirtualNetworkName --resource-group $existingVirtualNetworkResourceGroup --query id --output tsv)\nnicName="${vmName}-nic1"\npublicIPAddressName="${vmName}-pip"\n\n# Create resources\naz storage account create --name $diagStorageAccountName --location $location --sku Standard_GRS --kind StorageV2\n\naz network public-ip create --name $publicIPAddressName --location $location --allocation-method $publicIPAddressType\n\naz network nic create --name $nicName --location $location --subnet $subnetRef --public-ip-address $publicIPAddressName\n\naz disk create --name "${vmName}_OSdisk" --location $location --source $osDiskVhdUri --os-type $osType\n\naz disk create --name "${vmName}_Datadisk" --location $location --source $dataDisk0VhdUri\n\naz vm create --name $vmName --location $location --size $vmSize --os-type $osType --nics $nicName --attach-os-disk "${vmName}_OSdisk" --attach-data-disks "${vmName}_Datadisk" --boot-diagnostics-storage $diagStorageAccountName\n```\n\nThis script first defines the parameters and variables, then creates the resources in the order specified in the ARM template. The `az` commands are used to create the resources, with the parameters and variables passed in as arguments.


verify_result
