arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmssName": {"type": "string", "metadata": {"description": "Name of the virtual machine."}, "defaultValue": "zytest"}, "keyVaultName": {"type": "string", "metadata": {"description": "Name of the KeyVault to place the volume encryption key"}, "defaultValue": "zytest"}, "enabledForDeployment": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."}}, "enabledForDiskEncryption": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."}}, "enabledForTemplateDeployment": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."}}, "keysPermissions": {"type": "array", "defaultValue": ["list", "get", "decrypt", "encrypt", "unwrapkey", "wrapkey"], "metadata": {"description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."}}, "secretsPermissions": {"type": "array", "defaultValue": ["list", "get"], "metadata": {"description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."}}, "skuName": {"type": "string", "defaultValue": "Standard", "allowedValues": ["Standard", "Premium"], "metadata": {"description": "Specifies whether the key vault is a standard vault or a premium vault."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location of the resources."}}}, "variables": {"keyVaultURL": "[concat(\'https://\', parameters(\'keyVaultName\'), environment().suffixes.keyVaultDns)]", "encryptionOperation": "EnableEncryption"}, "resources": [{"type": "Microsoft.KeyVault/vaults", "apiVersion": "2021-04-01-preview", "name": "[parameters(\'keyVaultName\')]", "location": "[parameters(\'location\')]", "properties": {"enabledForDeployment": "[parameters(\'enabledForDeployment\')]", "enabledForDiskEncryption": "[parameters(\'enabledForDiskEncryption\')]", "enabledForTemplateDeployment": "[parameters(\'enabledForTemplateDeployment\')]", "tenantId": "[subscription().tenantId]", "accessPolicies": [{"objectId": "[reference(resourceId(\'Microsoft.Compute/virtualMachineScaleSets/\', parameters(\'vmssName\')), \'2020-12-01\', \'full\').identity.principalId]", "tenantId": "[subscription().tenantId]", "permissions": {"keys": "[parameters(\'keysPermissions\')]", "secrets": "[parameters(\'secretsPermissions\')]"}}], "sku": {"name": "[parameters(\'skuName\')]", "family": "A"}, "networkAcls": {"defaultAction": "Allow", "bypass": "AzureServices"}}}, {"type": "Microsoft.Compute/virtualMachineScaleSets/extensions", "name": "[concat(parameters(\'vmssName\'),\'/diskEncryption\')]", "apiVersion": "2020-12-01", "dependsOn": ["[resourceId(\'Microsoft.KeyVault/vaults\', parameters(\'keyVaultName\'))]"], "location": "[parameters(\'location\')]", "properties": {"publisher": "Microsoft.Azure.Security", "type": "AzureDiskEncryption", "typeHandlerVersion": "2.2", "autoUpgradeMinorVersion": true, "settings": {"EncryptionOperation": "[variables(\'encryptionOperation\')]", "KeyVaultURL": "[variables(\'keyVaultURL\')]", "KeyVaultResourceId": "[resourceId(\'Microsoft.KeyVault/vaults/\', parameters(\'keyVaultName\'))]", "VolumeType": "All"}}}]}


cli_script
Based on the provided ARM template and parameters, here is the equivalent Azure CLI script:\n\n```bash\n#!/bin/bash\n\n# Define variables from parameters\nvmssName="zytest"\nkeyVaultName="zytest"\nenabledForDeployment=true\nenabledForDiskEncryption=true\nenabledForTemplateDeployment=true\nkeysPermissions=("list" "get" "decrypt" "encrypt" "unwrapkey" "wrapkey")\nsecretsPermissions=("list" "get")\nskuName="Standard"\nlocation="westus"\n\n# Create Key Vault\naz keyvault create \\\n    --name $keyVaultName \\\n    --location $location \\\n    --enabled-for-deployment $enabledForDeployment \\\n    --enabled-for-disk-encryption $enabledForDiskEncryption \\\n    --enabled-for-template-deployment $enabledForTemplateDeployment \\\n    --sku $skuName \\\n    --network-acls default-action=Allow bypass=AzureServices\n\n# Wait for Key Vault to be created before setting access policies\necho "Waiting for Key Vault to be available..."\nsleep 60\n\n# Get the tenant ID\ntenantId=$(az account show --query tenantId -o tsv)\n\n# Get the principal ID of the VMSS\'s system-assigned managed identity\nprincipalId=$(az vmss show --name $vmssName --query identity.principalId -o tsv)\n\n# Set access policy for the Key Vault\naz keyvault set-policy \\\n    --name $keyVaultName \\\n    --object-id $principalId \\\n    --tenant-id $tenantId \\\n    --key-permissions ${keysPermissions[@]} \\\n    --secret-permissions ${secretsPermissions[@]}\n\n# Get the Key Vault URI\nkeyVaultURL=$(az keyvault show --name $keyVaultName --query "properties.vaultUri" -o tsv)\n\n# Get the Key Vault resource ID\nkeyVaultResourceId=$(az keyvault show --name $keyVaultName --query id -o tsv)\n\n# Add disk encryption extension to the VMSS\naz vmss extension set \\\n    --resource-group myResourceGroup \\\n    --vmss-name $vmssName \\\n    --name diskEncryption \\\n    --publisher Microsoft.Azure.Security \\\n    --version 2.2 \\\n    --settings "{\\"EncryptionOperation\\":\\"EnableEncryption\\",\\"KeyVaultURL\\":\\"$keyVaultURL\\",\\"KeyVaultResourceId\\":\\"$keyVaultResourceId\\",\\"VolumeType\\":\\"All\\"}"\n```\n\nPlease note the following:\n- The script assumes the VMSS and Key Vault are in the same resource group named "myResourceGroup". You may need to replace this with the actual name of your resource group.\n- The script includes a wait time of 60 seconds after the Key Vault creation to ensure that the Key Vault is available before setting the access policy. Adjust the wait time if necessary.\n- The `az vmss show` command is used to get the principal ID of the VMSS\'s managed identity. If the VMSS does not have a system-assigned managed identity, you will need to create one or use a different identity.\n- The `az vmss extension set` command is used to add the disk encryption extension to the VMSS. Adjust the `--resource-group` parameter as needed.\n\nMake sure to replace the placeholder values and adjust the script as per your specific requirements and environment.


verify_result
