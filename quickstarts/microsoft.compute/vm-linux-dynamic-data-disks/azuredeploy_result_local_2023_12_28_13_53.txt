arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"type": "string", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}, "defaultValue": "[deployment().properties.templateLink.uri]"}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "dnsLabelPrefix": {"type": "string", "metadata": {"description": "Unique public dns prefix where the  node will be exposed"}, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "defaultValue": "azureuser", "metadata": {"description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."}}, "imagePublisher": {"type": "string", "defaultValue": "openlogic", "allowedValues": ["Canonical", "openlogic"], "metadata": {"description": "openlogic/Canonical are the respective CentOS/Ubuntu Distributor in Azure Market Place"}}, "imageOffer": {"type": "string", "defaultValue": "CentOS", "allowedValues": ["CentOS", "UbuntuServer"], "metadata": {"description": "New CentOS/UbuntuServer Image Offer"}}, "imageSku": {"type": "string", "defaultValue": "7.2", "allowedValues": ["16.04.0-LTS", "6.5", "6.6", "7.1", "7.2"], "metadata": {"description": "P.S: OpenLogic CentOS version to use **docker usage Only for 7.1/7.2 kernels 3.10 and above **"}}, "sshPublicKey": {"type": "securestring", "metadata": {"description": "This field must be a valid SSH public key. ssh with this RSA public key"}, "defaultValue": "zytest"}, "mountFolder": {"type": "string", "defaultValue": "/data", "metadata": {"description": "The Folder system to be auto-mounted."}}, "nodeSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of the node."}}, "dockerVer": {"type": "string", "defaultValue": "1.12", "metadata": {"description": "The docker version **Only for 7.1/7.2 kernels 3.10 and above **"}}, "dockerComposeVer": {"type": "string", "defaultValue": "1.9.0-rc2", "metadata": {"description": "The Docker Compose Version **Only for 7.1/7.2 kernels 3.10 and above **"}}, "dockerMachineVer": {"type": "string", "defaultValue": "0.8.2", "metadata": {"description": "The docker-machine version **Only for 7.1/7.2 kernels 3.10 and above **"}}, "dataDiskSize": {"type": "int", "defaultValue": 10, "metadata": {"description": "The size in GB of each data disk that is attached to the VM.  A MDADM RAID0  is created with all data disks auto-mounted,  that is dataDiskSize * dataDiskCount in size n the Storage ."}}, "masterVMName": {"type": "string", "defaultValue": "centos", "allowedValues": ["centos", "ubuntuserver"], "metadata": {"description": "The Name of the VM."}}, "numDataDisks": {"type": "int", "defaultValue": "4", "minValue": 0, "maxValue": 64, "metadata": {"description": "This parameter allows the user to select the number of disks wanted"}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"avSetName": "avSet", "diskCaching": "ReadWrite", "networkSettings": {"virtualNetworkName": "virtualnetwork", "addressPrefix": "10.0.0.0/16", "subnet": {"dse": {"name": "dse", "prefix": "10.0.0.0/24", "vnet": "virtualnetwork"}}, "statics": {"master": "10.0.0.254"}}, "nicName": "nic", "publicIPAddressName": "publicips", "publicIPAddressType": "Dynamic", "subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'networkSettings\').virtualNetworkName, variables(\'networkSettings\').subnet.dse.name)]", "installationCLI": "[concat(\'bash azuredeploy.sh \', parameters(\'masterVMName\'), \' \', parameters(\'mountFolder\'), \' \', parameters(\'numDataDisks\'), \' \', parameters(\'dockerVer\'), \' \', parameters(\'dockerComposeVer\'), \' \', parameters(\'adminUsername\'), \' \', parameters(\'imageSku\'), \' \', parameters(\'dockerMachineVer\'))]", "sshKeyPath": "[concat(\'/home/\',parameters(\'adminUsername\'),\'/.ssh/authorized_keys\')]", "networkSecurityGroupName": "default-NSG"}, "resources": [{"type": "Microsoft.Compute/availabilitySets", "name": "[variables(\'avSetName\')]", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "sku": {"name": "Aligned"}, "properties": {"platformFaultDomainCount": 2, "platformUpdateDomainCount": 5}}, {"comments": "Default Network Security Group for template", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-11-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-22", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "22", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'networkSettings\').virtualNetworkName]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'networkSettings\').addressPrefix]"]}, "subnets": [{"name": "[variables(\'networkSettings\').subnet.dse.name]", "properties": {"addressPrefix": "[variables(\'networkSettings\').subnet.dse.prefix]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2020-11-01", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'networkSettings\').virtualNetworkName)]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Static", "privateIPAddress": "[variables(\'networkSettings\').statics.master]", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[variables(\'subnetRef\')]"}}}]}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'masterVMName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces/\', variables(\'nicName\'))]", "[resourceId(\'Microsoft.Compute/availabilitySets/\', variables(\'avSetName\'))]"], "properties": {"availabilitySet": {"id": "[resourceId(\'Microsoft.Compute/availabilitySets\', variables(\'avSetName\'))]"}, "hardwareProfile": {"vmSize": "[parameters(\'nodeSize\')]"}, "osProfile": {"computerName": "[parameters(\'masterVMName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[variables(\'sshKeyPath\')]", "keyData": "[parameters(\'sshPublicKey\')]"}]}}}, "storageProfile": {"imageReference": {"publisher": "[parameters(\'imagePublisher\')]", "offer": "[parameters(\'imageOffer\')]", "sku": "[parameters(\'imageSku\')]", "version": "latest"}, "osDisk": {"name": "[concat(parameters(\'masterVMName\'),\'_OSDisk\')]", "caching": "ReadWrite", "createOption": "FromImage"}, "copy": [{"name": "dataDisks", "count": "[parameters(\'numDataDisks\')]", "input": {"caching": "[variables(\'diskCaching\')]", "diskSizeGB": "[parameters(\'dataDiskSize\')]", "lun": "[copyIndex(\'dataDisks\')]", "name": "[concat(parameters(\'masterVMName\'),\'-datadisk\',copyIndex(\'dataDisks\'))]", "createOption": "Empty"}}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',variables(\'nicName\'))]"}]}}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines/extensions", "name": "[concat(parameters(\'masterVMName\'), \'/Installation\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines/\', parameters(\'masterVMName\'))]"], "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[uri(parameters(\'_artifactsLocation\'), concat(\'azuredeploy.sh\', parameters(\'_artifactsLocationSasToken\')))]"], "commandToExecute": "[variables(\'installationCLI\')]"}}}]}


cli_script
Below is the Bash script equivalent to the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Parameters\n_artifactsLocation="[deployment().properties.templateLink.uri]"\n_artifactsLocationSasToken=""\ndnsLabelPrefix="zytest"\nadminUsername="azureuser"\nimagePublisher="openlogic"\nimageOffer="CentOS"\nimageSku="7.2"\nsshPublicKey="zytest"\nmountFolder="/data"\nnodeSize="Standard_D2s_v3"\ndockerVer="1.12"\ndockerComposeVer="1.9.0-rc2"\ndockerMachineVer="0.8.2"\ndataDiskSize=10\nmasterVMName="centos"\nnumDataDisks=4\nlocation="westus"\n\n# Variables\navSetName="avSet"\ndiskCaching="ReadWrite"\nvirtualNetworkName="virtualnetwork"\naddressPrefix="10.0.0.0/16"\nsubnetName="dse"\nsubnetPrefix="10.0.0.0/24"\nstaticMasterIP="10.0.0.254"\nnicName="nic"\npublicIPAddressName="publicips"\npublicIPAddressType="Dynamic"\nnetworkSecurityGroupName="default-NSG"\nsshKeyPath="/home/$adminUsername/.ssh/authorized_keys"\ninstallationCLI="bash azuredeploy.sh $masterVMName $mountFolder $numDataDisks $dockerVer $dockerComposeVer $adminUsername $imageSku $dockerMachineVer"\n\n# Create Availability Set\naz vm availability-set create \\\n    --name $avSetName \\\n    --resource-group <resource-group> \\\n    --location $location \\\n    --platform-fault-domain-count 2 \\\n    --platform-update-domain-count 5 \\\n    --sku Aligned\n\n# Create Network Security Group and Rule\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --resource-group <resource-group> \\\n    --location $location\n\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --resource-group <resource-group> \\\n    --name "default-allow-22" \\\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --destination-port-ranges 22 \\\n    --protocol Tcp \\\n    --source-address-prefix "*" \\\n    --source-port-range "*"\n\n# Create Virtual Network and Subnet\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --resource-group <resource-group> \\\n    --location $location \\\n    --address-prefix $addressPrefix \\\n    --subnet-name $subnetName \\\n    --subnet-prefix $subnetPrefix \\\n    --network-security-group $networkSecurityGroupName\n\n# Create Public IP Address\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --resource-group <resource-group> \\\n    --location $location \\\n    --allocation-method $publicIPAddressType \\\n    --dns-name $dnsLabelPrefix\n\n# Create Network Interface\naz network nic create \\\n    --name $nicName \\\n    --resource-group <resource-group> \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnetName \\\n    --public-ip-address $publicIPAddressName \\\n    --private-ip-address $staticMasterIP\n\n# Create Virtual Machine\naz vm create \\\n    --name $masterVMName \\\n    --resource-group <resource-group> \\\n    --location $location \\\n    --availability-set $avSetName \\\n    --nics $nicName \\\n    --size $nodeSize \\\n    --image $imagePublisher:$imageOffer:$imageSku:latest \\\n    --admin-username $adminUsername \\\n    --ssh-key-values "$sshPublicKey" \\\n    --os-disk-name "${masterVMName}_OSDisk" \\\n    --os-disk-caching ReadWrite\n\n# Add Data Disks to VM\nfor i in $(seq 1 $numDataDisks); do\n    az vm disk attach \\\n        --vm-name $masterVMName \\\n        --resource-group <resource-group> \\\n        --name "${masterVMName}-datadisk${i}" \\\n        --new \\\n        --size-gb $dataDiskSize \\\n        --caching $diskCaching \\\n        --lun $((i - 1))\ndone\n\n# Create VM Extension for Custom Script\naz vm extension set \\\n    --publisher Microsoft.Azure.Extensions \\\n    --version 2.0 \\\n    --name CustomScript \\\n    --vm-name $masterVMName \\\n    --resource-group <resource-group> \\\n    --settings "{\\"fileUris\\": [\\"$(echo $installationCLI | xargs -I {} echo {})\\"]}" \\\n    --protected-settings "{\\"commandToExecute\\": \\"$installationCLI\\"}"\n\n```\n\nPlease replace `<resource-group>` with the actual resource group name where you want to deploy these resources. The script assumes that you have already logged into Azure CLI and set the correct subscription context.\n\nNote: The ARM template contains references to a deployment script (`azuredeploy.sh`) and its parameters, which are not provided. The `installationCLI` variable is constructed based on these parameters. You need to ensure that the actual deployment script is available at the specified `_artifactsLocation` and that it can be executed with the parameters provided.


verify_result
