arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vaultName": {"type": "string", "defaultValue": "[concat(\'keyvault-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "Specifies the name of the KeyVault, this value must be globally unique."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Specifies the Azure location where the key vault should be created."}}, "accessPolicies": {"type": "array", "metadata": {"description": "Access policies of the Key Vault."}, "defaultValue": "zytest"}, "tenantId": {"type": "string", "metadata": {"description": "Tenant ID for the Key Vault."}, "defaultValue": "zytest"}}, "resources": [{"name": "vault-prereq", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"accessPolicies": {"value": "[parameters(\'accessPolicies\')]"}, "vaultName": {"value": "[parameters(\'vaultName\')]"}, "location": {"value": "[parameters(\'location\')]"}, "enabledForDeployment": {"value": true}, "enabledForDiskEncryption": {"value": true}, "enabledForTemplateDeployment": {"value": true}, "tenantId": {"value": "[parameters(\'tenantId\')]"}}}}], "outputs": {"outKeyVaultName": {"type": "string", "value": "[parameters(\'vaultName\')]"}, "outKeyVaultResourceGroupName": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
Based on the provided JSON data, I will translate the ARM template into an equivalent Azure CLI script. Here\'s the bash script:\n\n```bash\n#!/bin/bash\n\n# Assign the parameter values to variables\nvaultName=$(az group deployment create --name vault-prereq --resource-group myResourceGroup --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json" --parameters vaultName=$vaultName location=$location accessPolicies=$accessPolicies tenantId=$tenantId enabledForDeployment=true enabledForDiskEncryption=true enabledForTemplateDeployment=true --query "properties.outputs.vaultName.value" -o tsv)\nlocation="westus" # Default value, could be replaced by actual parameter value\ntenantId="zytest" # Default value, could be replaced by actual parameter value\n\n# Process each access policy in the accessPolicies array\n# Since the defaultValue for accessPolicies is a string, we need to convert it to an array if it\'s not already\naccessPoliciesArray=($accessPolicies)\n\n# Create the Key Vault with the specified access policies\n# Note: The ARM template uses a linked template to create the Key Vault, but Azure CLI does not support linked templates directly.\n# As such, we\'ll need to replicate the behavior of the linked template within this script.\n\n# For simplicity, we will assume the linked template creates a Key Vault with the specified access policies.\n# The actual implementation may differ and require additional commands to match the linked template\'s behavior.\n\n# Create the Key Vault\naz keyvault create --name "$vaultName" --location "$location" --resource-group myResourceGroup --enabled-for-deployment true --enabled-for-disk-encryption true --enabled-for-template-deployment true --tenant-id "$tenantId"\n\n# Add each access policy to the Key Vault\nfor policy in "${accessPoliciesArray[@]}"; do\n  # Extract individual properties from the policy\n  objectId=$(echo $policy | jq -r \'.objectId\')\n  applicationId=$(echo $policy | jq -r \'.applicationId\')\n  permissions=$(echo $policy | jq -r \'.permissions\')\n  \n  # Add the access policy to the Key Vault\n  az keyvault set-policy --name "$vaultName" --object-id "$objectId" --application-id "$applicationId" --key-permissions $permissions.keys --secret-permissions $permissions.secrets --certificate-permissions $permissions.certificates\ndone\n\n# Output the Key Vault name and resource group name\necho "Key Vault Name: $vaultName"\necho "Key Vault Resource Group Name: myResourceGroup"\n```\n\nPlease note that the ARM template uses a linked template to create the Key Vault, which is not directly supported by Azure CLI. Therefore, the script above creates a Key Vault and adds access policies as would be done by the linked ARM template. The actual access policies and their permissions should be specified in the `accessPolicies` parameter, which is assumed to be an array. If `accessPolicies` is not an array, the script will need to be adjusted accordingly. Additionally, the resource group name `myResourceGroup` is used as a placeholder and should be replaced with the actual resource group name where the Key Vault will be deployed.


verify_result
