arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmName": {"type": "string", "defaultValue": "simpleWinVS", "metadata": {"description": "The name of you Virtual Machine."}}, "VmSize": {"type": "string", "defaultValue": "Standard_D2_v3", "metadata": {"description": "The size of the VM"}}, "adminUsername": {"type": "string", "metadata": {"description": "Username for the Virtual Machine."}, "defaultValue": "zytest"}, "adminPassword": {"type": "secureString", "metadata": {"description": "Password for the Virtual Machine. The password must be at least 12 characters long and have lower case, upper characters, digit and a special character (Regex match)"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "dnsLabelPrefix": {"type": "string", "defaultValue": "[toLower(concat(\'simplewinvs-\', uniqueString(resourceGroup().id)))]", "metadata": {"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."}}, "sharedResources": {"type": "string", "defaultValue": "new", "allowedValues": ["new", "existing"], "metadata": {"description": "Specify whether to create a new or existing NSG and vNet."}}, "virtualNetworkName": {"type": "string", "defaultValue": "vNet", "metadata": {"description": "Name of the VNET"}}, "subnetName": {"type": "string", "defaultValue": "Subnet", "metadata": {"description": "Name of the subnet in the virtual network"}}, "networkSecurityGroupName": {"type": "string", "defaultValue": "SecGroupNet", "metadata": {"description": "Name of the Network Security Group"}}}, "variables": {"publicIpAddressName": "[concat(parameters(\'vmName\'), \'PublicIP\' )]", "networkInterfaceName": "[concat(parameters(\'vmName\'),\'NetInt\')]", "subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', parameters(\'virtualNetworkName\'), parameters(\'subnetName\'))]", "osDiskType": "StandardSSD_LRS", "subnetAddressPrefix": "10.1.0.0/24", "addressPrefix": "10.1.0.0/16"}, "resources": [{"name": "[variables(\'networkInterfaceName\')]", "type": "Microsoft.Network/networkInterfaces", "apiVersion": "2020-05-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups/\', parameters(\'networkSecurityGroupName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', parameters(\'virtualNetworkName\'))]", "[resourceId(\'Microsoft.Network/publicIpAddresses/\', variables(\'publicIpAddressName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"subnet": {"id": "[variables(\'subnetRef\')]"}, "privateIPAllocationMethod": "Dynamic", "publicIpAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}}}], "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\',parameters(\'networkSecurityGroupName\'))]"}}}, {"condition": "[equals(parameters(\'sharedResources\'), \'new\')]", "name": "[parameters(\'networkSecurityGroupName\')]", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-05-01", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "RDP", "properties": {"protocol": "TCP", "sourcePortRange": "*", "destinationPortRange": "3389", "sourceAddressPrefix": "*", "destinationAddressPrefix": "*", "access": "Allow", "priority": 300, "direction": "Inbound"}}]}}, {"condition": "[equals(parameters(\'sharedResources\'), \'new\')]", "type": "Microsoft.Network/virtualNetworks", "apiVersion": "2020-05-01", "name": "[parameters(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[parameters(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetAddressPrefix\')]", "privateEndpointNetworkPolicies": "Enabled", "privateLinkServiceNetworkPolicies": "Enabled"}}], "enableDdosProtection": false, "enableVmProtection": false}}, {"type": "Microsoft.Network/publicIpAddresses", "apiVersion": "2020-05-01", "name": "[variables(\'publicIpAddressName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIpAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}, "publicIPAddressVersion": "IPv4", "idleTimeoutInMinutes": 4}, "sku": {"name": "Basic", "tier": "Regional"}}, {"name": "[parameters(\'vmName\')]", "type": "Microsoft.Compute/virtualMachines", "apiVersion": "2019-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces/\', variables(\'networkInterfaceName\'))]"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "storageProfile": {"osDisk": {"createOption": "fromImage", "managedDisk": {"storageAccountType": "[variables(\'osDiskType\')]"}}, "imageReference": {"publisher": "MicrosoftVisualStudio", "offer": "visualstudio2019latest", "sku": "vs-2019-comm-latest-ws2019", "version": "latest"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'networkInterfaceName\'))]"}]}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]", "windowsConfiguration": {"enableAutomaticUpdates": true, "provisionVmAgent": true}}}}], "outputs": {"adminUsername": {"type": "string", "value": "[parameters(\'adminUsername\')]"}, "virtualNetworkName": {"type": "string", "value": "[parameters(\'virtualNetworkName\')]"}, "networkSecurityGroupName": {"type": "string", "value": "[parameters(\'networkSecurityGroupName\')]"}, "hostname": {"value": "[reference(variables(\'publicIPAddressName\')).dnsSettings.fqdn]", "type": "string"}}}


cli_script
```bash\n#!/bin/bash\n\n# Assigning parameter values to variables\nvmName="simpleWinVS"\nvmSize="Standard_D2_v3"\nadminUsername="zytest"\nadminPassword="zytest"\nlocation="westus"\n# Since dnsLabelPrefix is a function of the resource group, you would need to replace the following line with the actual value\n# dnsLabelPrefix=$(az group show --name <ResourceGroupName> --query "properties.provisioningState" --output tsv | tr \'[:upper:]\' \'[:lower:]\' | xargs -I {} echo "simplewinvs-{}")\ndnsLabelPrefix="simplewinvs-$(az group show --name <ResourceGroupName> --query id --output tsv | tr \'[:upper:]\' \'[:lower:]\' | xargs -I {} echo {})"\nsharedResources="new"\nvirtualNetworkName="vNet"\nsubnetName="Subnet"\nnetworkSecurityGroupName="SecGroupNet"\n\n# Variables defined in the ARM template (not parameterized)\npublicIpAddressName="${vmName}PublicIP"\nnetworkInterfaceName="${vmName}NetInt"\nosDiskType="StandardSSD_LRS"\nsubnetAddressPrefix="10.1.0.0/24"\naddressPrefix="10.1.0.0/16"\n\n# Create Network Security Group if \'sharedResources\' is set to \'new\'\nif [ "$sharedResources" == "new" ]; then\n  az network nsg create \\\n    --name "$networkSecurityGroupName" \\\n    --resource-group <ResourceGroupName> \\\n    --location "$location" \\\n    --tags \'Owner=zytest\'\n  # Add security rule for RDP access\n  az network nsg rule create \\\n    --nsg-name "$networkSecurityGroupName" \\\n    --resource-group <ResourceGroupName> \\\n    --name "RDP" \\\n    --protocol "Tcp" \\\n    --priority 300 \\\n    --destination-port-ranges 3389 \\\n    --access "Allow" \\\n    --direction "Inbound" \\\n    --source-address-prefixes "*" \\\n    --destination-address-prefixes "*"\nfi\n\n# Create Virtual Network and Subnet if \'sharedResources\' is set to \'new\'\nif [ "$sharedResources" == "new" ]; then\n  az network vnet create \\\n    --name "$virtualNetworkName" \\\n    --resource-group <ResourceGroupName> \\\n    --location "$location" \\\n    --address-prefix "$addressPrefix" \\\n    --subnet-name "$subnetName" \\\n    --subnet-prefix "$subnetAddressPrefix"\nfi\n\n# Create Public IP Address\naz network public-ip create \\\n  --name "$publicIpAddressName" \\\n  --resource-group <ResourceGroupName> \\\n  --location "$location" \\\n  --allocation-method "Dynamic" \\\n  --dns-name "$dnsLabelPrefix"\n\n# Create Network Interface\nsubnetId=$(az network vnet subnet show --vnet-name "$virtualNetworkName" --name "$subnetName" --resource-group <ResourceGroupName> --query id --output tsv)\nnsgId=$(az network nsg show --name "$networkSecurityGroupName" --resource-group <ResourceGroupName> --query id --output tsv)\npublicIpId=$(az network public-ip show --name "$publicIpAddressName" --resource-group <ResourceGroupName> --query id --output tsv)\n\naz network nic create \\\n  --name "$networkInterfaceName" \\\n  --resource-group <ResourceGroupName> \\\n  --location "$location" \\\n  --subnet "$subnetId" \\\n  --network-security-group "$nsgId" \\\n  --public-ip-address "$publicIpId"\n\n# Create Virtual Machine\nnicId=$(az network nic show --name "$networkInterfaceName" --resource-group <ResourceGroupName> --query id --output tsv)\n\naz vm create \\\n  --name "$vmName" \\\n  --resource-group <ResourceGroupName> \\\n  --location "$location" \\\n  --nics "$nicId" \\\n  --size "$vmSize" \\\n  --image "MicrosoftVisualStudio:visualstudio2019latest:vs-2019-comm-latest-ws2019:latest" \\\n  --admin-username "$adminUsername" \\\n  --admin-password "$adminPassword" \\\n  --os-disk-size-gb 127 \\\n  --os-disk-caching "ReadWrite" \\\n  --os-disk-storage-account-type "$osDiskType" \\\n  --tags \'Owner=zytest\'\n\n# Output the FQDN of the created VM\nfqdn=$(az network public-ip show --name "$publicIpAddressName" --resource-group <ResourceGroupName> --query "dnsSettings.fqdn" --output tsv)\necho "Hostname (FQDN): $fqdn"\n```\n\nPlease replace `<ResourceGroupName>` with the actual name of your Azure resource group where the resources are to be deployed. Also, note that for the `dnsLabelPrefix`, you need to calculate the `uniqueString` equivalent in the CLI, which is not directly available. The example provided is a way to generate a unique string based on the resource group ID, but it may not exactly match the ARM template functionality. Adjust as necessary based on your requirements.


verify_result
