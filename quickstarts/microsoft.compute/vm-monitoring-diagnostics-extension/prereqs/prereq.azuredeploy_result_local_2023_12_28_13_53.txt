arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"diagnosticsStorageAccountName": "[concat(uniquestring(resourceGroup().id), \'stor\')]", "diagnosticsStorageAccountType": "Standard_LRS"}, "resources": [{"name": "[variables(\'diagnosticsStorageAccountName\')]", "type": "Microsoft.Storage/storageAccounts", "location": "[parameters(\'location\')]", "apiVersion": "2020-08-01-preview", "tags": {"displayName": "diagnosticsStorageAccount"}, "sku": {"name": "[variables(\'diagnosticsStorageAccountType\')]"}}], "outputs": {"existingdiagStorName": {"type": "string", "value": "[variables(\'diagnosticsStorageAccountName\')]"}, "existingdiagStorRG": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
Based on the provided ARM template and the absence of specific "TemplateParameters" data, I will assume that the default values for the parameters are to be used. Here is the equivalent Azure CLI script in bash:\n\n```bash\n#!/bin/bash\n\n# Parameters\nlocation="westus"\n\n# Variables (since ARM template functions like uniquestring() can\'t be directly translated to bash, we\'ll use a placeholder value for the storage account name)\nresourceGroupName=$(az group show --query name --output tsv)\ndiagnosticsStorageAccountName=$(echo -n $resourceGroupName | md5sum | cut -d \' \' -f 1)\'stor\'\ndiagnosticsStorageAccountType="Standard_LRS"\n\n# Create a storage account for diagnostics\naz storage account create \\\n    --name $diagnosticsStorageAccountName \\\n    --location $location \\\n    --resource-group $resourceGroupName \\\n    --sku $diagnosticsStorageAccountType \\\n    --tags displayName=diagnosticsStorageAccount\n\n# Outputs (simply echo the values, in a real script you might want to use them further)\necho "existingdiagStorName: $diagnosticsStorageAccountName"\necho "existingdiagStorRG: $resourceGroupName"\n```\n\nPlease note that the `uniquestring()` function from ARM templates is not available in bash, so I\'ve used a simple MD5 hash of the resource group name as a placeholder. In a real-world scenario, you would need to ensure that the storage account name is unique across Azure.


verify_result
