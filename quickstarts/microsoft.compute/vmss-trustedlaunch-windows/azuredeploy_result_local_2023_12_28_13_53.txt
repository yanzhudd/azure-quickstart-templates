arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.16.2.56959", "templateHash": "8458634585676362885"}}, "parameters": {"vmSku": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of VMs in the VM Scale Set."}}, "sku": {"type": "string", "defaultValue": "2022-datacenter-azure-edition", "allowedValues": ["2019-DataCenter-GenSecond", "2016-DataCenter-GenSecond", "2022-datacenter-azure-edition"], "metadata": {"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}}, "vmssName": {"type": "string", "maxLength": 61, "metadata": {"description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."}, "defaultValue": "zytest"}, "instanceCount": {"type": "int", "defaultValue": 2, "maxValue": 100, "minValue": 1, "metadata": {"description": "Number of VM instances (100 or less)."}}, "adminUsername": {"type": "string", "metadata": {"description": "Admin username on all VMs."}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "Admin password on all VMs."}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "publicIpName": {"type": "string", "defaultValue": "myPublicIP", "metadata": {"description": "Name for the Public IP used to access the virtual machine scale set."}}, "publicIPAllocationMethod": {"type": "string", "defaultValue": "Static", "allowedValues": ["Dynamic", "Static"], "metadata": {"description": "Allocation method for the Public IP used to access the virtual machine set."}}, "publicIpSku": {"type": "string", "defaultValue": "Standard", "allowedValues": ["Basic", "Standard"], "metadata": {"description": "SKU for the Public IP used to access the virtual machine scale set."}}, "dnsLabelPrefix": {"type": "string", "defaultValue": "[toLower(format(\'{0}-{1}\', parameters(\'vmssName\'), uniqueString(resourceGroup().id)))]", "metadata": {"description": "Unique DNS Name for the Public IP used to access the virtual machine scale set."}}, "healthExtensionProtocol": {"type": "string", "defaultValue": "TCP", "allowedValues": ["TCP", "HTTP", "HTTPS"]}, "healthExtensionPort": {"type": "int", "defaultValue": 3389}, "healthExtensionRequestPath": {"type": "string", "defaultValue": "/"}, "overprovision": {"type": "bool", "defaultValue": false}, "upgradePolicy": {"type": "string", "defaultValue": "Manual", "allowedValues": ["Manual", "Rolling", "Automatic"]}, "maxBatchInstancePercent": {"type": "int", "defaultValue": 20}, "maxUnhealthyInstancePercent": {"type": "int", "defaultValue": 20}, "maxUnhealthyUpgradedInstancePercent": {"type": "int", "defaultValue": 20}, "pauseTimeBetweenBatches": {"type": "string", "defaultValue": "PT5S"}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}}, "variables": {"namingInfix": "[toLower(substring(format(\'{0}{1}\', parameters(\'vmssName\'), uniqueString(resourceGroup().id)), 0, 9))]", "addressPrefix": "10.0.0.0/16", "subnetPrefix": "10.0.0.0/24", "virtualNetworkName": "[format(\'{0}vnet\', variables(\'namingInfix\'))]", "subnetName": "[format(\'{0}subnet\', variables(\'namingInfix\'))]", "loadBalancerName": "[format(\'{0}lb\', variables(\'namingInfix\'))]", "natPoolName": "[format(\'{0}natpool\', variables(\'namingInfix\'))]", "bePoolName": "[format(\'{0}bepool\', variables(\'namingInfix\'))]", "natStartPort": 50000, "natEndPort": 50119, "natBackendPort": 3389, "nicName": "[format(\'{0}nic\', variables(\'namingInfix\'))]", "ipConfigName": "[format(\'{0}ipconfig\', variables(\'namingInfix\'))]", "imageReference": {"2019-DataCenter-GenSecond": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'sku\')]", "version": "latest"}, "2016-DataCenter-GenSecond": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'sku\')]", "version": "latest"}, "2022-datacenter-azure-edition": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'sku\')]", "version": "latest"}}, "extensionName": "GuestAttestation", "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "maaEndpoint": "[substring(\'emptyString\', 0, 0)]", "securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "rollingUpgradeJson": {"maxBatchInstancePercent": "[parameters(\'maxBatchInstancePercent\')]", "maxUnhealthyInstancePercent": "[parameters(\'maxUnhealthyInstancePercent\')]", "maxUnhealthyUpgradedInstancePercent": "[parameters(\'maxUnhealthyUpgradedInstancePercent\')]", "pauseTimeBetweenBatches": "[parameters(\'pauseTimeBetweenBatches\')]"}}, "resources": [{"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2022-05-01", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetPrefix\')]"}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2022-05-01", "name": "[parameters(\'publicIpName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "[parameters(\'publicIpSku\')]"}, "properties": {"publicIPAllocationMethod": "[parameters(\'publicIPAllocationMethod\')]", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"type": "Microsoft.Network/loadBalancers", "apiVersion": "2022-05-01", "name": "[variables(\'loadBalancerName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "[parameters(\'publicIpSku\')]", "tier": "Regional"}, "properties": {"frontendIPConfigurations": [{"name": "LoadBalancerFrontEnd", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'bePoolName\')]"}], "inboundNatPools": [{"name": "[variables(\'natPoolName\')]", "properties": {"frontendIPConfiguration": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\', variables(\'loadBalancerName\'), \'loadBalancerFrontEnd\')]"}, "protocol": "Tcp", "frontendPortRangeStart": "[variables(\'natStartPort\')]", "frontendPortRangeEnd": "[variables(\'natEndPort\')]", "backendPort": "[variables(\'natBackendPort\')]"}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\'))]"]}, {"type": "Microsoft.Compute/virtualMachineScaleSets", "apiVersion": "2022-03-01", "name": "[parameters(\'vmssName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "[parameters(\'vmSku\')]", "tier": "Standard", "capacity": "[parameters(\'instanceCount\')]"}, "properties": {"virtualMachineProfile": {"storageProfile": {"osDisk": {"createOption": "FromImage", "caching": "ReadWrite"}, "imageReference": "[variables(\'imageReference\')[parameters(\'sku\')]]"}, "osProfile": {"computerNamePrefix": "[variables(\'namingInfix\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]", "networkProfile": {"networkInterfaceConfigurations": [{"name": "[variables(\'nicName\')]", "properties": {"primary": true, "ipConfigurations": [{"name": "[variables(\'ipConfigName\')]", "properties": {"subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'loadBalancerName\'), variables(\'bePoolName\'))]"}], "loadBalancerInboundNatPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatPools\', variables(\'loadBalancerName\'), variables(\'natPoolName\'))]"}]}}]}}]}, "extensionProfile": {"extensions": [{"name": "HealthExtension", "properties": {"publisher": "Microsoft.ManagedServices", "type": "ApplicationHealthWindows", "typeHandlerVersion": "1.0", "autoUpgradeMinorVersion": false, "settings": {"protocol": "[parameters(\'healthExtensionProtocol\')]", "port": "[parameters(\'healthExtensionPort\')]", "requestPath": "[if(equals(parameters(\'healthExtensionProtocol\'), \'TCP\'), null(), parameters(\'healthExtensionRequestPath\'))]"}}}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true}}}, "orchestrationMode": "Uniform", "overprovision": "[parameters(\'overprovision\')]", "upgradePolicy": {"mode": "[parameters(\'upgradePolicy\')]", "rollingUpgradePolicy": "[if(equals(parameters(\'upgradePolicy\'), \'Rolling\'), variables(\'rollingUpgradeJson\'), null())]", "automaticOSUpgradePolicy": {"enableAutomaticOSUpgrade": true}}}, "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers\', variables(\'loadBalancerName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"condition": "[and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true())))]", "type": "Microsoft.Compute/virtualMachineScaleSets/extensions", "apiVersion": "2022-03-01", "name": "[format(\'{0}/{1}\', parameters(\'vmssName\'), variables(\'extensionName\'))]", "location": "[parameters(\'location\')]", "properties": {"publisher": "[variables(\'extensionPublisher\')]", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "[variables(\'maaEndpoint\')]", "maaTenantName": "[variables(\'maaTenantName\')]"}}}}, "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachineScaleSets\', parameters(\'vmssName\'))]"]}]}


cli_script
Based on the provided ARM template and parameters, below is the equivalent Azure CLI script in bash:\n\n```bash\n#!/bin/bash\n\n# Template Parameters\nvmSku="Standard_D2s_v3"\nsku="2022-datacenter-azure-edition"\nvmssName="zytest"\ninstanceCount=2\nadminUsername="zytest"\nadminPassword="zytest"\nlocation="westus"\npublicIpName="myPublicIP"\npublicIPAllocationMethod="Static"\npublicIpSku="Standard"\ndnsLabelPrefix=$(echo "$vmssName-$(uuidgen | tr \'[:upper:]\' \'[:lower:]\')" | cut -c 1-61)\nhealthExtensionProtocol="TCP"\nhealthExtensionPort=3389\nhealthExtensionRequestPath="/"\noverprovision=false\nupgradePolicy="Manual"\nmaxBatchInstancePercent=20\nmaxUnhealthyInstancePercent=20\nmaxUnhealthyUpgradedInstancePercent=20\npauseTimeBetweenBatches="PT5S"\nsecurityType="TrustedLaunch"\n\n# Derived Variables\nnamingInfix=$(echo "$vmssName-$(uuidgen | tr \'[:upper:]\' \'[:lower:]\')" | cut -c 1-9)\naddressPrefix="10.0.0.0/16"\nsubnetPrefix="10.0.0.0/24"\nvirtualNetworkName="${namingInfix}vnet"\nsubnetName="${namingInfix}subnet"\nloadBalancerName="${namingInfix}lb"\nnatPoolName="${namingInfix}natpool"\nbePoolName="${namingInfix}bepool"\nnatStartPort=50000\nnatEndPort=50119\nnatBackendPort=3389\nnicName="${namingInfix}nic"\nipConfigName="${namingInfix}ipconfig"\n\n# Create Virtual Network\naz network vnet create \\\n    --name "$virtualNetworkName" \\\n    --location "$location" \\\n    --address-prefix "$addressPrefix" \\\n    --subnet-name "$subnetName" \\\n    --subnet-prefix "$subnetPrefix"\n\n# Create Public IP Address\naz network public-ip create \\\n    --name "$publicIpName" \\\n    --location "$location" \\\n    --allocation-method "$publicIPAllocationMethod" \\\n    --sku "$publicIpSku" \\\n    --dns-name "$dnsLabelPrefix"\n\n# Create Load Balancer\npublicIpId=$(az network public-ip show --name "$publicIpName" --query "id" --output tsv)\naz network lb create \\\n    --name "$loadBalancerName" \\\n    --location "$location" \\\n    --public-ip-address "$publicIpId" \\\n    --frontend-ip-name "LoadBalancerFrontEnd" \\\n    --backend-pool-name "$bePoolName" \\\n    --sku "$publicIpSku"\n\n# Create Inbound NAT Pool\nfrontendIpConfigId=$(az network lb frontend-ip show --lb-name "$loadBalancerName" --name "LoadBalancerFrontEnd" --query "id" --output tsv)\naz network lb inbound-nat-pool create \\\n    --lb-name "$loadBalancerName" \\\n    --name "$natPoolName" \\\n    --protocol Tcp \\\n    --frontend-port-range-start "$natStartPort" \\\n    --frontend-port-range-end "$natEndPort" \\\n    --backend-port "$natBackendPort" \\\n    --frontend-ip-config "$frontendIpConfigId"\n\n# Create Virtual Machine Scale Set\nsubnetId=$(az network vnet subnet show --vnet-name "$virtualNetworkName" --name "$subnetName" --query "id" --output tsv)\nbackendAddressPoolId=$(az network lb address-pool show --lb-name "$loadBalancerName" --name "$bePoolName" --query "id" --output tsv)\ninboundNatPoolId=$(az network lb inbound-nat-pool show --lb-name "$loadBalancerName" --name "$natPoolName" --query "id" --output tsv)\n\naz vmss create \\\n    --name "$vmssName" \\\n    --location "$location" \\\n    --vm-sku "$vmSku" \\\n    --instance-count "$instanceCount" \\\n    --admin-username "$adminUsername" \\\n    --admin-password "$adminPassword" \\\n    --image "MicrosoftWindowsServer:WindowsServer:$sku:latest" \\\n    --vnet-name "$virtualNetworkName" \\\n    --subnet "$subnetId" \\\n    --backend-pool-name "$backendAddressPoolId" \\\n    --nat-pool "$inboundNatPoolId" \\\n    --overprovision "$overprovision" \\\n    --upgrade-policy-mode "$upgradePolicy" \\\n    --health-probe-protocol "$healthExtensionProtocol" \\\n    --health-probe-port "$healthExtensionPort" \\\n    --health-probe-request-path "$healthExtensionRequestPath" \\\n    --assign-identity\n\n# Add Trusted Launch Extension if securityType is TrustedLaunch\nif [ "$securityType" == "TrustedLaunch" ]; then\n    az vmss extension set \\\n        --vmss-name "$vmssName" \\\n        --name "GuestAttestation" \\\n        --publisher "Microsoft.Azure.Security.WindowsAttestation" \\\n        --version "1.0" \\\n        --settings "{\\"AttestationConfig\\": {\\"MaaSettings\\": {\\"maaEndpoint\\": \\"\\", \\"maaTenantName\\": \\"GuestAttestation\\"}}}"\nfi\n```\n\nThis script sets up the necessary resources like a virtual network, public IP address, load balancer, and a virtual machine scale set, as described in the ARM template. It also conditionally adds a Trusted Launch extension to the VMSS if the security type is set to "TrustedLaunch". Please make sure to replace `uuidgen` with an actual unique string function or command if you\'re not running this script on a system that supports `uuidgen`.


verify_result
