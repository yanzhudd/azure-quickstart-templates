arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.21.1.54444", "templateHash": "17215654851852396133"}}, "parameters": {"dnsLabelPrefix": {"type": "string", "metadata": {"description": "Unique public DNS prefix for the deployment. The fqdn will look something like \'<dnsname>.westus.cloudapp.azure.com\'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to \'^[a-z][a-z0-9-]{1,61}[a-z0-9]$\'."}, "defaultValue": "zytest"}, "vmName": {"type": "string", "defaultValue": "vm", "metadata": {"description": "The name of the VM"}}, "adminUsername": {"type": "string", "defaultValue": "azureUser", "metadata": {"description": "The name of the administrator of the new VM. Exclusion list: \'admin\',\'administrator\'"}}, "adminPassword": {"type": "securestring", "metadata": {"description": "The password for the administrator account of the new VM"}, "defaultValue": "zytest"}, "rdpPort": {"type": "int", "defaultValue": 50001, "metadata": {"description": "Public port number for RDP"}}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of the virtual machine"}}, "OSVersion": {"type": "string", "defaultValue": "2022-datacenter-azure-edition", "allowedValues": ["2016-datacenter-gensecond", "2016-datacenter-server-core-g2", "2016-datacenter-server-core-smalldisk-g2", "2016-datacenter-smalldisk-g2", "2016-datacenter-with-containers-g2", "2016-datacenter-zhcn-g2", "2019-datacenter-core-g2", "2019-datacenter-core-smalldisk-g2", "2019-datacenter-core-with-containers-g2", "2019-datacenter-core-with-containers-smalldisk-g2", "2019-datacenter-gensecond", "2019-datacenter-smalldisk-g2", "2019-datacenter-with-containers-g2", "2019-datacenter-with-containers-smalldisk-g2", "2019-datacenter-zhcn-g2", "2022-datacenter-azure-edition", "2022-datacenter-azure-edition-core", "2022-datacenter-azure-edition-core-smalldisk", "2022-datacenter-azure-edition-smalldisk", "2022-datacenter-core-g2", "2022-datacenter-core-smalldisk-g2", "2022-datacenter-g2", "2022-datacenter-smalldisk-g2"], "metadata": {"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}}}, "variables": {"extensionName": "GuestAttestation", "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "maaEndpoint": "[substring(\'emptyString\', 0, 0)]", "securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "storageAccountName": "[format(\'{0}sardpvm\', uniqueString(resourceGroup().id))]", "vNetName": "rdpVNET", "subnetName": "Subnet", "vnetAddressRange": "10.0.0.0/16", "subnetAddressRange": "10.0.0.0/24", "imagePublisher": "MicrosoftWindowsServer", "imageOffer": "WindowsServer", "imageSku": "[parameters(\'OSVersion\')]", "networkSecurityGroupName": "Subnet-nsg"}, "resources": [{"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2023-05-01", "name": "publicIp", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"type": "Microsoft.Storage/storageAccounts", "apiVersion": "2023-01-01", "name": "[variables(\'storageAccountName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "StorageV2"}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2023-05-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2023-05-01", "name": "[variables(\'vNetName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'vnetAddressRange\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetAddressRange\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"]}, {"type": "Microsoft.Network/loadBalancers", "apiVersion": "2023-05-01", "name": "loadBalancer", "location": "[parameters(\'location\')]", "properties": {"frontendIPConfigurations": [{"name": "LBFE", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIp\')]"}}}], "backendAddressPools": [{"name": "LBBAP"}], "inboundNatRules": [{"name": "rdp", "properties": {"frontendIPConfiguration": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\', \'loadBalancer\', \'LBFE\')]"}, "protocol": "Tcp", "frontendPort": "[parameters(\'rdpPort\')]", "backendPort": 3389, "enableFloatingIP": false}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIp\')]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2023-05-01", "name": "[format(\'{0}-nic\', parameters(\'vmName\'))]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig", "properties": {"privateIPAllocationMethod": "Dynamic", "subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'vNetName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', \'loadBalancer\', \'LBBAP\')]"}], "loadBalancerInboundNatRules": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\', \'loadBalancer\', \'rdp\')]"}]}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers\', \'loadBalancer\')]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'vNetName\'))]"]}, {"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2023-07-01", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "[variables(\'imagePublisher\')]", "offer": "[variables(\'imageOffer\')]", "sku": "[variables(\'imageSku\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage"}}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]", "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', format(\'{0}-nic\', parameters(\'vmName\')))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'storageAccountName\')), \'2023-01-01\').primaryEndpoints.blob]"}}}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', format(\'{0}-nic\', parameters(\'vmName\')))]", "[resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'storageAccountName\'))]"]}, {"condition": "[and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true())))]", "type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2023-07-01", "name": "[format(\'{0}/{1}\', parameters(\'vmName\'), \'GuestAttestation\')]", "location": "[parameters(\'location\')]", "properties": {"publisher": "[variables(\'extensionPublisher\')]", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "[variables(\'maaEndpoint\')]", "maaTenantName": "[variables(\'maaTenantName\')]"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}}}}, "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"]}]}


cli_script
Based on the provided JSON data, I will create a bash script that translates the ARM template into Azure CLI commands. First, I will extract the parameters and convert them into variables.\n\n```bash\n#!/bin/bash\n\n# Template Parameters\ndnsLabelPrefix="zytest"\nvmName="vm"\nadminUsername="azureUser"\nadminPassword="zytest"\nrdpPort=50001\nsecurityType="TrustedLaunch"\nlocation="westus"\nvmSize="Standard_D2s_v3"\nOSVersion="2022-datacenter-azure-edition"\n\n# Additional variables from the ARM template (not provided in parameters)\nextensionName="GuestAttestation"\nextensionPublisher="Microsoft.Azure.Security.WindowsAttestation"\nextensionVersion="1.0"\nmaaTenantName="GuestAttestation"\nmaaEndpoint=""\nvNetName="rdpVNET"\nsubnetName="Subnet"\nvnetAddressRange="10.0.0.0/16"\nsubnetAddressRange="10.0.0.0/24"\nimagePublisher="MicrosoftWindowsServer"\nimageOffer="WindowsServer"\nimageSku=$OSVersion\nnetworkSecurityGroupName="Subnet-nsg"\n\n# Create a Public IP Address\naz network public-ip create \\\n    --name publicIp \\\n    --location $location \\\n    --allocation-method Dynamic \\\n    --dns-name $dnsLabelPrefix\n\n# Create a Storage Account\nstorageAccountName=$(az storage account create \\\n    --name $(echo -n $location$RANDOM | md5sum | head -c 24) \\\n    --location $location \\\n    --sku Standard_LRS \\\n    --kind StorageV2 \\\n    --query "name" -o tsv)\n\n# Create a Network Security Group and a rule to allow RDP\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --location $location\n\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --name default-allow-3389 \\\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --protocol Tcp \\\n    --destination-port-range 3389 \\\n    --source-address-prefix "*" \\\n    --destination-address-prefix "*" \\\n    --source-port-range "*"\n\n# Create a Virtual Network with a Subnet\naz network vnet create \\\n    --name $vNetName \\\n    --location $location \\\n    --address-prefix $vnetAddressRange \\\n    --subnet-name $subnetName \\\n    --subnet-address-prefix $subnetAddressRange \\\n    --network-security-group $networkSecurityGroupName\n\n# Create a Load Balancer with a Frontend IP Configuration and NAT Rule for RDP\naz network lb create \\\n    --name loadBalancer \\\n    --location $location \\\n    --frontend-ip-name LBFE \\\n    --public-ip-address publicIp \\\n    --backend-pool-name LBBAP\n\naz network lb inbound-nat-rule create \\\n    --resource-group $resourceGroupName \\\n    --lb-name loadBalancer \\\n    --name rdp \\\n    --protocol Tcp \\\n    --frontend-port $rdpPort \\\n    --backend-port 3389 \\\n    --frontend-ip-name LBFE\n\n# Create a Network Interface\nnicId=$(az network nic create \\\n    --name ${vmName}-nic \\\n    --location $location \\\n    --vnet-name $vNetName \\\n    --subnet $subnetName \\\n    --lb-name loadBalancer \\\n    --lb-address-pools LBBAP \\\n    --lb-inbound-nat-rules rdp \\\n    --query "id" -o tsv)\n\n# Create a Virtual Machine\naz vm create \\\n    --name $vmName \\\n    --location $location \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --image $imagePublisher:$imageOffer:$imageSku:latest \\\n    --nics $nicId \\\n    --boot-diagnostics-storage $storageAccountName\n\n# Conditional logic for TrustedLaunch and VM Extension\nif [ "$securityType" == "TrustedLaunch" ]; then\n    secureBootEnabled=true\n    vTpmEnabled=true\n\n    # Set security profile for VM\n    az vm update \\\n        --name $vmName \\\n        --set securityProfile.uefiSettings.secureBootEnabled=$secureBootEnabled \\\n        --set securityProfile.uefiSettings.vTpmEnabled=$vTpmEnabled \\\n        --set securityProfile.securityType=$securityType\n\n    # Add VM Extension for Guest Attestation\n    az vm extension set \\\n        --vm-name $vmName \\\n        --name $extensionName \\\n        --publisher $extensionPublisher \\\n        --version $extensionVersion \\\n        --settings \'{"AttestationConfig":{"MaaSettings":{"maaEndpoint":"\'$maaEndpoint\'","maaTenantName":"\'$maaTenantName\'"},"AscSettings":{"ascReportingEndpoint":"","ascReportingFrequency":""}}}\'\nfi\n\n# Note: The actual script may require additional error handling and verification steps.\n```\n\nThis script includes the translation of the ARM template into Azure CLI commands, setting up the necessary resources such as public IP, storage account, network security group, virtual network, load balancer, network interface, and virtual machine. It also includes conditional logic for TrustedLaunch and the addition of a VM extension if required.


verify_result
