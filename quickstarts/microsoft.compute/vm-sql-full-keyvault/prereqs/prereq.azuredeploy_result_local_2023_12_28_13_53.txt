arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vaultName": {"type": "string", "defaultValue": "[concat(\'keyvault-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "Specifies the name of the KeyVault, this value must be globally unique."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Specifies the Azure location where the key vault should be created."}}, "accessPolicies": {"type": "array", "metadata": {"description": "Access policies of the Key Vault."}, "defaultValue": "zytest"}, "tenantId": {"type": "string", "metadata": {"description": "Tenant ID for the Key Vault."}, "defaultValue": "zytest"}}, "resources": [{"name": "vault-prereq", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"accessPolicies": {"value": "[parameters(\'accessPolicies\')]"}, "vaultName": {"value": "[parameters(\'vaultName\')]"}, "location": {"value": "[parameters(\'location\')]"}, "enabledForDeployment": {"value": true}, "enabledForDiskEncryption": {"value": true}, "enabledForTemplateDeployment": {"value": true}, "tenantId": {"value": "[parameters(\'tenantId\')]"}}}}], "outputs": {"outKeyVaultName": {"type": "string", "value": "[parameters(\'vaultName\')]"}, "outKeyVaultResourceGroupName": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
Based on the provided JSON data, I will translate the ARM template into an equivalent Azure CLI script. Here\'s the bash script:\n\n```bash\n#!/bin/bash\n\n# Assign the template parameter values to variables\nvaultName=$(az group deployment show --name vault-prereq --resource-group myResourceGroup --query "properties.parameters.vaultName.value" -o tsv)\nlocation=$(az group deployment show --name vault-prereq --resource-group myResourceGroup --query "properties.parameters.location.value" -o tsv)\ntenantId=$(az group deployment show --name vault-prereq --resource-group myResourceGroup --query "properties.parameters.tenantId.value" -o tsv)\n\n# Since accessPolicies is an array, we need to handle it differently\n# Note that the defaultValue for accessPolicies and tenantId is "zytest", which is likely a placeholder\n# and should be replaced with actual values when available.\n\n# Create the Key Vault with the specified parameters\n# Note: The actual access policies are not specified in the given JSON,\n# so we cannot create them in the CLI script without more information.\n\naz keyvault create \\\n  --name "$vaultName" \\\n  --location "$location" \\\n  --resource-group myResourceGroup \\\n  --enabled-for-deployment true \\\n  --enabled-for-disk-encryption true \\\n  --enabled-for-template-deployment true \\\n  --tenant-id "$tenantId"\n\n# Output the created Key Vault name and Resource Group name\necho "Key Vault Name: $vaultName"\necho "Key Vault Resource Group: myResourceGroup"\n```\n\nPlease note the following:\n1. The script assumes that the deployment named "vault-prereq" already exists and retrieves parameter values from it.\n2. The `accessPolicies` parameter is an array, but the default value is "zytest" which is not a valid array. In a real scenario, this should be replaced with actual access policy objects.\n3. The `tenantId` is also set to "zytest" by default, which should be replaced with the actual tenant ID.\n4. The script uses `az keyvault create` to create the Key Vault with the specified parameters, but it does not set access policies because the necessary details are not provided in the JSON data.\n5. The `resourceGroup` function in ARM templates is translated to using a static resource group name "myResourceGroup" in the CLI script. You should replace this with the actual resource group name you intend to use.\n6. The `outputs` section in the ARM template is translated to simple `echo` statements in the bash script. If you need to use these values in other scripts, you might want to assign them to variables or output them to a file.


verify_result
