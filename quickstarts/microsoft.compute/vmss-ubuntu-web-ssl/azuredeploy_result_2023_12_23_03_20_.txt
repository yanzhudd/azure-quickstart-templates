arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmSku": {"type": "string", "defaultValue": "Standard_A1", "metadata": {"description": "Size of VMs in the VM Scale Set."}}, "ubuntuOSVersion": {"type": "string", "defaultValue": "14.04.4-LTS", "allowedValues": ["14.04.4-LTS"], "metadata": {"description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values are: 15.10, 14.04.4-LTS."}}, "vmssName": {"type": "string", "metadata": {"description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."}, "maxLength": 61, "defaultValue": "zytest"}, "capacity": {"type": "int", "metadata": {"description": "Number of VM instances (100 or less)."}, "maxValue": 100, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "Admin username on all VMs."}, "defaultValue": "zytest"}, "vaultName": {"type": "string", "metadata": {"description": "The Azure Key vault where SSL certificates are stored"}, "defaultValue": "zytest"}, "vaultResourceGroup": {"type": "string", "metadata": {"description": "Resource Group of the key vault"}, "defaultValue": "zytest"}, "httpssecretUrlWithVersion": {"type": "string", "metadata": {"description": "full Key Vault Id to the secret that stores the SSL cert"}, "defaultValue": "zytest"}, "httpssecretCaUrlWithVersion": {"type": "string", "metadata": {"description": "full Key Vault Id to the secret that stores the CA cert"}, "defaultValue": "zytest"}, "scriptFileName": {"type": "string", "metadata": {"description": "the file name of the script configuring the VMs in the scale set"}, "defaultValue": "zytest"}, "certThumbPrint": {"type": "string", "metadata": {"description": "fingerprint of the SSL cert"}, "defaultValue": "zytest"}, "caCertThumbPrint": {"type": "string", "metadata": {"description": "fingerprint of the CA cert"}, "defaultValue": "zytest"}, "_artifactsLocation": {"type": "string", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}, "defaultValue": "https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/quickstarts/microsoft.compute/vmss-ubuntu-web-ssl/configuressl.sh"}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}}, "variables": {"namingInfix": "[toLower(substring(concat(parameters(\'vmssName\'), uniqueString(resourceGroup().id)), 0, 9))]", "addressPrefix": "10.0.0.0/16", "subnetPrefix": "10.0.0.0/24", "virtualNetworkName": "[concat(variables(\'namingInfix\'), \'vnet\')]", "subnetName": "[concat(variables(\'namingInfix\'), \'subnet\')]", "lbName": "[concat(variables(\'namingInfix\'), \'lb\')]", "bepoolName": "[concat(variables(\'lbName\'), \'bepool\')]", "fepoolName": "[concat(variables(\'lbName\'), \'fepool\')]", "lbID": "[resourceId(\'Microsoft.Network/loadBalancers\',variables(\'lbName\'))]", "bepoolID": "[concat(variables(\'lbID\'),\'/backendAddressPools/\', variables(\'bepoolName\'))]", "feIpConfigName": "[concat(variables(\'fepoolName\'), \'IpConfig\')]", "feIpConfigId": "[concat(variables(\'lbID\'),\'/frontendIPConfigurations/\', variables(\'feIpConfigName\'))]", "pipName": "[concat(variables(\'namingInfix\'), \'pip\')]", "nicName": "[concat(variables(\'namingInfix\'), \'nic\')]", "natPoolName": "[concat(variables(\'lbName\'), \'natpool\')]", "ipConfigName": "[concat(variables(\'namingInfix\'), \'ipconfig\')]", "httpProbeName": "httpProbe", "httpsProbeName": "httpsProbe", "osType": {"publisher": "Canonical", "offer": "UbuntuServer", "sku": "[parameters(\'ubuntuOSVersion\')]", "version": "latest"}, "imageReference": "[variables(\'osType\')]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetPrefix\')]"}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'pipName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[variables(\'namingInfix\')]"}}}, {"type": "Microsoft.Network/loadBalancers", "name": "[variables(\'lbName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "dependsOn": ["[concat(\'Microsoft.Network/publicIPAddresses/\', variables(\'pipName\'))]"], "tags": {"displayName": "Load Balancer"}, "properties": {"frontendIPConfigurations": [{"name": "[variables(\'feIpConfigName\')]", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'pipName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'bepoolName\')]"}], "inboundNatPools": [{"name": "[variables(\'natPoolName\')]", "properties": {"frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "protocol": "Tcp", "frontendPortRangeStart": 10022, "frontendPortRangeEnd": 10050, "backendPort": 22}}], "loadBalancingRules": [{"name": "HTTPRule", "properties": {"loadDistribution": "Default", "frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "backendAddressPool": {"id": "[variables(\'bepoolID\')]"}, "protocol": "Tcp", "frontendPort": 80, "backendPort": 80, "enableFloatingIP": false, "idleTimeoutInMinutes": 5, "probe": {"id": "[concat(variables(\'lbId\'), \'/probes/\', variables(\'httpProbeName\'))]"}}}, {"name": "HTTPSRule", "properties": {"loadDistribution": "Default", "frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "backendAddressPool": {"id": "[variables(\'bepoolId\')]"}, "protocol": "Tcp", "frontendPort": 443, "backendPort": 443, "enableFloatingIP": false, "idleTimeoutInMinutes": 5, "probe": {"id": "[concat(resourceId(\'Microsoft.Network/loadBalancers\', variables(\'lbName\')), \'/probes/\', variables(\'httpsProbeName\'))]"}}}], "probes": [{"name": "[variables(\'httpProbeName\')]", "properties": {"protocol": "Tcp", "port": 80, "intervalInSeconds": 5, "numberOfProbes": 2}}, {"name": "[variables(\'httpsProbeName\')]", "properties": {"protocol": "Tcp", "port": 443, "intervalInSeconds": 5, "numberOfProbes": 2}}]}}, {"type": "Microsoft.Compute/virtualMachineScaleSets", "name": "[variables(\'namingInfix\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-04-30-preview", "dependsOn": ["[concat(\'Microsoft.Network/loadBalancers/\', variables(\'lbName\'))]", "[concat(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "sku": {"name": "[parameters(\'vmSku\')]", "tier": "Standard", "capacity": "[parameters(\'capacity\')]"}, "properties": {"overprovision": "true", "upgradePolicy": {"mode": "Manual"}, "virtualMachineProfile": {"storageProfile": {"osDisk": {"caching": "ReadWrite", "createOption": "FromImage"}, "imageReference": "[variables(\'imageReference\')]"}, "osProfile": {"computerNamePrefix": "[variables(\'namingInfix\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "secrets": [{"sourceVault": {"id": "[resourceId(parameters(\'vaultResourceGroup\'), \'Microsoft.KeyVault/vaults\', parameters(\'vaultName\'))]"}, "vaultCertificates": [{"certificateUrl": "[parameters(\'httpssecretUrlWithVersion\')]"}, {"certificateUrl": "[parameters(\'httpssecretCaUrlWithVersion\')]"}]}], "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "networkProfile": {"networkInterfaceConfigurations": [{"name": "[variables(\'nicName\')]", "properties": {"primary": true, "ipConfigurations": [{"name": "[variables(\'ipConfigName\')]", "properties": {"subnet": {"id": "[resourceId( \'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'lbName\'), variables(\'bePoolName\'))]"}], "loadBalancerInboundNatPools": [{"id": "[resourceId( \'Microsoft.Network/loadBalancers/inboundNatPools\', variables(\'lbName\'), variables(\'natPoolName\'))]"}]}}]}}]}, "extensionProfile": {"extensions": [{"name": "lapextension", "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": false, "settings": {"fileUris": ["[concat(parameters(\'_artifactsLocation\'), \'/\', parameters(\'scriptFileName\'), parameters(\'_artifactsLocationSasToken\'))]"]}, "protectedSettings": {"commandToExecute": "[concat(\'bash \', parameters(\'scriptFileName\'), \' \', parameters(\'certThumbPrint\'), \' \', parameters(\'caCertThumbPrint\'))]"}}}]}}}}], "outputs": {"fqdn": {"type": "string", "value": "[reference( variables(\'pipName\') ).dnsSettings.fqdn]"}}}


cli_script
Here is the equivalent CLI script:\n\n```bash\n#!/bin/bash\n\n# Define the parameters\nvmSku="Standard_A1"\nubuntuOSVersion="14.04.4-LTS"\nvmssName="zytest"\ncapacity="zytest"\nadminUsername="zytest"\nvaultName="zytest"\nvaultResourceGroup="zytest"\nhttpssecretUrlWithVersion="zytest"\nhttpssecretCaUrlWithVersion="zytest"\nscriptFileName="zytest"\ncertThumbPrint="zytest"\ncaCertThumbPrint="zytest"\n_artifactsLocation="https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/quickstarts/microsoft.compute/vmss-ubuntu-web-ssl/configuressl.sh"\n_artifactsLocationSasToken=""\nlocation="westus"\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\n\n# Create the virtual network\naz network vnet create --name $vmssName --resource-group $vaultResourceGroup --location $location --address-prefix 10.0.0.0/16 --subnet-name $vmssName --subnet-prefix 10.0.0.0/24\n\n# Create the public IP address\naz network public-ip create --name $vmssName --resource-group $vaultResourceGroup --location $location --allocation-method Dynamic --dns-name $vmssName\n\n# Create the load balancer\naz network lb create --name $vmssName --resource-group $vaultResourceGroup --location $location --frontend-ip-name $vmssName --backend-pool-name $vmssName --public-ip-address $vmssName\n\n# Create the virtual machine scale set\naz vmss create --name $vmssName --resource-group $vaultResourceGroup --location $location --vm-sku $vmSku --instance-count $capacity --admin-username $adminUsername --admin-password $adminPasswordOrKey --image Canonical:UbuntuServer:$ubuntuOSVersion:latest --vnet-name $vmssName --subnet $vmssName --public-ip-address $vmssName --load-balancer $vmssName --upgrade-policy-mode Manual --overprovision true\n\n# Add the extension to the virtual machine scale set\naz vmss extension set --publisher Microsoft.Azure.Extensions --name CustomScript --version 2.0 --resource-group $vaultResourceGroup --vmss-name $vmssName --settings \'{"fileUris": ["\'$_artifactsLocation\'/\'$scriptFileName\'$_artifactsLocationSasToken"]}\' --protected-settings \'{"commandToExecute": "bash \'$scriptFileName\' \'$certThumbPrint\' \'$caCertThumbPrint\'"}\'\n```\n\nPlease replace the resource group name in the script with your actual resource group name.


verify_result
