arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.16.2.56959", "templateHash": "14427937023370378081"}}, "parameters": {"adminUsername": {"type": "string", "metadata": {"description": "Username for the Virtual Machine."}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "minLength": 12, "metadata": {"description": "Password for the Virtual Machine."}, "defaultValue": "zytest"}, "dnsLabelPrefix": {"type": "string", "defaultValue": "[toLower(format(\'{0}-{1}\', parameters(\'vmName\'), uniqueString(resourceGroup().id, parameters(\'vmName\'))))]", "metadata": {"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."}}, "publicIpName": {"type": "string", "defaultValue": "myPublicIP", "metadata": {"description": "Name for the Public IP used to access the Virtual Machine."}}, "publicIPAllocationMethod": {"type": "string", "defaultValue": "Dynamic", "allowedValues": ["Dynamic", "Static"], "metadata": {"description": "Allocation method for the Public IP used to access the Virtual Machine."}}, "publicIpSku": {"type": "string", "defaultValue": "Basic", "allowedValues": ["Basic", "Standard"], "metadata": {"description": "SKU for the Public IP used to access the Virtual Machine."}}, "OSVersion": {"type": "string", "defaultValue": "2022-datacenter-azure-edition", "allowedValues": ["2016-datacenter-gensecond", "2016-datacenter-server-core-g2", "2016-datacenter-server-core-smalldisk-g2", "2016-datacenter-smalldisk-g2", "2016-datacenter-with-containers-g2", "2016-datacenter-zhcn-g2", "2019-datacenter-core-g2", "2019-datacenter-core-smalldisk-g2", "2019-datacenter-core-with-containers-g2", "2019-datacenter-core-with-containers-smalldisk-g2", "2019-datacenter-gensecond", "2019-datacenter-smalldisk-g2", "2019-datacenter-with-containers-g2", "2019-datacenter-with-containers-smalldisk-g2", "2019-datacenter-zhcn-g2", "2022-datacenter-azure-edition", "2022-datacenter-azure-edition-core", "2022-datacenter-azure-edition-core-smalldisk", "2022-datacenter-azure-edition-smalldisk", "2022-datacenter-core-g2", "2022-datacenter-core-smalldisk-g2", "2022-datacenter-g2", "2022-datacenter-smalldisk-g2"], "metadata": {"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v5", "metadata": {"description": "Size of the virtual machine."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "vmName": {"type": "string", "defaultValue": "simple-vm", "metadata": {"description": "Name of the virtual machine."}}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}}, "variables": {"storageAccountName": "[format(\'bootdiags{0}\', uniqueString(resourceGroup().id))]", "nicName": "myVMNic", "addressPrefix": "10.0.0.0/16", "subnetName": "Subnet", "subnetPrefix": "10.0.0.0/24", "virtualNetworkName": "MyVNET", "networkSecurityGroupName": "default-NSG", "securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "extensionName": "GuestAttestation", "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "maaEndpoint": "[substring(\'emptyString\', 0, 0)]"}, "resources": [{"type": "Microsoft.Storage/storageAccounts", "apiVersion": "2022-05-01", "name": "[variables(\'storageAccountName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "Storage"}, {"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2022-05-01", "name": "[parameters(\'publicIpName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "[parameters(\'publicIpSku\')]"}, "properties": {"publicIPAllocationMethod": "[parameters(\'publicIPAllocationMethod\')]", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2022-05-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourcePortRange": "*", "sourceAddressPrefix": "*", "destinationAddressPrefix": "*"}}]}}, {"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2022-05-01", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetPrefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2022-05-01", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\'))]"}, "subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2022-03-01", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'OSVersion\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage", "managedDisk": {"storageAccountType": "StandardSSD_LRS"}}, "dataDisks": [{"diskSizeGB": 1023, "lun": 0, "createOption": "Empty"}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'storageAccountName\')), \'2022-05-01\').primaryEndpoints.blob]"}}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]"}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]", "[resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'storageAccountName\'))]"]}, {"condition": "[and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true())))]", "type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2022-03-01", "name": "[format(\'{0}/{1}\', parameters(\'vmName\'), variables(\'extensionName\'))]", "location": "[parameters(\'location\')]", "properties": {"publisher": "[variables(\'extensionPublisher\')]", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "[variables(\'maaEndpoint\')]", "maaTenantName": "[variables(\'maaTenantName\')]"}}}}, "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"]}], "outputs": {"hostname": {"type": "string", "value": "[reference(resourceId(\'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\')), \'2022-05-01\').dnsSettings.fqdn]"}}}


cli_script
Below is the translated bash script from the given ARM template and template parameters. Note that the ARM template\'s `parameters` section has default values, and there are no explicit `TemplateParameters` provided. Hence, the default values are used in the script.\n\n```bash\n#!/bin/bash\n\n# Assign variables from parameters with default values\nadminUsername="zytest"\nadminPassword="zytest"\n# Note: dnsLabelPrefix is a function of other parameters and unique strings, which cannot be directly translated to a static value.\n# It will be handled dynamically in the CLI commands.\npublicIpName="myPublicIP"\npublicIPAllocationMethod="Dynamic"\npublicIpSku="Basic"\nOSVersion="2022-datacenter-azure-edition"\nvmSize="Standard_D2s_v5"\nlocation="westus"\nvmName="simple-vm"\nsecurityType="TrustedLaunch"\n\n# Note: The storage account name is based on a unique string function, which cannot be directly translated.\n# A placeholder is used here and should be replaced with an actual unique name.\nstorageAccountName="bootdiagsUNIQUE_STRING"\n\n# Define other variables\nnicName="myVMNic"\naddressPrefix="10.0.0.0/16"\nsubnetName="Subnet"\nsubnetPrefix="10.0.0.0/24"\nvirtualNetworkName="MyVNET"\nnetworkSecurityGroupName="default-NSG"\n# Security profile JSON is conditionally used based on the security type parameter.\n# Since the default is TrustedLaunch and both secureBootEnabled and vTpmEnabled are true,\n# the security profile will be used.\nsecurityProfileJson=\'{"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "\'$securityType\'"}\'\n\n# Create a storage account\naz storage account create --name $storageAccountName --location $location --sku Standard_LRS --kind Storage\n\n# Create a public IP address\ndnsLabelPrefix=$(az vm create --name $vmName --resource-group $(az group show --query name) --query \'name\' --output tsv | tr \'[:upper:]\' \'[:lower:]\')-$(az group show --query id --output tsv | xargs -I {} sh -c \'echo {} $vmName\' | xargs -I {} sh -c \'echo $(echo -n {} | md5sum | cut -d" " -f1)\')\naz network public-ip create --name $publicIpName --location $location --allocation-method $publicIPAllocationMethod --sku $publicIpSku --dns-name $dnsLabelPrefix\n\n# Create a network security group and a rule to allow RDP\naz network nsg create --name $networkSecurityGroupName --location $location\naz network nsg rule create --nsg-name $networkSecurityGroupName --name default-allow-3389 --priority 1000 --access Allow --direction Inbound --destination-port-range 3389 --protocol Tcp --source-port-range \'*\' --source-address-prefix \'*\' --destination-address-prefix \'*\' --resource-group $(az group show --query name)\n\n# Create a virtual network and a subnet\naz network vnet create --name $virtualNetworkName --location $location --address-prefix $addressPrefix --subnet-name $subnetName --subnet-prefix $subnetPrefix --network-security-group $networkSecurityGroupName\n\n# Create a network interface\npublicIpAddressId=$(az network public-ip show --name $publicIpName --query id --output tsv)\nsubnetId=$(az network vnet subnet show --vnet-name $virtualNetworkName --name $subnetName --query id --output tsv)\naz network nic create --name $nicName --location $location --subnet $subnetId --public-ip-address $publicIpAddressId\n\n# Create a virtual machine\n# Note: The diagnostics storage URI is obtained from the storage account created earlier.\n# This script assumes the storage account creation is successful and the diagnostics storage URI can be retrieved.\nstorageUri=$(az storage account show --name $storageAccountName --query "primaryEndpoints.blob" --output tsv)\naz vm create --name $vmName --location $location --nics $nicName --size $vmSize --image MicrosoftWindowsServer:WindowsServer:$OSVersion:latest --admin-username $adminUsername --admin-password $adminPassword --boot-diagnostics-storage $storageAccountName --security-profile "$securityProfileJson"\n\n# Add the Guest Attestation extension if the security type is TrustedLaunch\nif [ "$securityType" == "TrustedLaunch" ]; then\n  extensionName="GuestAttestation"\n  extensionPublisher="Microsoft.Azure.Security.WindowsAttestation"\n  extensionVersion="1.0"\n  maaTenantName="GuestAttestation"\n  maaEndpoint=""\n  az vm extension set --publisher $extensionPublisher --name $extensionName --vm-name $vmName --version $extensionVersion --settings \'{"AttestationConfig": {"MaaSettings": {"maaEndpoint": "\'$maaEndpoint\'", "maaTenantName": "\'$maaTenantName\'"}}}\'\nfi\n\n# Output the fully qualified domain name (FQDN) of the public IP address\nhostname=$(az network public-ip show --name $publicIpName --query "dnsSettings.fqdn" --output tsv)\necho "The FQDN of the VM is: $hostname"\n```\n\nPlease note that some values, such as the `dnsLabelPrefix` and `storageAccountName`, are dynamically generated in ARM templates using functions like `uniqueString()`. In the bash script, these values need to be handled appropriately. For the `dnsLabelPrefix`, I used a combination of the VM name and a hash of the resource group ID to simulate uniqueness. For the `storageAccountName`, I used a placeholder and mentioned that it should be replaced with an actual unique name.\n\nAdditionally, the ARM template includes conditional logic and resource dependencies, which may not translate directly into a linear script. I\'ve included comments where assumptions were made, and you may need to adjust the script to fit the actual deployment scenario.


verify_result
