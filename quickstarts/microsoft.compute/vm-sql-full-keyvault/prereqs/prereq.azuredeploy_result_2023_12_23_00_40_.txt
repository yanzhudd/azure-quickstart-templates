arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vaultName": {"type": "string", "defaultValue": "[concat(\'keyvault-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "Specifies the name of the KeyVault, this value must be globally unique."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Specifies the Azure location where the key vault should be created."}}, "accessPolicies": {"type": "array", "metadata": {"description": "Access policies of the Key Vault."}, "defaultValue": "zytest"}, "tenantId": {"type": "string", "metadata": {"description": "Tenant ID for the Key Vault."}, "defaultValue": "zytest"}}, "resources": [{"name": "vault-prereq", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"accessPolicies": {"value": "[parameters(\'accessPolicies\')]"}, "vaultName": {"value": "[parameters(\'vaultName\')]"}, "location": {"value": "[parameters(\'location\')]"}, "enabledForDeployment": {"value": true}, "enabledForDiskEncryption": {"value": true}, "enabledForTemplateDeployment": {"value": true}, "tenantId": {"value": "[parameters(\'tenantId\')]"}}}}], "outputs": {"outKeyVaultName": {"type": "string", "value": "[parameters(\'vaultName\')]"}, "outKeyVaultResourceGroupName": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
Here is the equivalent CLI script:\n\n```bash\n#!/bin/bash\n\n# Define variables\nvaultName="keyvault-$(uuidgen)"\nlocation="westus"\naccessPolicies="zytest"\ntenantId="zytest"\n\n# Create a resource group\naz group create --name $vaultName --location $location\n\n# Create a Key Vault\naz keyvault create --name $vaultName --resource-group $vaultName --location $location --enabled-for-deployment true --enabled-for-disk-encryption true --enabled-for-template-deployment true\n\n# Set access policies for the Key Vault\naz keyvault set-policy --name $vaultName --resource-group $vaultName --object-id $accessPolicies --tenant-id $tenantId --key-permissions get list --secret-permissions get list\n\n# Output the Key Vault name and resource group name\necho "Key Vault Name: $vaultName"\necho "Resource Group Name: $vaultName"\n```\n\nPlease note that the `uuidgen` command is used to generate a unique string for the Key Vault name. Also, the `az keyvault set-policy` command is used to set the access policies for the Key Vault. The `--object-id` parameter is set to the value of the `accessPolicies` variable, and the `--tenant-id` parameter is set to the value of the `tenantId` variable. The `--key-permissions` and `--secret-permissions` parameters are set to `get` and `list`, respectively, which means that the specified principal has permissions to get and list keys and secrets in the Key Vault.


verify_result
