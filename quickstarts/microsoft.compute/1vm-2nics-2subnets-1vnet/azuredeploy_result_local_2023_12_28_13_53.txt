arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.5.6.12127", "templateHash": "13701565265914879608"}}, "parameters": {"virtualMachineSize": {"type": "string", "defaultValue": "Standard_DS1_v2", "metadata": {"description": "Virtual machine size (has to be at least the size of Standard_A3 to support 2 NICs)"}}, "adminUsername": {"type": "string", "metadata": {"description": "Default Admin username"}, "defaultValue": "zytest"}, "adminPassword": {"type": "secureString", "metadata": {"description": "Default Admin password"}, "defaultValue": "zytest"}, "storageAccountType": {"type": "string", "defaultValue": "Standard_LRS", "allowedValues": ["Standard_LRS", "Premium_LRS"], "metadata": {"description": "Storage Account type for the VM and VM diagnostic storage"}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"virtualMachineName": "VM-MultiNic", "nic1Name": "nic-1", "nic2Name": "nic-2", "virtualNetworkName": "virtualNetwork", "subnet1Name": "subnet-1", "subnet2Name": "subnet-2", "publicIPAddressName": "publicIp", "diagStorageAccountName": "[format(\'diags{0}\', uniqueString(resourceGroup().id))]", "networkSecurityGroupName": "NSG", "networkSecurityGroupName2": "[format(\'{0}-nsg\', variables(\'subnet2Name\'))]"}, "resources": [{"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2020-06-01", "name": "[variables(\'virtualMachineName\')]", "location": "[parameters(\'location\')]", "properties": {"osProfile": {"computerName": "[variables(\'virtualMachineName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]", "windowsConfiguration": {"provisionVMAgent": true}}, "hardwareProfile": {"vmSize": "[parameters(\'virtualMachineSize\')]"}, "storageProfile": {"imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "2019-Datacenter", "version": "latest"}, "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"properties": {"primary": true}, "id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nic1Name\'))]"}, {"properties": {"primary": false}, "id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nic2Name\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'diagStorageAccountName\'))).primaryEndpoints.blob]"}}}, "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'diagStorageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nic1Name\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nic2Name\'))]"]}, {"type": "Microsoft.Storage/storageAccounts", "apiVersion": "2019-06-01", "name": "[variables(\'diagStorageAccountName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "[parameters(\'storageAccountType\')]"}, "kind": "StorageV2"}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-06-01", "name": "[variables(\'networkSecurityGroupName2\')]", "location": "[parameters(\'location\')]"}, {"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2020-06-01", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[variables(\'subnet1Name\')]", "properties": {"addressPrefix": "10.0.0.0/24"}}, {"name": "[variables(\'subnet2Name\')]", "properties": {"addressPrefix": "10.0.1.0/24", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName2\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName2\'))]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2020-06-01", "name": "[variables(\'nic1Name\')]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnet1Name\'))]"}, "privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"}}}], "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]", "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2020-06-01", "name": "[variables(\'nic2Name\')]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnet2Name\'))]"}, "privateIPAllocationMethod": "Dynamic"}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2020-06-01", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "Dynamic"}}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-06-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-rdp", "properties": {"priority": 1000, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "3389", "access": "Allow", "direction": "Inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}]}


cli_script
Below is the translated bash script with Azure CLI commands corresponding to the given ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Parameters\nvirtualMachineSize="Standard_DS1_v2"\nadminUsername="zytest"\nadminPassword="zytest"\nstorageAccountType="Standard_LRS"\nlocation="westus"\n\n# Variables\nvirtualMachineName="VM-MultiNic"\nnic1Name="nic-1"\nnic2Name="nic-2"\nvirtualNetworkName="virtualNetwork"\nsubnet1Name="subnet-1"\nsubnet2Name="subnet-2"\npublicIPAddressName="publicIp"\n# The diagStorageAccountName is generated using a unique string function in ARM templates, which is not directly available in Azure CLI.\n# You will need to generate a unique name for the storage account using a different method or hardcode a value.\ndiagStorageAccountName="diags$(uuidgen | tr \'[:upper:]\' \'[:lower:]\' | sed \'s/-//g\')"\nnetworkSecurityGroupName="NSG"\nnetworkSecurityGroupName2="${subnet2Name}-nsg"\n\n# Create a storage account for VM diagnostics\naz storage account create \\\n    --name $diagStorageAccountName \\\n    --location $location \\\n    --sku $storageAccountType \\\n    --kind StorageV2\n\n# Create Network Security Group for subnet 2\naz network nsg create \\\n    --name $networkSecurityGroupName2 \\\n    --location $location\n\n# Create a virtual network with two subnets\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --location $location \\\n    --address-prefixes "10.0.0.0/16" \\\n    --subnet-name $subnet1Name \\\n    --subnet-prefix "10.0.0.0/24"\n\naz network vnet subnet create \\\n    --name $subnet2Name \\\n    --vnet-name $virtualNetworkName \\\n    --address-prefix "10.0.1.0/24" \\\n    --network-security-group $networkSecurityGroupName2\n\n# Create a public IP address\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --location $location\n\n# Create Network Security Group for NIC 1\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --location $location\n\n# Create an inbound security rule for RDP\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --name "default-allow-rdp" \\\n    --priority 1000 \\\n    --source-address-prefixes "*" \\\n    --destination-address-prefixes "*" \\\n    --protocol Tcp \\\n    --destination-port-ranges 3389 \\\n    --access Allow \\\n    --direction Inbound\n\n# Create network interfaces\naz network nic create \\\n    --name $nic1Name \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnet1Name \\\n    --network-security-group $networkSecurityGroupName \\\n    --public-ip-address $publicIPAddressName\n\naz network nic create \\\n    --name $nic2Name \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnet2Name\n\n# Get the storage account URI for boot diagnostics\nstorageAccountUri=$(az storage account show --name $diagStorageAccountName --query "primaryEndpoints.blob" -o tsv)\n\n# Create a virtual machine with two NICs\naz vm create \\\n    --name $virtualMachineName \\\n    --location $location \\\n    --nics $nic1Name $nic2Name \\\n    --size $virtualMachineSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --image "MicrosoftWindowsServer:WindowsServer:2019-Datacenter:latest" \\\n    --boot-diagnostics-storage $storageAccountUri\n```\n\nPlease note:\n- The `uniqueString()` function used in ARM templates to create unique names is not available in Azure CLI. Instead, I used `uuidgen` to generate a unique string for the storage account name. You may need to adjust this as per your requirements.\n- The `adminPassword` is a secure string in the ARM template. Ensure that you handle it securely in your script and do not expose it in plaintext.\n- This script assumes that you have the necessary permissions and that the Azure CLI is installed and configured with the correct account.\n- The script does not handle dependencies between resources explicitly. Azure CLI commands are sequential and blocking, so the script assumes that each command will complete before the next one starts.


verify_result
