arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmSku": {"type": "string", "defaultValue": "Standard_A1", "metadata": {"description": "Size of VMs in the VM Scale Set."}}, "ubuntuOSVersion": {"type": "string", "defaultValue": "14.04.4-LTS", "allowedValues": ["14.04.4-LTS"], "metadata": {"description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values are: 15.10, 14.04.4-LTS."}}, "vmssName": {"type": "string", "metadata": {"description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."}, "maxLength": 61, "defaultValue": "zytest"}, "capacity": {"type": "int", "metadata": {"description": "Number of VM instances (100 or less)."}, "maxValue": 100, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "Admin username on all VMs."}, "defaultValue": "zytest"}, "vaultName": {"type": "string", "metadata": {"description": "The Azure Key vault where SSL certificates are stored"}, "defaultValue": "zytest"}, "vaultResourceGroup": {"type": "string", "metadata": {"description": "Resource Group of the key vault"}, "defaultValue": "zytest"}, "httpssecretUrlWithVersion": {"type": "string", "metadata": {"description": "full Key Vault Id to the secret that stores the SSL cert"}, "defaultValue": "zytest"}, "httpssecretCaUrlWithVersion": {"type": "string", "metadata": {"description": "full Key Vault Id to the secret that stores the CA cert"}, "defaultValue": "zytest"}, "scriptFileName": {"type": "string", "metadata": {"description": "the file name of the script configuring the VMs in the scale set"}, "defaultValue": "zytest"}, "certThumbPrint": {"type": "string", "metadata": {"description": "fingerprint of the SSL cert"}, "defaultValue": "zytest"}, "caCertThumbPrint": {"type": "string", "metadata": {"description": "fingerprint of the CA cert"}, "defaultValue": "zytest"}, "_artifactsLocation": {"type": "string", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}, "defaultValue": "https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/quickstarts/microsoft.compute/vmss-ubuntu-web-ssl/configuressl.sh"}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}}, "variables": {"namingInfix": "[toLower(substring(concat(parameters(\'vmssName\'), uniqueString(resourceGroup().id)), 0, 9))]", "addressPrefix": "10.0.0.0/16", "subnetPrefix": "10.0.0.0/24", "virtualNetworkName": "[concat(variables(\'namingInfix\'), \'vnet\')]", "subnetName": "[concat(variables(\'namingInfix\'), \'subnet\')]", "lbName": "[concat(variables(\'namingInfix\'), \'lb\')]", "bepoolName": "[concat(variables(\'lbName\'), \'bepool\')]", "fepoolName": "[concat(variables(\'lbName\'), \'fepool\')]", "lbID": "[resourceId(\'Microsoft.Network/loadBalancers\',variables(\'lbName\'))]", "bepoolID": "[concat(variables(\'lbID\'),\'/backendAddressPools/\', variables(\'bepoolName\'))]", "feIpConfigName": "[concat(variables(\'fepoolName\'), \'IpConfig\')]", "feIpConfigId": "[concat(variables(\'lbID\'),\'/frontendIPConfigurations/\', variables(\'feIpConfigName\'))]", "pipName": "[concat(variables(\'namingInfix\'), \'pip\')]", "nicName": "[concat(variables(\'namingInfix\'), \'nic\')]", "natPoolName": "[concat(variables(\'lbName\'), \'natpool\')]", "ipConfigName": "[concat(variables(\'namingInfix\'), \'ipconfig\')]", "httpProbeName": "httpProbe", "httpsProbeName": "httpsProbe", "osType": {"publisher": "Canonical", "offer": "UbuntuServer", "sku": "[parameters(\'ubuntuOSVersion\')]", "version": "latest"}, "imageReference": "[variables(\'osType\')]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetPrefix\')]"}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'pipName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[variables(\'namingInfix\')]"}}}, {"type": "Microsoft.Network/loadBalancers", "name": "[variables(\'lbName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-03-30", "dependsOn": ["[concat(\'Microsoft.Network/publicIPAddresses/\', variables(\'pipName\'))]"], "tags": {"displayName": "Load Balancer"}, "properties": {"frontendIPConfigurations": [{"name": "[variables(\'feIpConfigName\')]", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'pipName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'bepoolName\')]"}], "inboundNatPools": [{"name": "[variables(\'natPoolName\')]", "properties": {"frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "protocol": "Tcp", "frontendPortRangeStart": 10022, "frontendPortRangeEnd": 10050, "backendPort": 22}}], "loadBalancingRules": [{"name": "HTTPRule", "properties": {"loadDistribution": "Default", "frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "backendAddressPool": {"id": "[variables(\'bepoolID\')]"}, "protocol": "Tcp", "frontendPort": 80, "backendPort": 80, "enableFloatingIP": false, "idleTimeoutInMinutes": 5, "probe": {"id": "[concat(variables(\'lbId\'), \'/probes/\', variables(\'httpProbeName\'))]"}}}, {"name": "HTTPSRule", "properties": {"loadDistribution": "Default", "frontendIPConfiguration": {"id": "[variables(\'feIpConfigId\')]"}, "backendAddressPool": {"id": "[variables(\'bepoolId\')]"}, "protocol": "Tcp", "frontendPort": 443, "backendPort": 443, "enableFloatingIP": false, "idleTimeoutInMinutes": 5, "probe": {"id": "[concat(resourceId(\'Microsoft.Network/loadBalancers\', variables(\'lbName\')), \'/probes/\', variables(\'httpsProbeName\'))]"}}}], "probes": [{"name": "[variables(\'httpProbeName\')]", "properties": {"protocol": "Tcp", "port": 80, "intervalInSeconds": 5, "numberOfProbes": 2}}, {"name": "[variables(\'httpsProbeName\')]", "properties": {"protocol": "Tcp", "port": 443, "intervalInSeconds": 5, "numberOfProbes": 2}}]}}, {"type": "Microsoft.Compute/virtualMachineScaleSets", "name": "[variables(\'namingInfix\')]", "location": "[parameters(\'location\')]", "apiVersion": "2016-04-30-preview", "dependsOn": ["[concat(\'Microsoft.Network/loadBalancers/\', variables(\'lbName\'))]", "[concat(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "sku": {"name": "[parameters(\'vmSku\')]", "tier": "Standard", "capacity": "[parameters(\'capacity\')]"}, "properties": {"overprovision": "true", "upgradePolicy": {"mode": "Manual"}, "virtualMachineProfile": {"storageProfile": {"osDisk": {"caching": "ReadWrite", "createOption": "FromImage"}, "imageReference": "[variables(\'imageReference\')]"}, "osProfile": {"computerNamePrefix": "[variables(\'namingInfix\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "secrets": [{"sourceVault": {"id": "[resourceId(parameters(\'vaultResourceGroup\'), \'Microsoft.KeyVault/vaults\', parameters(\'vaultName\'))]"}, "vaultCertificates": [{"certificateUrl": "[parameters(\'httpssecretUrlWithVersion\')]"}, {"certificateUrl": "[parameters(\'httpssecretCaUrlWithVersion\')]"}]}], "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "networkProfile": {"networkInterfaceConfigurations": [{"name": "[variables(\'nicName\')]", "properties": {"primary": true, "ipConfigurations": [{"name": "[variables(\'ipConfigName\')]", "properties": {"subnet": {"id": "[resourceId( \'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'lbName\'), variables(\'bePoolName\'))]"}], "loadBalancerInboundNatPools": [{"id": "[resourceId( \'Microsoft.Network/loadBalancers/inboundNatPools\', variables(\'lbName\'), variables(\'natPoolName\'))]"}]}}]}}]}, "extensionProfile": {"extensions": [{"name": "lapextension", "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": false, "settings": {"fileUris": ["[concat(parameters(\'_artifactsLocation\'), \'/\', parameters(\'scriptFileName\'), parameters(\'_artifactsLocationSasToken\'))]"]}, "protectedSettings": {"commandToExecute": "[concat(\'bash \', parameters(\'scriptFileName\'), \' \', parameters(\'certThumbPrint\'), \' \', parameters(\'caCertThumbPrint\'))]"}}}]}}}}], "outputs": {"fqdn": {"type": "string", "value": "[reference( variables(\'pipName\') ).dnsSettings.fqdn]"}}}


cli_script
Below is the translated bash script based on the provided ARM template and parameters. Please note that this script assumes that the Azure CLI is installed and that you have logged in to your Azure account using `az login`.\n\n```bash\n#!/bin/bash\n\n# Parameters\nvmSku="Standard_A1"\nubuntuOSVersion="14.04.4-LTS"\nvmssName="zytest"\ncapacity=1 # Assuming that "zytest" is a typo and the default value should be an integer\nadminUsername="zytest"\nvaultName="zytest"\nvaultResourceGroup="zytest"\nhttpssecretUrlWithVersion="zytest"\nhttpssecretCaUrlWithVersion="zytest"\nscriptFileName="zytest"\ncertThumbPrint="zytest"\ncaCertThumbPrint="zytest"\n_artifactsLocation="https://raw.githubusercontent.com/azure/azure-quickstart-templates/master/quickstarts/microsoft.compute/vmss-ubuntu-web-ssl/configuressl.sh"\n_artifactsLocationSasToken=""\nlocation="westus"\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\n\n# Variables (calculated based on parameters and resource group)\nnamingInfix=$(echo -n "${vmssName}$(az group show --query id --output tsv)" | tr -d \'\\n\' | tr -d \'\\r\' | tr \'[:upper:]\' \'[:lower:]\' | head -c 9)\naddressPrefix="10.0.0.0/16"\nsubnetPrefix="10.0.0.0/24"\nvirtualNetworkName="${namingInfix}vnet"\nsubnetName="${namingInfix}subnet"\nlbName="${namingInfix}lb"\nbepoolName="${lbName}bepool"\nfepoolName="${lbName}fepool"\npipName="${namingInfix}pip"\nnicName="${namingInfix}nic"\nnatPoolName="${lbName}natpool"\nipConfigName="${namingInfix}ipconfig"\nhttpProbeName="httpProbe"\nhttpsProbeName="httpsProbe"\n\n# Create virtual network\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --location $location \\\n    --address-prefix $addressPrefix \\\n    --subnet-name $subnetName \\\n    --subnet-prefix $subnetPrefix\n\n# Create public IP address\naz network public-ip create \\\n    --name $pipName \\\n    --location $location \\\n    --allocation-method Dynamic \\\n    --dns-name $namingInfix\n\n# Create load balancer and related resources\naz network lb create \\\n    --name $lbName \\\n    --location $location \\\n    --frontend-ip-name $fepoolName \\\n    --backend-pool-name $bepoolName \\\n    --public-ip-address $pipName\n\n# Create inbound NAT pool\naz network lb inbound-nat-pool create \\\n    --lb-name $lbName \\\n    --name $natPoolName \\\n    --protocol Tcp \\\n    --frontend-port-range-start 10022 \\\n    --frontend-port-range-end 10050 \\\n    --backend-port 22 \\\n    --frontend-ip-name $fepoolName\n\n# Create load balancing rules\naz network lb rule create \\\n    --lb-name $lbName \\\n    --name "HTTPRule" \\\n    --protocol Tcp \\\n    --frontend-port 80 \\\n    --backend-port 80 \\\n    --frontend-ip-name $fepoolName \\\n    --backend-pool-name $bepoolName \\\n    --probe-name $httpProbeName\n\naz network lb rule create \\\n    --lb-name $lbName \\\n    --name "HTTPSRule" \\\n    --protocol Tcp \\\n    --frontend-port 443 \\\n    --backend-port 443 \\\n    --frontend-ip-name $fepoolName \\\n    --backend-pool-name $bepoolName \\\n    --probe-name $httpsProbeName\n\n# Create probes\naz network lb probe create \\\n    --lb-name $lbName \\\n    --name $httpProbeName \\\n    --protocol Tcp \\\n    --port 80 \\\n    --interval 5 \\\n    --count 2\n\naz network lb probe create \\\n    --lb-name $lbName \\\n    --name $httpsProbeName \\\n    --protocol Tcp \\\n    --port 443 \\\n    --interval 5 \\\n    --count 2\n\n# Create VM Scale Set\naz vmss create \\\n    --name $namingInfix \\\n    --location $location \\\n    --vm-sku $vmSku \\\n    --capacity $capacity \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPasswordOrKey \\\n    --authentication-type $authenticationType \\\n    --image Canonical:UbuntuServer:$ubuntuOSVersion:latest \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnetName \\\n    --load-balancer $lbName \\\n    --backend-pool-name $bepoolName \\\n    --upgrade-policy-mode Manual \\\n    --overprovision true\n\n# Add custom script extension to VMSS\naz vmss extension set \\\n    --vmss-name $namingInfix \\\n    --name "CustomScript" \\\n    --publisher "Microsoft.Azure.Extensions" \\\n    --version 2.0 \\\n    --settings "{\\"fileUris\\": [\\"${_artifactsLocation}/${scriptFileName}${_artifactsLocationSasToken}\\"]}" \\\n    --protected-settings "{\\"commandToExecute\\": \\"bash ${scriptFileName} ${certThumbPrint} ${caCertThumbPrint}\\"}"\n\n# Retrieve FQDN\nfqdn=$(az network public-ip show --name $pipName --query "dnsSettings.fqdn" -o tsv)\necho "FQDN: $fqdn"\n```\n\nPlease ensure you review and adjust the script as necessary, especially the `capacity` parameter which seems to be set incorrectly in the provided JSON. The script assumes that the `capacity` should be an integer value. Also, replace the `zytest` placeholders with actual secure values before running the script.


verify_result
