arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmssName": {"type": "string", "metadata": {"description": "Name of existing VM Scale Set"}, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "User Name of existing VM Scale Set"}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "Number of desired VM instances"}, "defaultValue": "zytest"}, "keyVaultName": {"type": "string", "metadata": {"description": "Name of the KeyVault to place the volume encryption key"}, "defaultValue": "zytest"}, "keyVaultResourceGroup": {"type": "string", "metadata": {"description": "Resource group of the KeyVault"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Default location"}}, "keyEncryptionKeyURL": {"type": "string", "defaultValue": "", "metadata": {"description": "URL of the KeyEncryptionKey used to encrypt the volume encryption key"}}}, "variables": {"virtualNetworkName": "[concat(parameters(\'vmssName\'), \'vnet\')]", "publicIPAddressName": "[concat(parameters(\'vmssName\'), \'pip\')]", "subnetName": "[concat(parameters(\'vmssName\'), \'subnet\')]", "loadBalancerName": "[concat(parameters(\'vmssName\'), \'lb\')]", "natPoolName": "[concat(parameters(\'vmssName\'), \'natpool\')]", "bePoolName": "[concat(parameters(\'vmssName\'), \'bepool\')]", "keyVaultResourceID": "[resourceId(parameters(\'keyVaultResourceGroup\'), \'Microsoft.KeyVault/vaults/\', parameters(\'keyVaultName\'))]"}, "resources": [{"type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2020-08-01", "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "10.0.0.0/24"}}]}}, {"type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2018-02-01", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[toLower(substring(concat(\'vmssName\', uniqueString(resourceGroup().id)), 0, 16))]"}}}, {"type": "Microsoft.Network/loadBalancers", "name": "[variables(\'loadBalancerName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2018-02-01", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]"], "properties": {"frontendIPConfigurations": [{"name": "LoadBalancerFrontEnd", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'bePoolName\')]"}], "inboundNatPools": [{"name": "[variables(\'natPoolName\')]", "properties": {"frontendIPConfiguration": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations/\',variables(\'loadBalancerName\'),\'loadBalancerFrontEnd\')]"}, "protocol": "tcp", "frontendPortRangeStart": 50000, "frontendPortRangeEnd": 50119, "backendPort": 3389}}]}}, {"type": "Microsoft.Compute/virtualMachineScaleSets", "name": "[parameters(\'vmssName\')]", "location": "[parameters(\'location\')]", "apiVersion": "2017-03-30", "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers/\', variables(\'loadBalancerName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "sku": {"name": "Standard_D2_v3", "tier": "Standard", "capacity": 2}, "properties": {"overprovision": true, "upgradePolicy": {"mode": "Automatic"}, "virtualMachineProfile": {"storageProfile": {"osDisk": {"createOption": "FromImage"}, "imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "2012-R2-Datacenter", "version": "latest"}}, "osProfile": {"computerNamePrefix": "existvmss", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "networkProfile": {"networkInterfaceConfigurations": [{"name": "[concat(parameters(\'vmssName\'), \'nic\')]", "properties": {"primary": true, "ipConfigurations": [{"name": "[concat(parameters(\'vmssName\'), \'ipconfig\')]", "properties": {"subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', variables(\'loadBalancerName\'), variables(\'bePoolName\'))]"}], "loadBalancerInboundNatPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatPools\', variables(\'loadBalancerName\'), variables(\'natPoolName\'))]"}]}}]}}]}, "extensionProfile": {"extensions": [{"name": "AzureDiskEncryption", "properties": {"publisher": "Microsoft.Azure.Security", "type": "AzureDiskEncryption", "typeHandlerVersion": "2.2", "autoUpgradeMinorVersion": true, "forceUpdateTag": "[uniqueString(resourceGroup().id, deployment().name)]", "settings": {"EncryptionOperation": "EnableEncryption", "KeyVaultURL": "[reference(variables(\'keyVaultResourceId\'),\'2018-02-14-preview\').vaultUri]", "KeyVaultResourceId": "[variables(\'keyVaultResourceID\')]", "KeyEncryptionKeyURL": "[parameters(\'keyEncryptionKeyURL\')]", "KekVaultResourceId": "[variables(\'keyVaultResourceID\')]", "KeyEncryptionAlgorithm": "RSA-OAEP", "VolumeType": "All"}}}]}}}}], "outputs": {"vmssName": {"type": "string", "value": "[parameters(\'vmssName\')]"}}}


cli_script
Below is the translated bash script from the provided ARM template and parameters. Each resource from the ARM template has been converted into an equivalent Azure CLI command. The parameters have been turned into variables, and the script is executable in a bash environment.\n\n```bash\n#!/bin/bash\n\n# Parameters\nvmssName="zytest"\nadminUsername="zytest"\nadminPassword="zytest" # Please note that it\'s not secure to hardcode passwords\nkeyVaultName="zytest"\nkeyVaultResourceGroup="zytest"\nlocation="westus"\nkeyEncryptionKeyURL=""\n\n# Variables (constructed from parameters)\nvirtualNetworkName="${vmssName}vnet"\npublicIPAddressName="${vmssName}pip"\nsubnetName="${vmssName}subnet"\nloadBalancerName="${vmssName}lb"\nnatPoolName="${vmssName}natpool"\nbePoolName="${vmssName}bepool"\n# keyVaultResourceID is not directly translatable to CLI as it requires a subshell execution to retrieve the resource ID\n\n# Create Virtual Network\naz network vnet create \\\n  --name "$virtualNetworkName" \\\n  --location "$location" \\\n  --address-prefixes "10.0.0.0/16" \\\n  --subnet-name "$subnetName" \\\n  --subnet-prefix "10.0.0.0/24"\n\n# Create Public IP Address\naz network public-ip create \\\n  --name "$publicIPAddressName" \\\n  --location "$location" \\\n  --allocation-method Dynamic\n\n# Retrieve the Public IP Address resource ID\npublicIPAddressId=$(az network public-ip show --name "$publicIPAddressName" --query "id" -o tsv)\n\n# Create Load Balancer\naz network lb create \\\n  --name "$loadBalancerName" \\\n  --location "$location" \\\n  --frontend-ip-name "LoadBalancerFrontEnd" \\\n  --public-ip-address "$publicIPAddressId" \\\n  --backend-pool-name "$bePoolName"\n\n# Retrieve the Frontend IP Configuration ID\nfrontendIPConfigId=$(az network lb frontend-ip show --lb-name "$loadBalancerName" --name "LoadBalancerFrontEnd" --query "id" -o tsv)\n\n# Create Inbound NAT Pool\naz network lb inbound-nat-pool create \\\n  --lb-name "$loadBalancerName" \\\n  --name "$natPoolName" \\\n  --frontend-ip-configurations "$frontendIPConfigId" \\\n  --protocol tcp \\\n  --frontend-port-range-start 50000 \\\n  --frontend-port-range-end 50119 \\\n  --backend-port 3389\n\n# Retrieve necessary IDs for VMSS network profile\nsubnetId=$(az network vnet subnet show --vnet-name "$virtualNetworkName" --name "$subnetName" --query "id" -o tsv)\nbackendAddressPoolId=$(az network lb address-pool show --lb-name "$loadBalancerName" --name "$bePoolName" --query "id" -o tsv)\ninboundNatPoolId=$(az network lb inbound-nat-pool show --lb-name "$loadBalancerName" --name "$natPoolName" --query "id" -o tsv)\n\n# Create VM Scale Set\naz vmss create \\\n  --name "$vmssName" \\\n  --location "$location" \\\n  --vm-sku "Standard_D2_v3" \\\n  --instance-count 2 \\\n  --upgrade-policy-mode "Automatic" \\\n  --admin-username "$adminUsername" \\\n  --admin-password "$adminPassword" \\\n  --image "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:latest" \\\n  --vnet-name "$virtualNetworkName" \\\n  --subnet "$subnetId" \\\n  --load-balancer "$loadBalancerName" \\\n  --backend-pool-name "$bePoolName"\n\n# Note: The extension profile with Azure Disk Encryption is complex to translate into CLI commands\n# because it may require additional steps such as enabling Key Vault for disk encryption.\n# The following is a placeholder for the extension and should be adapted according to your environment and requirements.\n\n# Retrieve the Key Vault resource ID\n# keyVaultResourceId=$(az keyvault show --name "$keyVaultName" --resource-group "$keyVaultResourceGroup" --query "id" -o tsv)\n\n# Add Azure Disk Encryption extension to the VMSS\n# az vmss extension set \\\n#   --resource-group <Resource-Group-Of-VMSS> \\\n#   --vmss-name "$vmssName" \\\n#   --name "AzureDiskEncryption" \\\n#   --publisher "Microsoft.Azure.Security" \\\n#   --version "2.2" \\\n#   --settings "{\'EncryptionOperation\': \'EnableEncryption\', \'KeyVaultURL\': \'<Key-Vault-URL>\', \'KeyVaultResourceId\': \'$keyVaultResourceId\', \'KeyEncryptionKeyURL\': \'$keyEncryptionKeyURL\', \'KekVaultResourceId\': \'$keyVaultResourceId\', \'KeyEncryptionAlgorithm\': \'RSA-OAEP\', \'VolumeType\': \'All\'}"\n\n# The above extension command is commented out because it requires the KeyVaultURL and other details specific to your environment.\n# Please replace <Resource-Group-Of-VMSS> and <Key-Vault-URL> with the actual resource group name and Key Vault URL.\n\n# Output the VMSS name\necho "VM Scale Set Name: $vmssName"\n```\n\nPlease note that the Azure Disk Encryption extension part of the script is commented out as it requires specific details about your Key Vault and additional configurations that may not be covered by the ARM template alone. You will need to replace placeholders with actual values and ensure that your Key Vault is properly configured for disk encryption before executing that part of the script.


verify_result
