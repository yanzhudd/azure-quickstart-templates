arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"type": "string", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}, "defaultValue": "[deployment().properties.templateLink.uri]"}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "glassfishVersion": {"type": "int", "allowedValues": [3, 4], "metadata": {"description": "Release number for the GlassFish package to be deployed."}, "defaultValue": "zytest"}, "glassfishRelease": {"type": "string", "allowedValues": ["3.1.1", "3.1.2", "3.1.2.2", "3.2", "4.0", "4.1"], "metadata": {"description": "Version of GlassFish to deploy"}, "defaultValue": "zytest"}, "numberOfInstances": {"type": "int", "minValue": 1, "maxValue": 10, "metadata": {"description": "Number of VMs"}, "defaultValue": "zytest"}, "dnsNameforLBIP": {"type": "string", "minLength": 1, "metadata": {"description": "DNS for Load Balancer IP"}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "VM(s) size"}}, "adminUsername": {"type": "string", "metadata": {"description": "Admin username"}, "defaultValue": "zytest"}, "glassfishAdminPassword": {"type": "securestring", "metadata": {"description": "GlassFish admin user password"}, "defaultValue": "zytest"}, "sshPublicKey": {"type": "securestring", "metadata": {"description": "SSH public key on all VMs"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"location": "[parameters(\'location\')]", "namePrefix": "gf-", "storageAccountName": "[concat(uniqueString(resourceGroup().id), \'sa\')]", "availabilitySetName": "[concat(variables(\'namePrefix\'), \'nodes\')]", "publicIPAddressName": "[concat(variables(\'namePrefix\'), \'ip\')]", "vnetName": "[concat(variables(\'namePrefix\'), \'vnet\')]", "subnetName": "[concat(variables(\'namePrefix\'), \'subnet\')]", "nsgName": "[concat(variables(\'subnetName\'), \'-nsg\')]", "lbName": "[concat(variables(\'namePrefix\'), \'lb\')]", "frontEndIPConfigID": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\',variables(\'lbName\'),\'LoadBalancerFrontEnd\')]", "lbPoolName": "lbBackend", "lbProbeName": "[concat(variables(\'namePrefix\'), \'tcp-probe\')]", "sshKeyPath": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "nestedTemplateFolder": "nestedtemplates/", "nestedTemplateFileName": "azuredeploy.json", "nestedTemplateUrl": "[uri(parameters(\'_artifactsLocation\'), concat(variables(\'nestedTemplateFolder\'), variables(\'nestedTemplateFileName\'), parameters(\'_artifactsLocationSasToken\')))]"}, "resources": [{"apiVersion": "2021-02-01", "location": "[variables(\'location\')]", "name": "[variables(\'storageAccountName\')]", "sku": {"name": "Standard_LRS"}, "type": "Microsoft.Storage/storageAccounts"}, {"apiVersion": "2020-12-01", "location": "[variables(\'location\')]", "name": "[variables(\'availabilitySetName\')]", "sku": {"name": "Aligned"}, "properties": {"platformFaultDomainCount": 2, "platformUpdateDomainCount": 5}, "type": "Microsoft.Compute/availabilitySets"}, {"apiVersion": "2020-07-01", "location": "[variables(\'location\')]", "name": "[variables(\'publicIPAddressName\')]", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsNameforLBIP\')]"}}, "type": "Microsoft.Network/publicIPAddresses"}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/networkSecurityGroups", "name": "[variables(\'nsgName\')]", "location": "[variables(\'location\')]", "properties": {"securityRules": [{"name": "ssh-rule", "properties": {"description": "Allow SSH", "protocol": "Tcp", "sourcePortRange": "*", "destinationPortRange": "22", "sourceAddressPrefix": "Internet", "destinationAddressPrefix": "*", "access": "Allow", "priority": 100, "direction": "Inbound"}}, {"name": "web-rule", "properties": {"description": "Allow WEB", "protocol": "Tcp", "sourcePortRange": "*", "destinationPortRange": "8080", "sourceAddressPrefix": "Internet", "destinationAddressPrefix": "*", "access": "Allow", "priority": 101, "direction": "Inbound"}}]}}, {"apiVersion": "2020-07-01", "location": "[variables(\'location\')]", "name": "[variables(\'vnetName\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups/\', variables(\'nsgName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "10.0.0.0/24", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'nsgName\'))]"}}}]}, "type": "Microsoft.Network/virtualNetworks"}, {"apiVersion": "2020-07-01", "name": "[variables(\'lbName\')]", "type": "Microsoft.Network/loadBalancers", "location": "[variables(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]"], "properties": {"frontendIPConfigurations": [{"name": "LoadBalancerFrontEnd", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"}}}], "backendAddressPools": [{"name": "[variables(\'lbPoolName\')]"}], "loadBalancingRules": [{"name": "LBRule", "properties": {"backendAddressPool": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\',variables(\'lbName\'),variables(\'lbPoolName\'))]"}, "backendPort": 8080, "enableFloatingIP": false, "frontendIPConfiguration": {"id": "[variables(\'frontEndIPConfigID\')]"}, "frontendPort": 80, "idleTimeoutInMinutes": 5, "probe": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/probes\',variables(\'lbName\'),variables(\'lbProbeName\'))]"}, "protocol": "Tcp"}}], "probes": [{"name": "[variables(\'lbProbeName\')]", "properties": {"intervalInSeconds": 5, "numberOfProbes": 2, "port": 8080, "protocol": "Tcp"}}]}}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/loadBalancers/inboundNatRules", "name": "[concat(variables(\'lbName\'), \'/ssh-\', variables(\'namePrefix\'), copyIndex())]", "location": "[variables(\'location\')]", "copy": {"name": "lbSSHNatLoop", "count": "[parameters(\'numberOfInstances\')]"}, "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers/\', variables(\'lbName\'))]"], "properties": {"frontendIPConfiguration": {"id": "[variables(\'frontEndIPConfigID\')]"}, "protocol": "Tcp", "frontendPort": "[copyIndex(5000)]", "backendPort": 22, "enableFloatingIP": false}}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/loadBalancers/inboundNatRules", "name": "[concat(variables(\'lbName\'), \'/admin-\', variables(\'namePrefix\'), copyIndex())]", "location": "[variables(\'location\')]", "copy": {"name": "lbAdminNatLoop", "count": "[parameters(\'numberOfInstances\')]"}, "dependsOn": ["[resourceId(\'Microsoft.Network/loadBalancers/\', variables(\'lbName\'))]"], "properties": {"frontendIPConfiguration": {"id": "[variables(\'frontEndIPConfigID\')]"}, "protocol": "Tcp", "frontendPort": "[copyIndex(4800)]", "backendPort": 4848, "enableFloatingIP": false}}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'namePrefix\'), \'nic-\', copyindex())]", "location": "[variables(\'location\')]", "copy": {"name": "nicLoop", "count": "[parameters(\'numberOfInstances\')]"}, "dependsOn": ["[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'vnetName\'))]", "[resourceId(\'Microsoft.Network/loadBalancers/\', variables(\'lbName\'))]", "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\',variables(\'lbName\'),concat(\'ssh-\', variables(\'namePrefix\'), copyIndex()))]", "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\',variables(\'lbName\'),concat(\'admin-\', variables(\'namePrefix\'), copyIndex()))]"], "properties": {"ipConfigurations": [{"name": "ipconfig", "properties": {"privateIPAllocationMethod": "Dynamic", "subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'vnetName\'), variables(\'subnetName\'))]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\',variables(\'lbName\'),variables(\'lbPoolName\'))]"}], "loadBalancerInboundNatRules": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\',variables(\'lbName\'),concat(\'ssh-\', variables(\'namePrefix\'), copyIndex()))]"}, {"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\',variables(\'lbName\'),concat(\'admin-\', variables(\'namePrefix\'), copyIndex()))]"}]}}]}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[concat(variables(\'namePrefix\'), \'vm-\', copyindex())]", "copy": {"name": "virtualMachineLoop", "count": "[parameters(\'numberOfInstances\')]"}, "location": "[variables(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts/\', variables(\'storageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(variables(\'namePrefix\'),\'nic-\', copyindex()))]", "[resourceId(\'Microsoft.Compute/availabilitySets/\', variables(\'availabilitySetName\'))]"], "properties": {"availabilitySet": {"id": "[resourceId(\'Microsoft.Compute/availabilitySets\',variables(\'availabilitySetName\'))]"}, "hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[concat(variables(\'namePrefix\'), copyIndex())]", "adminUsername": "[parameters(\'adminUsername\')]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[variables(\'sshKeyPath\')]", "keyData": "[parameters(\'sshPublicKey\')]"}]}}}, "storageProfile": {"imageReference": {"publisher": "SUSE", "offer": "openSUSE-Leap", "sku": "15-2", "version": "latest"}, "osDisk": {"name": "[concat(variables(\'namePrefix\'), \'vm-\', copyindex(),\'_OSDisk\')]", "caching": "ReadWrite", "createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',concat(variables(\'namePrefix\'), \'nic-\', copyindex()))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(variables(\'storageAccountName\'),\'2021-02-01\').primaryendpoints[\'blob\']]"}}}}, {"name": "GlassFishDeployment", "type": "Microsoft.Resources/deployments", "apiVersion": "2021-04-01", "dependsOn": ["virtualMachineLoop"], "properties": {"mode": "Incremental", "templateLink": {"uri": "[variables(\'nestedTemplateUrl\')]", "contentVersion": "1.0.0.0"}, "parameters": {"_artifactsLocation": {"value": "[parameters(\'_artifactsLocation\')]"}, "_artifactsLocationSasToken": {"value": "[parameters(\'_artifactsLocationSasToken\')]"}, "vmPrefix": {"value": "[concat(variables(\'namePrefix\'), \'vm-\')]"}, "numberOfInstances": {"value": "[parameters(\'numberOfInstances\')]"}, "glassfishVersion": {"value": "[parameters(\'glassfishVersion\')]"}, "glassfishRelease": {"value": "[parameters(\'glassfishRelease\')]"}, "glassfishAdminPassword": {"value": "[parameters(\'glassfishAdminPassword\')]"}}}}], "outputs": {"LoadBalancedApplicationServerURL": {"type": "string", "value": "[concat(\'http://\', reference(variables(\'publicIPAddressName\')).dnsSettings.fqdn)]"}}}


cli_script
Based on the provided ARM template and its parameters, here is the equivalent Azure CLI script in bash:\n\n```bash\n#!/bin/bash\n\n# Parameters\n_artifactsLocation="[deployment().properties.templateLink.uri]"\n_artifactsLocationSasToken=""\nglassfishVersion=3 # Assuming default value should be an integer within allowedValues\nglassfishRelease="3.1.1" # Assuming default value should be a string within allowedValues\nnumberOfInstances=1 # Assuming default value should be an integer within minValue and maxValue\ndnsNameforLBIP="zytest"\nvmSize="Standard_D2s_v3"\nadminUsername="zytest"\nglassfishAdminPassword="zytest"\nsshPublicKey="zytest"\nlocation="westus"\n\n# Variables\nnamePrefix="gf-"\nstorageAccountName=$(az storage account list --query "[?contains(name,\'$namePrefix\')].name" -o tsv)\navailabilitySetName="${namePrefix}nodes"\npublicIPAddressName="${namePrefix}ip"\nvnetName="${namePrefix}vnet"\nsubnetName="${namePrefix}subnet"\nnsgName="${subnetName}-nsg"\nlbName="${namePrefix}lb"\nfrontEndIPConfigID=$(az network lb frontend-ip show --lb-name $lbName --name LoadBalancerFrontEnd --query "id" -o tsv)\nlbPoolName="lbBackend"\nlbProbeName="${namePrefix}tcp-probe"\nsshKeyPath="/home/${adminUsername}/.ssh/authorized_keys"\nnestedTemplateFolder="nestedtemplates/"\nnestedTemplateFileName="azuredeploy.json"\nnestedTemplateUrl="${_artifactsLocation}${nestedTemplateFolder}${nestedTemplateFileName}${_artifactsLocationSasToken}"\n\n# Create Storage Account\naz storage account create \\\n  --name $storageAccountName \\\n  --location $location \\\n  --sku Standard_LRS \\\n  --kind StorageV2\n\n# Create Availability Set\naz vm availability-set create \\\n  --name $availabilitySetName \\\n  --location $location \\\n  --platform-fault-domain-count 2 \\\n  --platform-update-domain-count 5 \\\n  --sku Aligned\n\n# Create Public IP Address\naz network public-ip create \\\n  --name $publicIPAddressName \\\n  --location $location \\\n  --allocation-method Dynamic \\\n  --dns-name $dnsNameforLBIP\n\n# Create Network Security Group\naz network nsg create \\\n  --name $nsgName \\\n  --location $location\n\n# Add security rules to the Network Security Group\naz network nsg rule create \\\n  --nsg-name $nsgName \\\n  --name ssh-rule \\\n  --priority 100 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 22 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --description "Allow SSH"\n\naz network nsg rule create \\\n  --nsg-name $nsgName \\\n  --name web-rule \\\n  --priority 101 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 8080 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --description "Allow WEB"\n\n# Create Virtual Network and Subnet\naz network vnet create \\\n  --name $vnetName \\\n  --location $location \\\n  --address-prefixes 10.0.0.0/16 \\\n  --subnet-name $subnetName \\\n  --subnet-prefix 10.0.0.0/24 \\\n  --network-security-group $nsgName\n\n# Create Load Balancer\naz network lb create \\\n  --name $lbName \\\n  --location $location \\\n  --frontend-ip-name LoadBalancerFrontEnd \\\n  --public-ip-address $publicIPAddressName \\\n  --backend-pool-name $lbPoolName\n\n# Create Load Balancer Probe\naz network lb probe create \\\n  --lb-name $lbName \\\n  --name $lbProbeName \\\n  --protocol Tcp \\\n  --port 8080 \\\n  --interval 5 \\\n  --count 2\n\n# Create Load Balancer Rule\naz network lb rule create \\\n  --lb-name $lbName \\\n  --name LBRule \\\n  --protocol Tcp \\\n  --frontend-port 80 \\\n  --backend-port 8080 \\\n  --frontend-ip-name LoadBalancerFrontEnd \\\n  --backend-pool-name $lbPoolName \\\n  --probe-name $lbProbeName \\\n  --idle-timeout 5\n\n# Loop to create NAT rules, network interfaces, and virtual machines\nfor ((i=0; i<numberOfInstances; i++)); do\n  # Create inbound NAT rules for SSH and Admin\n  sshNatRuleName="ssh-${namePrefix}${i}"\n  adminNatRuleName="admin-${namePrefix}${i}"\n  sshFrontendPort=$((5000 + i))\n  adminFrontendPort=$((4800 + i))\n\n  az network lb inbound-nat-rule create \\\n    --lb-name $lbName \\\n    --name $sshNatRuleName \\\n    --protocol Tcp \\\n    --frontend-port $sshFrontendPort \\\n    --backend-port 22 \\\n    --frontend-ip-name LoadBalancerFrontEnd\n\n  az network lb inbound-nat-rule create \\\n    --lb-name $lbName \\\n    --name $adminNatRuleName \\\n    --protocol Tcp \\\n    --frontend-port $adminFrontendPort \\\n    --backend-port 4848 \\\n    --frontend-ip-name LoadBalancerFrontEnd\n\n  # Create Network Interface\n  nicName="${namePrefix}nic-${i}"\n  az network nic create \\\n    --name $nicName \\\n    --location $location \\\n    --vnet-name $vnetName \\\n    --subnet $subnetName \\\n    --lb-name $lbName \\\n    --lb-address-pools $lbPoolName \\\n    --lb-inbound-nat-rules $sshNatRuleName $adminNatRuleName\n\n  # Create Virtual Machine\n  vmName="${namePrefix}vm-${i}"\n  az vm create \\\n    --name $vmName \\\n    --location $location \\\n    --nics $nicName \\\n    --availability-set $availabilitySetName \\\n    --size $vmSize \\\n    --image SUSE:openSUSE-Leap:15-2:latest \\\n    --admin-username $adminUsername \\\n    --ssh-key-values $sshPublicKey \\\n    --no-wait\n\ndone\n\n# Deploy nested template for GlassFish\naz deployment group create \\\n  --name GlassFishDeployment \\\n  --resource-group $(az group list --query "[?name==\'$namePrefix*\'].name" -o tsv) \\\n  --template-uri $nestedTemplateUrl \\\n  --parameters _artifactsLocation=$artifactsLocation _artifactsLocationSasToken=$artifactsLocationSasToken vmPrefix="${namePrefix}vm-" numberOfInstances=$numberOfInstances glassfishVersion=$glassfishVersion glassfishRelease=$glassfishRelease glassfishAdminPassword=$glassfishAdminPassword\n```\n\nPlease note that:\n\n1. I\'ve assumed the default values for the parameters that have "zytest" as the default value should be replaced with valid values within the allowed ranges or sets.\n2. The script does not include the creation of a nested template deployment since it\'s not possible to provide the nested template content.\n3. The `storageAccountName` is retrieved from the existing storage accounts that contain the prefix. If none exists, you\'ll need to create one with a unique name.\n4. The `location` parameter is used for all resources, but you can modify it if different resources need to be created in different locations.\n5. The `--no-wait` flag is used in the `az vm create` command to allow the script to continue without waiting for the VM deployment to complete, as the nested deployment depends on the completion of the VMs. You may want to handle this differently depending on your deployment requirements.\n6. The script assumes that the resource group already exists and retrieves its name based on the prefix. You may need to adjust this according to your setup.\n7. The script doesn\'t handle the output of the LoadBalancedApplicationServerURL, as it\'s not clear how you want to use this output in the CLI context. You can retrieve it after the deployment if needed.\n\nPlease review and adjust the script as necessary to fit your exact requirements and environment.


verify_result
