arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"dnsLabelPrefix": {"type": "string", "metadata": {"description": "Unique DNS Name for the Storage Account where the Virtual Machine\'s disks will be placed."}, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "Username for the Virtual Machine."}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "Password for the Virtual Machine."}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "metadata": {"description": "Size of VM"}, "defaultValue": "zytest"}, "sizeOfEachDataDiskInGB": {"type": "string", "metadata": {"description": "Size of each data disk in GB"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"storageAccountName": "[concat(uniquestring(resourceGroup().id), \'saddiskvm\')]", "addressPrefix": "10.0.0.0/16", "subnet1Name": "Subnet-1", "subnet1Prefix": "10.0.0.0/24", "imagePublisher": "MicrosoftWindowsServer", "imageOffer": "WindowsServer", "imageSKU": "2019-Datacenter", "imageVersion": "latest", "publicIPAddressName": "myPublicIP", "publicIPAddressType": "Dynamic", "storageAccountType": "Standard_LRS", "virtualNetworkName": "myVNET", "vmName": "myVM", "nicName": "myNIC", "subnet1Ref": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnet1Name\'))]", "networkSecurityGroupName": "default-NSG"}, "resources": [{"type": "Microsoft.Storage/storageAccounts", "name": "[variables(\'storageAccountName\')]", "apiVersion": "2021-02-01", "location": "[parameters(\'location\')]", "sku": {"name": "[variables(\'storageAccountType\')]"}, "kind": "StorageV2"}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"comments": "Default Network Security Group for template", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-05-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnet1Name\')]", "properties": {"addressPrefix": "[variables(\'subnet1Prefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2020-07-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[variables(\'vmName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts/\', variables(\'storageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', variables(\'nicName\'))]"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[variables(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "[variables(\'imagePublisher\')]", "offer": "[variables(\'imageOffer\')]", "sku": "[variables(\'imageSKU\')]", "version": "[variables(\'imageVersion\')]"}, "dataDisks": [{"diskSizeGB": "[parameters(\'sizeOfEachDataDiskInGB\')]", "lun": 0, "createOption": "Empty"}, {"diskSizeGB": "[parameters(\'sizeOfEachDataDiskInGB\')]", "lun": 1, "createOption": "Empty"}, {"diskSizeGB": "[parameters(\'sizeOfEachDataDiskInGB\')]", "lun": 2, "createOption": "Empty"}, {"diskSizeGB": "[parameters(\'sizeOfEachDataDiskInGB\')]", "lun": 3, "createOption": "Empty"}], "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',variables(\'nicName\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(variables(\'storageAccountName\'), \'2019-06-01\').primaryEndpoints[\'blob\']]"}}}}]}


cli_script
Here is the equivalent Azure CLI script based on the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Parameters\ndnsLabelPrefix="zytest"\nadminUsername="zytest"\nadminPassword="zytest" # Note: In a real script, you should handle secure strings appropriately\nvmSize="zytest"\nsizeOfEachDataDiskInGB="zytest"\nlocation="westus"\n\n# Variables (some variables are expressions in ARM template, which need to be handled separately)\nstorageAccountName=$(az storage account list --query "[?contains(name,\'saddiskvm\')].name | [0]" --output tsv)\naddressPrefix="10.0.0.0/16"\nsubnet1Name="Subnet-1"\nsubnet1Prefix="10.0.0.0/24"\nimagePublisher="MicrosoftWindowsServer"\nimageOffer="WindowsServer"\nimageSKU="2019-Datacenter"\nimageVersion="latest"\npublicIPAddressName="myPublicIP"\npublicIPAddressType="Dynamic"\nstorageAccountType="Standard_LRS"\nvirtualNetworkName="myVNET"\nvmName="myVM"\nnicName="myNIC"\nnetworkSecurityGroupName="default-NSG"\n\n# Create Storage Account\naz storage account create \\\n    --name $storageAccountName \\\n    --location $location \\\n    --sku $storageAccountType \\\n    --kind StorageV2\n\n# Create Public IP Address\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --location $location \\\n    --allocation-method $publicIPAddressType \\\n    --dns-name $dnsLabelPrefix\n\n# Create Network Security Group\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --location $location\n\n# Create default security rule\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --name default-allow-3389 \\\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --destination-port-ranges 3389 \\\n    --protocol Tcp \\\n    --source-address-prefix \'*\' \\\n    --source-port-range \'*\' \\\n    --destination-address-prefix \'*\'\n\n# Create Virtual Network\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --location $location \\\n    --address-prefix $addressPrefix \\\n    --subnet-name $subnet1Name \\\n    --subnet-prefix $subnet1Prefix \\\n    --network-security-group $networkSecurityGroupName\n\n# Create Network Interface\naz network nic create \\\n    --name $nicName \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnet1Name \\\n    --public-ip-address $publicIPAddressName\n\n# Get Subnet ID\nsubnet1Ref=$(az network vnet subnet show --vnet-name $virtualNetworkName --name $subnet1Name --query id --output tsv)\n\n# Create Virtual Machine\naz vm create \\\n    --name $vmName \\\n    --location $location \\\n    --nics $nicName \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --image $imagePublisher:$imageOffer:$imageSKU:$imageVersion \\\n    --storage-sku $storageAccountType \\\n    --os-disk-size-gb $sizeOfEachDataDiskInGB \\\n    --data-disk-sizes-gb $sizeOfEachDataDiskInGB $sizeOfEachDataDiskInGB $sizeOfEachDataDiskInGB $sizeOfEachDataDiskInGB\n\n# Enable Boot Diagnostics\naz vm boot-diagnostics enable \\\n    --name $vmName \\\n    --storage $storageAccountName\n```\n\nPlease note that this script assumes that the storage account name is already known and is retrieved using the `az storage account list` command. In a real-world scenario, you might need to generate a unique storage account name or handle the creation logic differently. Additionally, the admin password is handled as a plain text variable, which is not secure. In practice, you should use secure methods to handle passwords and other sensitive information.


verify_result
