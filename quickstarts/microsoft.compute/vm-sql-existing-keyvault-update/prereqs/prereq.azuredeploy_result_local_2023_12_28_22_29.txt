arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"virtualMachineName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Name"}, "defaultValue": "zytest"}, "virtualMachineSize": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Size"}, "defaultValue": "Standard_D2s_v3"}, "adminUsername": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Administrator User Name"}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "SQL Server Virtual Machine Administrator Password"}, "defaultValue": "zytest"}, "virtualNetworkName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Virtual Network Name"}, "defaultValue": "zytest"}, "networkInterfaceName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Network Interface Name"}, "defaultValue": "zytest"}, "networkSecurityGroupName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Network Security Group Name"}, "defaultValue": "zytest"}, "addressPrefix": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "10.0.0.0/16"}, "subnetName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "default"}, "subnetPrefix": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "10.0.0.0/24"}, "publicIpAddressName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Public IP Address Name"}, "defaultValue": "zytest"}, "publicIpAddressType": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Public IP Address Type"}, "defaultValue": "Dynamic"}, "vaultName": {"type": "string", "defaultValue": "[concat(\'keyvault-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "Specifies the name of the KeyVault, this value must be globally unique."}}, "accessPolicies": {"type": "array", "metadata": {"description": "Access policies of the Key Vault."}, "defaultValue": "zytest"}, "tenantId": {"type": "string", "metadata": {"description": "Tenant ID for the Key Vault."}, "defaultValue": "zytest"}, "storageAccountType": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Storage Account Type"}, "allowedValues": ["Premium_LRS", "StandardSSD_LRS", "Standard_LRS"], "defaultValue": "Premium_LRS"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', parameters(\'virtualNetworkName\'),  parameters(\'subnetName\'))]"}, "resources": [{"name": "vault-prereq", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"accessPolicies": {"value": "[parameters(\'accessPolicies\')]"}, "vaultName": {"value": "[parameters(\'vaultName\')]"}, "location": {"value": "[parameters(\'location\')]"}, "enabledForDeployment": {"value": true}, "enabledForDiskEncryption": {"value": true}, "enabledForTemplateDeployment": {"value": true}, "tenantId": {"value": "[parameters(\'tenantId\')]"}}}}, {"name": "[parameters(\'virtualMachineName\')]", "type": "Microsoft.Compute/virtualMachines", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', parameters(\'networkInterfaceName\'))]"], "properties": {"osProfile": {"computerName": "[parameters(\'virtualMachineName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]", "windowsConfiguration": {"provisionVmAgent": true}}, "hardwareProfile": {"vmSize": "[parameters(\'virtualMachineSize\')]"}, "storageProfile": {"imageReference": {"publisher": "MicrosoftSQLServer", "offer": "sql2014sp3-ws2012r2", "sku": "Enterprise", "version": "latest"}, "osDisk": {"name": "[concat(parameters(\'virtualMachineName\'), \'_OSDisk\')]", "createOption": "FromImage", "managedDisk": {"storageAccountType": "[parameters(\'storageAccountType\')]"}}, "dataDisks": [{"name": "[concat(parameters(\'virtualMachineName\'), \'_DataDisk-1\')]", "createOption": "Empty", "lun": 0, "diskSizeGB": 1023, "caching": "ReadOnly"}, {"name": "[concat(parameters(\'virtualMachineName\'), \'_DataDisk-2\')]", "createOption": "Empty", "lun": 1, "diskSizeGB": 1023, "caching": "ReadOnly"}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', parameters(\'networkInterfaceName\'))]"}]}}}, {"name": "[parameters(\'virtualNetworkName\')]", "type": "Microsoft.Network/virtualNetworks", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[parameters(\'addressPrefix\')]"]}, "subnets": [{"name": "[parameters(\'subnetName\')]", "properties": {"addressPrefix": "[parameters(\'subnetPrefix\')]"}}]}}, {"name": "[parameters(\'networkInterfaceName\')]", "type": "Microsoft.Network/networkInterfaces", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/virtualNetworks\', parameters(\'virtualNetworkName\'))]", "[resourceId(\'Microsoft.Network/publicIpAddresses\', parameters(\'publicIpAddressName\'))]", "[resourceId(\'Microsoft.Network/networkSecurityGroups\', parameters(\'networkSecurityGroupName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"subnet": {"id": "[variables(\'subnetRef\')]"}, "privateIPAllocationMethod": "Dynamic", "publicIpAddress": {"id": "[resourceId(\'Microsoft.Network/publicIpAddresses\', parameters(\'publicIpAddressName\'))]"}}}], "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', parameters(\'networkSecurityGroupName\'))]"}}}, {"name": "[parameters(\'publicIpAddressName\')]", "type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "sku": {"name": "Basic"}, "properties": {"publicIPAllocationMethod": "[parameters(\'publicIpAddressType\')]"}}, {"name": "[parameters(\'networkSecurityGroupName\')]", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-rdp", "properties": {"priority": 1000, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "3389", "access": "Allow", "direction": "inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}, {"name": "default-allow-sql", "properties": {"priority": 1500, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "1433", "access": "Allow", "direction": "inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}], "outputs": {"vmName": {"type": "string", "value": "[parameters(\'virtualMachineName\')]"}, "outKeyVaultName": {"type": "string", "value": "[parameters(\'vaultName\')]"}, "outKeyVaultResourceGroupName": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
```bash\n#!/bin/bash\n\n# Declare template parameters as variables\nvirtualMachineName="zytest"\nvirtualMachineSize="Standard_D2s_v3"\nadminUsername="zytest"\nadminPassword="zytest"\nvirtualNetworkName="zytest"\nnetworkInterfaceName="zytest"\nnetworkSecurityGroupName="zytest"\naddressPrefix="10.0.0.0/16"\nsubnetName="default"\nsubnetPrefix="10.0.0.0/24"\npublicIpAddressName="zytest"\npublicIpAddressType="Dynamic"\n# vaultName is a unique name based on the resource group ID, we\'ll generate it later in the script\naccessPolicies="zytest" # Default value is not an array, needs to be updated to proper array format if required\ntenantId="zytest"\nstorageAccountType="Premium_LRS"\nlocation="westus"\n\n# Generating a unique vault name based on the resource group ID\nresourceGroupName=$(az group show --name $virtualNetworkName --query name -o tsv)\nvaultName=$(az keyvault list --query "[?contains(name, \'keyvault-\')].name | [0]" -o tsv)\nif [ -z "$vaultName" ]; then\n  vaultName="keyvault-$(az group show --name $resourceGroupName --query id -o tsv | shasum | head -c 7)"\nfi\n\n# Deploy Key Vault using ARM template\naz deployment group create \\\n  --name vault-prereq \\\n  --resource-group $resourceGroupName \\\n  --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json" \\\n  --parameters accessPolicies=$accessPolicies vaultName=$vaultName location=$location enabledForDeployment=true enabledForDiskEncryption=true enabledForTemplateDeployment=true tenantId=$tenantId\n\n# Deploy Virtual Network\naz network vnet create \\\n  --name $virtualNetworkName \\\n  --resource-group $resourceGroupName \\\n  --location $location \\\n  --address-prefix $addressPrefix \\\n  --subnet-name $subnetName \\\n  --subnet-prefix $subnetPrefix\n\n# Deploy Public IP Address\naz network public-ip create \\\n  --name $publicIpAddressName \\\n  --resource-group $resourceGroupName \\\n  --location $location \\\n  --allocation-method $publicIpAddressType \\\n  --sku Basic\n\n# Deploy Network Security Group and rules\naz network nsg create \\\n  --name $networkSecurityGroupName \\\n  --resource-group $resourceGroupName \\\n  --location $location\n\naz network nsg rule create \\\n  --name default-allow-rdp \\\n  --nsg-name $networkSecurityGroupName \\\n  --resource-group $resourceGroupName \\\n  --priority 1000 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 3389 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --direction Inbound\n\naz network nsg rule create \\\n  --name default-allow-sql \\\n  --nsg-name $networkSecurityGroupName \\\n  --resource-group $resourceGroupName \\\n  --priority 1500 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 1433 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --direction Inbound\n\n# Get the subnet ID\nsubnetId=$(az network vnet subnet show --name $subnetName --vnet-name $virtualNetworkName --resource-group $resourceGroupName --query id -o tsv)\n\n# Deploy Network Interface\naz network nic create \\\n  --name $networkInterfaceName \\\n  --resource-group $resourceGroupName \\\n  --location $location \\\n  --subnet $subnetId \\\n  --public-ip-address $publicIpAddressName \\\n  --network-security-group $networkSecurityGroupName\n\n# Get the NIC ID\nnicId=$(az network nic show --name $networkInterfaceName --resource-group $resourceGroupName --query id -o tsv)\n\n# Deploy Virtual Machine\naz vm create \\\n  --name $virtualMachineName \\\n  --resource-group $resourceGroupName \\\n  --location $location \\\n  --nics $nicId \\\n  --admin-username $adminUsername \\\n  --admin-password $adminPassword \\\n  --size $virtualMachineSize \\\n  --image MicrosoftSQLServer:sql2014sp3-ws2012r2:Enterprise:latest \\\n  --storage-sku $storageAccountType \\\n  --os-disk-name "${virtualMachineName}_OSDisk" \\\n  --data-disk-sizes-gb 1023 1023 \\\n  --data-disk-caching ReadOnly ReadOnly\n\n# Outputs\necho "VM Name: $virtualMachineName"\necho "Key Vault Name: $vaultName"\necho "Key Vault Resource Group Name: $resourceGroupName"\n```\n\nPlease note that for the `accessPolicies` parameter, the default value provided is not an array, which is the expected type. You would need to update the script with the actual array of access policies for the Key Vault. Additionally, the script assumes that the resource group already exists and retrieves its name to generate a unique vault name. If the resource group does not exist, you will need to create it before running this script.


verify_result
