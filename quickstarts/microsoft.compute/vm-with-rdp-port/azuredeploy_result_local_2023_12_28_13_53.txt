arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"dnsLabelPrefix": {"type": "string", "metadata": {"description": "Unique public DNS prefix for the deployment. The fqdn will look something like \'<dnsname>.westus.cloudapp.azure.com\'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to \'^[a-z][a-z0-9-]{1,61}[a-z0-9]$\'."}, "defaultValue": "zytest"}, "vmName": {"type": "string", "defaultValue": "vm", "metadata": {"description": "The name of the VM"}}, "adminUsername": {"type": "string", "defaultValue": "azureUser", "metadata": {"description": "The name of the administrator of the new VM. Exclusion list: \'admin\',\'administrator\'"}}, "adminPassword": {"type": "securestring", "metadata": {"description": "The password for the administrator account of the new VM"}, "defaultValue": "zytest"}, "rdpPort": {"type": "int", "defaultValue": 50001, "metadata": {"description": "Public port number for RDP"}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of the virtual machine"}}}, "variables": {"storageAccountName": "[concat(uniquestring(resourceGroup().id), \'sardpvm\')]", "virtualNetworkName": "rdpVNET", "vnetAddressRange": "10.0.0.0/16", "subnetAddressRange": "10.0.0.0/24", "subnetName": "Subnet", "subnet-id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]", "imagePublisher": "MicrosoftWindowsServer", "imageOffer": "WindowsServer", "imageSku": "2019-Datacenter", "networkSecurityGroupName": "Subnet-nsg"}, "resources": [{"apiVersion": "2020-05-01", "type": "Microsoft.Network/publicIPAddresses", "name": "publicIp", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[parameters(\'dnsLabelPrefix\')]"}}}, {"apiVersion": "2020-08-01-preview", "type": "Microsoft.Storage/storageAccounts", "name": "[variables(\'storageAccountName\')]", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "StorageV2"}, {"comments": "Simple Network Security Group for subnet [Subnet]", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2019-08-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'vnetAddressRange\')]"]}, "subnets": [{"name": "Subnet", "properties": {"addressPrefix": "[variables(\'subnetAddressRange\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2020-05-01", "name": "loadBalancer", "type": "Microsoft.Network/loadBalancers", "location": "[parameters(\'location\')]", "dependsOn": ["Microsoft.Network/publicIPAddresses/publicIp"], "properties": {"frontendIPConfigurations": [{"name": "LBFE", "properties": {"publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIp\')]"}}}], "backendAddressPools": [{"name": "LBBAP"}], "inboundNatRules": [{"name": "rdp", "properties": {"frontendIPConfiguration": {"id": "[resourceId(\'Microsoft.Network/loadBalancers/frontendIPConfigurations\', \'loadBalancer\', \'LBFE\')]"}, "protocol": "Tcp", "frontendPort": "[parameters(\'rdpPort\')]", "backendPort": 3389, "enableFloatingIP": false}}]}}, {"apiVersion": "2020-05-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(parameters(\'vmName\'),\'-nic\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]", "Microsoft.Network/loadBalancers/loadBalancer"], "properties": {"ipConfigurations": [{"name": "ipconfig", "properties": {"privateIPAllocationMethod": "Dynamic", "subnet": {"id": "[variables(\'subnet-id\')]"}, "loadBalancerBackendAddressPools": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/backendAddressPools\', \'loadBalancer\', \'LBBAP\')]"}], "loadBalancerInboundNatRules": [{"id": "[resourceId(\'Microsoft.Network/loadBalancers/inboundNatRules\', \'loadBalancer\', \'rdp\')]"}]}}]}}, {"apiVersion": "2020-06-01", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts\', variables(\'storageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(parameters(\'vmName\'), \'-nic\'))]"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "[variables(\'imagePublisher\')]", "offer": "[variables(\'imageOffer\')]", "sku": "[variables(\'imageSku\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',concat(parameters(\'vmName\'),\'-nic\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(variables(\'storageAccountName\'), \'2020-08-01-preview\').primaryEndpoints.blob]"}}}}]}


cli_script
Based on the provided ARM template and template parameters, here is the equivalent Azure CLI script translated to bash:\n\n```bash\n#!/bin/bash\n\n# Template Parameters\ndnsLabelPrefix="zytest"\nvmName="vm"\nadminUsername="azureUser"\nadminPassword="zytest"\nrdpPort=50001\nlocation="westus"\nvmSize="Standard_D2s_v3"\n\n# Variables (ARM template variables are not directly translatable to CLI variables. They need to be calculated or set manually.)\n# For example, storageAccountName would be a unique string based on the resource group id. This needs to be handled in the CLI script.\nstorageAccountName="<unique_storage_account_name>" # Replace with actual unique name\nvirtualNetworkName="rdpVNET"\nvnetAddressRange="10.0.0.0/16"\nsubnetAddressRange="10.0.0.0/24"\nsubnetName="Subnet"\nnetworkSecurityGroupName="Subnet-nsg"\nimagePublisher="MicrosoftWindowsServer"\nimageOffer="WindowsServer"\nimageSku="2019-Datacenter"\n\n# Create a public IP address\naz network public-ip create \\\n    --name publicIp \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --allocation-method Dynamic \\\n    --dns-name $dnsLabelPrefix\n\n# Create a storage account\naz storage account create \\\n    --name $storageAccountName \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --sku Standard_LRS \\\n    --kind StorageV2\n\n# Create a network security group\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location\n\n# Create a security rule for the network security group\naz network nsg rule create \\\n    --name default-allow-3389 \\\n    --nsg-name $networkSecurityGroupName \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --destination-port-ranges 3389 \\\n    --protocol Tcp \\\n    --source-address-prefix "*" \\\n    --source-port-range "*"\n\n# Create a virtual network\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --address-prefix $vnetAddressRange \\\n    --subnet-name $subnetName \\\n    --subnet-prefix $subnetAddressRange \\\n    --network-security-group $networkSecurityGroupName\n\n# Create a load balancer\naz network lb create \\\n    --name loadBalancer \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --frontend-ip-name LBFE \\\n    --public-ip-address publicIp \\\n    --backend-pool-name LBBAP\n\n# Create an inbound NAT rule for the load balancer\naz network lb inbound-nat-rule create \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --lb-name loadBalancer \\\n    --name rdp \\\n    --protocol Tcp \\\n    --frontend-port $rdpPort \\\n    --backend-port 3389 \\\n    --frontend-ip-name LBFE\n\n# Create a network interface\naz network nic create \\\n    --name "${vmName}-nic" \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnetName \\\n    --lb-name loadBalancer \\\n    --lb-address-pools LBBAP \\\n    --lb-inbound-nat-rules rdp\n\n# Create a virtual machine\naz vm create \\\n    --name $vmName \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --location $location \\\n    --nics "${vmName}-nic" \\\n    --image $imagePublisher:$imageOffer:$imageSku:latest \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --storage-sku Standard_LRS\n\n# Enable boot diagnostics\nstorageUri=$(az storage account show --name $storageAccountName --query "primaryEndpoints.blob" --output tsv)\naz vm boot-diagnostics enable \\\n    --resource-group <ResourceGroupName> \\ # Replace with actual resource group name\n    --name $vmName \\\n    --storage $storageUri\n```\n\nMake sure to replace `<ResourceGroupName>` with the actual name of the resource group you are deploying to and `<unique_storage_account_name>` with a unique storage account name. The storage account name must be globally unique and adhere to Azure naming requirements.\n\nPlease note that the ARM template variable `storageAccountName` uses a function `uniquestring` which generates a unique string based on the resource group\'s ID. In the CLI script, you will need to generate or choose a unique name for the storage account manually.


verify_result
