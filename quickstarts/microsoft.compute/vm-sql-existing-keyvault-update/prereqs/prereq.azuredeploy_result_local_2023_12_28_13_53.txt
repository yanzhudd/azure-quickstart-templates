arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"virtualMachineName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Name"}, "defaultValue": "zytest"}, "virtualMachineSize": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Size"}, "defaultValue": "Standard_D2s_v3"}, "adminUsername": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Administrator User Name"}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "SQL Server Virtual Machine Administrator Password"}, "defaultValue": "zytest"}, "virtualNetworkName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Virtual Network Name"}, "defaultValue": "zytest"}, "networkInterfaceName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Network Interface Name"}, "defaultValue": "zytest"}, "networkSecurityGroupName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Network Security Group Name"}, "defaultValue": "zytest"}, "addressPrefix": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "10.0.0.0/16"}, "subnetName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "default"}, "subnetPrefix": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Subnet Name"}, "defaultValue": "10.0.0.0/24"}, "publicIpAddressName": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Public IP Address Name"}, "defaultValue": "zytest"}, "publicIpAddressType": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Public IP Address Type"}, "defaultValue": "Dynamic"}, "vaultName": {"type": "string", "defaultValue": "[concat(\'keyvault-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "Specifies the name of the KeyVault, this value must be globally unique."}}, "accessPolicies": {"type": "array", "metadata": {"description": "Access policies of the Key Vault."}, "defaultValue": "zytest"}, "tenantId": {"type": "string", "metadata": {"description": "Tenant ID for the Key Vault."}, "defaultValue": "zytest"}, "storageAccountType": {"type": "string", "metadata": {"description": "SQL Server Virtual Machine Storage Account Type"}, "allowedValues": ["Premium_LRS", "StandardSSD_LRS", "Standard_LRS"], "defaultValue": "Premium_LRS"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', parameters(\'virtualNetworkName\'),  parameters(\'subnetName\'))]"}, "resources": [{"name": "vault-prereq", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"accessPolicies": {"value": "[parameters(\'accessPolicies\')]"}, "vaultName": {"value": "[parameters(\'vaultName\')]"}, "location": {"value": "[parameters(\'location\')]"}, "enabledForDeployment": {"value": true}, "enabledForDiskEncryption": {"value": true}, "enabledForTemplateDeployment": {"value": true}, "tenantId": {"value": "[parameters(\'tenantId\')]"}}}}, {"name": "[parameters(\'virtualMachineName\')]", "type": "Microsoft.Compute/virtualMachines", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', parameters(\'networkInterfaceName\'))]"], "properties": {"osProfile": {"computerName": "[parameters(\'virtualMachineName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]", "windowsConfiguration": {"provisionVmAgent": true}}, "hardwareProfile": {"vmSize": "[parameters(\'virtualMachineSize\')]"}, "storageProfile": {"imageReference": {"publisher": "MicrosoftSQLServer", "offer": "sql2014sp3-ws2012r2", "sku": "Enterprise", "version": "latest"}, "osDisk": {"name": "[concat(parameters(\'virtualMachineName\'), \'_OSDisk\')]", "createOption": "FromImage", "managedDisk": {"storageAccountType": "[parameters(\'storageAccountType\')]"}}, "dataDisks": [{"name": "[concat(parameters(\'virtualMachineName\'), \'_DataDisk-1\')]", "createOption": "Empty", "lun": 0, "diskSizeGB": 1023, "caching": "ReadOnly"}, {"name": "[concat(parameters(\'virtualMachineName\'), \'_DataDisk-2\')]", "createOption": "Empty", "lun": 1, "diskSizeGB": 1023, "caching": "ReadOnly"}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', parameters(\'networkInterfaceName\'))]"}]}}}, {"name": "[parameters(\'virtualNetworkName\')]", "type": "Microsoft.Network/virtualNetworks", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[parameters(\'addressPrefix\')]"]}, "subnets": [{"name": "[parameters(\'subnetName\')]", "properties": {"addressPrefix": "[parameters(\'subnetPrefix\')]"}}]}}, {"name": "[parameters(\'networkInterfaceName\')]", "type": "Microsoft.Network/networkInterfaces", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/virtualNetworks\', parameters(\'virtualNetworkName\'))]", "[resourceId(\'Microsoft.Network/publicIpAddresses\', parameters(\'publicIpAddressName\'))]", "[resourceId(\'Microsoft.Network/networkSecurityGroups\', parameters(\'networkSecurityGroupName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"subnet": {"id": "[variables(\'subnetRef\')]"}, "privateIPAllocationMethod": "Dynamic", "publicIpAddress": {"id": "[resourceId(\'Microsoft.Network/publicIpAddresses\', parameters(\'publicIpAddressName\'))]"}}}], "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', parameters(\'networkSecurityGroupName\'))]"}}}, {"name": "[parameters(\'publicIpAddressName\')]", "type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "sku": {"name": "Basic"}, "properties": {"publicIPAllocationMethod": "[parameters(\'publicIpAddressType\')]"}}, {"name": "[parameters(\'networkSecurityGroupName\')]", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-11-01", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-rdp", "properties": {"priority": 1000, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "3389", "access": "Allow", "direction": "inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}, {"name": "default-allow-sql", "properties": {"priority": 1500, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "1433", "access": "Allow", "direction": "inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}], "outputs": {"vmName": {"type": "string", "value": "[parameters(\'virtualMachineName\')]"}, "outKeyVaultName": {"type": "string", "value": "[parameters(\'vaultName\')]"}, "outKeyVaultResourceGroupName": {"type": "string", "value": "[resourceGroup().name]"}}}


cli_script
```bash\n#!/bin/bash\n\n# Assigning parameter values to variables\nvirtualMachineName="zytest"\nvirtualMachineSize="Standard_D2s_v3"\nadminUsername="zytest"\nadminPassword="zytest"\nvirtualNetworkName="zytest"\nnetworkInterfaceName="zytest"\nnetworkSecurityGroupName="zytest"\naddressPrefix="10.0.0.0/16"\nsubnetName="default"\nsubnetPrefix="10.0.0.0/24"\npublicIpAddressName="zytest"\npublicIpAddressType="Dynamic"\n# vaultName is a calculated value, not directly provided\ntenantId="zytest"\nstorageAccountType="Premium_LRS"\nlocation="westus"\n\n# Since accessPolicies is an array, we need to handle each object separately.\n# But as the default value is a string and not an array of objects, we cannot proceed.\n# If it were an array of objects, each object would be handled as shown in the commented example below.\n# accessPolicy1ObjectId="object-id-1"\n# accessPolicy1Permissions="permissions-for-object-id-1"\n# accessPolicy2ObjectId="object-id-2"\n# accessPolicy2Permissions="permissions-for-object-id-2"\n# ...\n\n# Deploying resources using Azure CLI commands\n\n# 1. Deploy Key Vault using an ARM template\n# Note: This step assumes that the ARM template is publicly accessible and valid.\n# The Azure CLI does not support direct deployment from a remote template file, so the template must be downloaded first.\n# For simplicity, we will show a placeholder for this step.\necho "Deploying Key Vault from an ARM template..."\n# az deployment group create --resource-group <resource-group-name> --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/Microsoft.KeyVault/vaults/1.0/azuredeploy.json" --parameters @<path-to-parameters-file>\n\n# 2. Create Virtual Network\necho "Creating Virtual Network..."\naz network vnet create \\\n  --name $virtualNetworkName \\\n  --resource-group <resource-group-name> \\\n  --location $location \\\n  --address-prefix $addressPrefix \\\n  --subnet-name $subnetName \\\n  --subnet-prefix $subnetPrefix\n\n# 3. Create Public IP Address\necho "Creating Public IP Address..."\naz network public-ip create \\\n  --name $publicIpAddressName \\\n  --resource-group <resource-group-name> \\\n  --location $location \\\n  --allocation-method $publicIpAddressType \\\n  --sku Basic\n\n# 4. Create Network Security Group and Rules\necho "Creating Network Security Group and Rules..."\naz network nsg create \\\n  --name $networkSecurityGroupName \\\n  --resource-group <resource-group-name> \\\n  --location $location\n\necho "Creating Security Rule for RDP..."\naz network nsg rule create \\\n  --nsg-name $networkSecurityGroupName \\\n  --resource-group <resource-group-name> \\\n  --name default-allow-rdp \\\n  --priority 1000 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 3389 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --direction Inbound\n\necho "Creating Security Rule for SQL..."\naz network nsg rule create \\\n  --nsg-name $networkSecurityGroupName \\\n  --resource-group <resource-group-name> \\\n  --name default-allow-sql \\\n  --priority 1500 \\\n  --source-address-prefixes \'*\' \\\n  --destination-port-ranges 1433 \\\n  --access Allow \\\n  --protocol Tcp \\\n  --direction Inbound\n\n# 5. Create Network Interface\necho "Creating Network Interface..."\naz network nic create \\\n  --name $networkInterfaceName \\\n  --resource-group <resource-group-name> \\\n  --location $location \\\n  --vnet-name $virtualNetworkName \\\n  --subnet $subnetName \\\n  --public-ip-address $publicIpAddressName \\\n  --network-security-group $networkSecurityGroupName\n\n# 6. Create Virtual Machine\necho "Creating Virtual Machine..."\naz vm create \\\n  --name $virtualMachineName \\\n  --resource-group <resource-group-name> \\\n  --location $location \\\n  --nics $networkInterfaceName \\\n  --image "MicrosoftSQLServer:sql2014sp3-ws2012r2:Enterprise:latest" \\\n  --admin-username $adminUsername \\\n  --admin-password $adminPassword \\\n  --size $virtualMachineSize \\\n  --storage-sku $storageAccountType \\\n  --os-disk-name "${virtualMachineName}_OSDisk" \\\n  --data-disk-sizes-gb 1023 1023 \\\n  --data-disk-caching ReadOnly ReadOnly\n\n# Outputs (The following commands are placeholders to show how one might retrieve outputs)\necho "VM Name: $virtualMachineName"\n# Key Vault name and resource group name would typically be retrieved using Azure CLI commands.\n# However, since the Key Vault deployment was not actually scripted here, we cannot provide those commands.\n```\n\nPlease replace `<resource-group-name>` with the actual name of your resource group and `<path-to-parameters-file>` with the path to your parameters file if you have one. The script assumes the ARM template for the Key Vault is valid and publicly accessible; however, the Azure CLI does not support direct deployment from a remote template file, so additional steps would be required to handle that deployment.


verify_result
