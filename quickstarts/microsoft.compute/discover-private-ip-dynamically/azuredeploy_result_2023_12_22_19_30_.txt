arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"type": "string", "defaultValue": "[deployment().properties.templateLink.uri]", "metadata": {"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."}}, "_artifactsLocationSasToken": {"type": "securestring", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}, "defaultValue": ""}, "scaleNumber": {"type": "int", "defaultValue": 2, "metadata": {"description": "Number of VMs to deploy"}}, "newStorageAccountName": {"type": "string", "metadata": {"description": "Name of new storage account"}, "defaultValue": "zytest"}, "vmName": {"type": "string", "metadata": {"description": "Name of the VM"}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "defaultValue": "Standard_D2_v3", "metadata": {"description": "Size of the VM"}}, "imagePublisher": {"type": "string", "defaultValue": "Canonical", "metadata": {"description": "Image Publisher"}}, "imageOffer": {"type": "string", "defaultValue": "UbuntuServer", "metadata": {"description": "Image Offer"}}, "imageSKU": {"type": "string", "defaultValue": "18.04-LTS", "metadata": {"description": "Image SKU"}}, "adminUsername": {"type": "string", "metadata": {"description": "VM Admin Username"}, "defaultValue": "zytest"}, "customScriptCommandToExecute": {"type": "string", "metadata": {"description": "Command to execute on the VM"}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["sshPublicKey", "password"], "metadata": {"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."}, "defaultValue": "zytest"}}, "variables": {"availabilitySetName": "myAVSet", "publicIPAddressType": "Dynamic", "virtualNetworkName": "myVNET", "addressPrefix": "10.0.0.0/16", "subnet1Name": "Subnet-1", "subnet1Prefix": "10.0.0.0/24", "subnet1Ref": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnet1Name\'))]", "nicName": "myNic", "vmExtensionName": "myCustomScriptExtension", "networkSecurityGroupName": "default-NSG", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}}, "resources": [{"type": "Microsoft.Storage/storageAccounts", "name": "[parameters(\'newStorageAccountName\')]", "apiVersion": "2021-02-01", "location": "[parameters(\'location\')]", "sku": {"name": "Standard_LRS"}, "kind": "Storage"}, {"type": "Microsoft.Compute/availabilitySets", "name": "[variables(\'availabilitySetName\')]", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "properties": {"platformFaultDomainCount": 2, "platformUpdateDomainCount": 2}, "sku": {"name": "Aligned"}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[concat(\'publicIP\', copyIndex())]", "location": "[parameters(\'location\')]", "copy": {"name": "foo", "count": "[parameters(\'scaleNumber\')]"}, "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]"}}, {"comments": "Default Network Security Group for template", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2020-11-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-22", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "22", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/virtualNetworks", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnet1Name\')]", "properties": {"addressPrefix": "[variables(\'subnet1Prefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'nicName\'), 0)]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', \'publicIP0\')]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIP0\')]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[concat(variables(\'nicName\'), 1)]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', \'publicIP1\')]", "[resourceId(\'Microsoft.Network/virtualNetworks/\', variables(\'virtualNetworkName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', \'publicIP1\')]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}}, {"apiVersion": "2020-12-01", "type": "Microsoft.Compute/virtualMachines", "name": "[concat(parameters(\'vmName\'), copyIndex())]", "location": "[parameters(\'location\')]", "copy": {"name": "foo", "count": "[parameters(\'scaleNumber\')]"}, "dependsOn": ["[resourceId(\'Microsoft.Storage/storageAccounts/\', parameters(\'newStorageAccountName\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(variables(\'nicName\'), copyIndex()))]", "[resourceId(\'Microsoft.Compute/availabilitySets/\', variables(\'availabilitySetName\'))]"], "properties": {"availabilitySet": {"id": "[resourceId(\'Microsoft.Compute/availabilitySets\', variables(\'availabilitySetName\'))]"}, "hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[concat(parameters(\'vmName\'), copyIndex())]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "storageProfile": {"imageReference": {"publisher": "[parameters(\'imagePublisher\')]", "offer": "[parameters(\'imageOffer\')]", "sku": "[parameters(\'imageSKU\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', concat(variables(\'nicName\'), copyIndex()))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(parameters(\'newStorageAccountName\'), \'2021-02-01\').primaryEndpoints[\'blob\']]"}}}}, {"type": "Microsoft.Compute/virtualMachines/extensions", "name": "[concat(parameters(\'vmName\'), \'1/\', variables(\'vmExtensionName\'))]", "apiVersion": "2020-12-01", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines/\', concat(parameters(\'vmName\'), \'1\'))]", "[resourceId(\'Microsoft.Network/networkInterfaces/\', concat(variables(\'nicName\'), \'0\'))]"], "properties": {"publisher": "Microsoft.Azure.Extensions", "type": "CustomScript", "typeHandlerVersion": "2.0", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[uri(parameters(\'_artifactsLocation\'), concat(\'privateip.sh\', parameters(\'_artifactsLocationSasToken\')))]"], "commandToExecute": "[concat(parameters(\'customScriptCommandToExecute\'), reference(resourceId(\'Microsoft.Network/networkInterfaces\', concat(variables(\'nicName\'), \'0\'))).ipConfigurations[0].properties.privateIPAddress)]"}}}]}


cli_script
Here is the equivalent CLI script:\n\n```bash\n#!/bin/bash\n\n# Define parameters\n_artifactsLocation="[deployment().properties.templateLink.uri]"\n_artifactsLocationSasToken=""\nscaleNumber=2\nnewStorageAccountName="zytest"\nvmName="zytest"\nvmSize="Standard_D2_v3"\nimagePublisher="Canonical"\nimageOffer="UbuntuServer"\nimageSKU="18.04-LTS"\nadminUsername="zytest"\ncustomScriptCommandToExecute="zytest"\nlocation="westus"\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\n\n# Create storage account\naz storage account create --name $newStorageAccountName --location $location --kind Storage --sku Standard_LRS\n\n# Create availability set\naz vm availability-set create --name myAVSet --location $location --platform-fault-domain-count 2 --platform-update-domain-count 2 --sku Aligned\n\n# Create public IP addresses\nfor i in $(seq 1 $scaleNumber)\ndo\n  az network public-ip create --name publicIP$i --location $location --allocation-method Dynamic\ndone\n\n# Create network security group\naz network nsg create --name default-NSG --location $location\naz network nsg rule create --nsg-name default-NSG --name default-allow-22 --priority 1000 --access Allow --direction Inbound --destination-port-range 22 --protocol Tcp --source-address-prefix \'*\' --source-port-range \'*\' --destination-address-prefix \'*\'\n\n# Create virtual network\naz network vnet create --name myVNET --location $location --address-prefix 10.0.0.0/16\naz network vnet subnet create --name Subnet-1 --vnet-name myVNET --address-prefix 10.0.0.0/24 --network-security-group default-NSG\n\n# Create network interfaces\nfor i in $(seq 1 $scaleNumber)\ndo\n  az network nic create --name myNic$i --location $location --vnet-name myVNET --subnet Subnet-1 --public-ip-address publicIP$i\ndone\n\n# Create virtual machines\nfor i in $(seq 1 $scaleNumber)\ndo\n  az vm create --name $vmName$i --location $location --availability-set myAVSet --size $vmSize --image $imagePublisher:$imageOffer:$imageSKU:latest --admin-username $adminUsername --admin-password $adminPasswordOrKey --authentication-type $authenticationType --nics myNic$i --storage-account $newStorageAccountName\ndone\n\n# Create VM extension\naz vm extension set --publisher Microsoft.Azure.Extensions --version 2.0 --name myCustomScriptExtension --vm-name $vmName --settings \'{"fileUris": ["\'$_artifactsLocation\'"], "commandToExecute": "\'$customScriptCommandToExecute\'"}\'\n```\n\nPlease replace the placeholder values with your actual values before running the script.


verify_result
