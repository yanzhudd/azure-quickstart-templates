arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.5.6.12127", "templateHash": "17229980841212366235"}}, "parameters": {"virtualMachineName": {"type": "string", "metadata": {"description": "The name of the VM"}, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "The admin user name of the VM"}, "defaultValue": "zytest"}, "adminPassword": {"type": "secureString", "metadata": {"description": "The admin password of the VM"}, "defaultValue": "zytest"}, "dataDiskSize": {"type": "int", "defaultValue": 1024, "metadata": {"description": "The size in GB of the data disks"}}, "dataDisksCount": {"type": "int", "defaultValue": 2, "metadata": {"description": "The number of data disks to create"}}, "diskType": {"type": "string", "defaultValue": "StandardSSD_LRS", "allowedValues": ["StandardSSD_LRS", "Standard_LRS", "Premium_LRS"], "metadata": {"description": "The Storage type of the data Disks"}}, "virtualMachineSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "The virtual machine size. Enter a Premium capable VM size if DiskType is entered as Premium_LRS"}}, "windowsOSVersion": {"type": "string", "defaultValue": "2022-Datacenter", "allowedValues": ["2012-R2-Datacenter", "2016-Datacenter", "2019-Datacenter", "2022-Datacenter"], "metadata": {"description": "The Windows version for the VM."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"virtualNetworkName": "[format(\'{0}-vnet\', toLower(parameters(\'virtualMachineName\')))]", "subnetName": "[format(\'{0}-subnet\', toLower(parameters(\'virtualMachineName\')))]", "OSDiskName": "[format(\'{0}-OSDisk\', toLower(parameters(\'virtualMachineName\')))]", "networkInterfaceName": "[format(\'{0}-nic\', toLower(parameters(\'virtualMachineName\')))]", "publicIpAddressName": "[format(\'{0}-ip\', toLower(parameters(\'virtualMachineName\')))]", "networkSecurityGroupName": "[format(\'{0}-nsg\', variables(\'subnetName\'))]", "addressPrefix": "10.0.0.0/16", "subnetPrefix": "10.0.0.0/24", "publicIPAddressType": "Dynamic"}, "resources": [{"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2021-03-01", "name": "[variables(\'publicIpAddressName\')]", "sku": {"name": "Basic"}, "location": "[parameters(\'location\')]", "properties": {"publicIPAddressVersion": "IPv4", "publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]"}}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2021-03-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2021-03-01", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnetName\')]", "properties": {"addressPrefix": "[variables(\'subnetPrefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2021-03-01", "name": "[variables(\'networkInterfaceName\')]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIpAddressName\'))]"}, "subnet": {"id": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', variables(\'virtualNetworkName\'), variables(\'subnetName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIpAddressName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2021-07-01", "name": "[parameters(\'virtualMachineName\')]", "location": "[parameters(\'location\')]", "properties": {"hardwareProfile": {"vmSize": "[parameters(\'virtualMachineSize\')]"}, "osProfile": {"computerName": "[parameters(\'virtualMachineName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"copy": [{"name": "dataDisks", "count": "[length(range(0, parameters(\'dataDisksCount\')))]", "input": {"name": "[format(\'{0}-DataDisk{1}\', parameters(\'virtualMachineName\'), range(0, parameters(\'dataDisksCount\'))[copyIndex(\'dataDisks\')])]", "diskSizeGB": "[parameters(\'dataDiskSize\')]", "lun": "[range(0, parameters(\'dataDisksCount\'))[copyIndex(\'dataDisks\')]]", "createOption": "Empty", "managedDisk": {"storageAccountType": "[parameters(\'diskType\')]"}}}], "osDisk": {"osType": "Windows", "name": "[variables(\'OSDiskName\')]", "caching": "ReadWrite", "createOption": "FromImage", "managedDisk": {"storageAccountType": "[parameters(\'diskType\')]"}, "diskSizeGB": 128}, "imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'windowsOSVersion\')]", "version": "latest"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'networkInterfaceName\'))]"}]}}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'networkInterfaceName\'))]"]}]}


cli_script
To translate the provided ARM template into an equivalent Azure CLI script, we will first extract the parameters and assign them to variables. Then we will create the resources one by one, following the dependencies indicated in the ARM template.\n\n```bash\n#!/bin/bash\n\n# Assign template parameters to variables\nvirtualMachineName="zytest"\nadminUsername="zytest"\nadminPassword="zytest" # Note: In a real script, handle secure strings carefully\ndataDiskSize=1024\ndataDisksCount=2\ndiskType="StandardSSD_LRS"\nvirtualMachineSize="Standard_D2s_v3"\nwindowsOSVersion="2022-Datacenter"\nlocation="westus"\n\n# Derived variable names from parameters\nvirtualNetworkName="${virtualMachineName,,}-vnet"\nsubnetName="${virtualMachineName,,}-subnet"\nOSDiskName="${virtualMachineName,,}-OSDisk"\nnetworkInterfaceName="${virtualMachineName,,}-nic"\npublicIpAddressName="${virtualMachineName,,}-ip"\nnetworkSecurityGroupName="${subnetName}-nsg"\naddressPrefix="10.0.0.0/16"\nsubnetPrefix="10.0.0.0/24"\npublicIPAddressType="Dynamic"\n\n# Create public IP address\naz network public-ip create \\\n    --name $publicIpAddressName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --allocation-method $publicIPAddressType \\\n    --sku Basic\n\n# Create network security group and rule\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --resource-group <ResourceGroup> \\\n    --location $location\n\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --resource-group <ResourceGroup> \\\n    --name default-allow-3389 \\\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --destination-port-ranges 3389 \\\n    --protocol Tcp \\\n    --source-address-prefix \'*\' \\\n    --source-port-range \'*\'\n\n# Create virtual network and subnet\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --address-prefix $addressPrefix \\\n    --subnet-name $subnetName \\\n    --subnet-prefix $subnetPrefix\n\naz network vnet subnet update \\\n    --vnet-name $virtualNetworkName \\\n    --name $subnetName \\\n    --resource-group <ResourceGroup> \\\n    --network-security-group $networkSecurityGroupName\n\n# Create network interface\naz network nic create \\\n    --name $networkInterfaceName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnetName \\\n    --public-ip-address $publicIpAddressName\n\n# Create virtual machine\naz vm create \\\n    --name $virtualMachineName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --nics $networkInterfaceName \\\n    --size $virtualMachineSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --os-disk-name $OSDiskName \\\n    --storage-sku $diskType \\\n    --image "MicrosoftWindowsServer:WindowsServer:$windowsOSVersion:latest"\n\n# Add data disks to the virtual machine\nfor (( i=0; i<$dataDisksCount; i++ ))\ndo\n    dataDiskName="${virtualMachineName}-DataDisk$i"\n    az vm disk attach \\\n        --vm-name $virtualMachineName \\\n        --resource-group <ResourceGroup> \\\n        --name $dataDiskName \\\n        --size-gb $dataDiskSize \\\n        --sku $diskType \\\n        --new\ndone\n```\n\nPlease replace `<ResourceGroup>` with the actual name of the resource group where you want to deploy these resources. Also, note that the admin password is included as plain text, which is not secure. In production, you should use a secure method to handle passwords and other sensitive information.\n\nThis script assumes that you have the Azure CLI installed and are logged in with the appropriate permissions to create these resources.


verify_result
