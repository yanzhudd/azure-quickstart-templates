arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"vmName": {"type": "string", "metadata": {"description": "Name of the virtual machine."}, "defaultValue": "zytest"}, "adminUsername": {"type": "string", "metadata": {"description": "Admin user name for the virtual machine."}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "Admin user password for virtual machine."}, "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Default lovation"}}, "vmSize": {"type": "string", "defaultValue": "Standard_D2_v3", "metadata": {"description": "Size of VM"}}, "virtualNetworkName": {"type": "string", "metadata": {"description": "Name of VNET to which the VM NIC belongs to"}, "defaultValue": "zytest"}, "subnetName": {"type": "string", "metadata": {"description": "Name of Subnet to which the VM NIC belongs to"}, "defaultValue": "zytest"}, "keyVaultName": {"type": "string", "metadata": {"description": "Name of the KeyVault to place the volume encryption key"}, "defaultValue": "zytest"}, "enabledForDeployment": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."}}, "enabledForDiskEncryption": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."}}, "enabledForTemplateDeployment": {"type": "bool", "defaultValue": true, "metadata": {"description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."}}, "keysPermissions": {"type": "array", "defaultValue": ["list", "get", "decrypt", "encrypt", "unwrapkey", "wrapkey"], "metadata": {"description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."}}, "secretsPermissions": {"type": "array", "defaultValue": ["list", "get"], "metadata": {"description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."}}, "skuName": {"type": "string", "defaultValue": "Standard", "allowedValues": ["Standard", "Premium"], "metadata": {"description": "Specifies whether the key vault is a standard vault or a premium vault."}}}, "variables": {"imagePublisher": "MicrosoftWindowsServer", "imageOffer": "WindowsServer", "osSku": "2012-R2-Datacenter", "subnetRef": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets\', parameters(\'virtualNetworkName\'), parameters(\'subnetName\'))]", "dnsNameForPublicIP": "[toLower(parameters(\'vmName\'))]", "publicIPAddressName": "[toLower(concat(\'publicIP\',parameters(\'vmName\')))]", "publicIPAddressType": "Dynamic", "nicName": "[toLower(concat(\'nic\',parameters(\'vmName\')))]", "keyVaultURL": "[concat(\'https://\', parameters(\'keyVaultName\'), environment().suffixes.keyVaultDns)]", "encryptionOperation": "EnableEncryption", "keyVaultResourceId": "[resourceId(\'Microsoft.KeyVault/vaults/\', parameters(\'keyVaultName\'))]"}, "resources": [{"type": "Microsoft.Network/VirtualNetworks", "name": "[parameters(\'virtualNetworkName\')]", "apiVersion": "2019-09-01", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["10.0.0.0/16"]}, "subnets": [{"name": "[parameters(\'subnetName\')]", "properties": {"addressPrefix": "10.0.0.0/24"}}]}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/publicIPAddresses", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "[variables(\'publicIPAddressType\')]", "dnsSettings": {"domainNameLabel": "[variables(\'dnsNameForPublicIP\')]"}}}, {"apiVersion": "2020-11-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses/\', variables(\'publicIPAddressName\'))]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\',variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[variables(\'subnetRef\')]"}}}]}}, {"apiVersion": "2019-07-01", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces/\', variables(\'nicName\'))]"], "identity": {"type": "SystemAssigned"}, "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "[variables(\'imagePublisher\')]", "offer": "[variables(\'imageOffer\')]", "sku": "[variables(\'osSku\')]", "version": "latest"}, "osDisk": {"createOption": "FromImage"}, "dataDisks": [{"diskSizeGB": 512, "lun": 1, "name": "DataDisk-01", "createOption": "empty", "caching": "None"}]}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\',variables(\'nicName\'))]"}]}}}, {"type": "Microsoft.KeyVault/vaults", "apiVersion": "2019-09-01", "name": "[parameters(\'keyVaultName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"], "properties": {"enabledForDeployment": "[parameters(\'enabledForDeployment\')]", "enabledForDiskEncryption": "[parameters(\'enabledForDiskEncryption\')]", "enabledForTemplateDeployment": "[parameters(\'enabledForTemplateDeployment\')]", "tenantId": "[subscription().tenantId]", "accessPolicies": [{"objectId": "[reference(resourceId(\'Microsoft.Compute/virtualMachines/\', parameters(\'vmName\')), \'2019-07-01\', \'full\').identity.principalId]", "tenantId": "[subscription().tenantId]", "permissions": {"keys": "[parameters(\'keysPermissions\')]", "secrets": "[parameters(\'secretsPermissions\')]"}}], "sku": {"name": "[parameters(\'skuName\')]", "family": "A"}, "networkAcls": {"defaultAction": "Allow", "bypass": "AzureServices"}}}, {"type": "Microsoft.Compute/virtualMachines/extensions", "name": "[concat(parameters(\'vmName\'),\'/diskEncryption\')]", "apiVersion": "2020-12-01", "dependsOn": ["[resourceId(\'Microsoft.KeyVault/vaults\', parameters(\'keyVaultName\'))]"], "location": "[parameters(\'location\')]", "properties": {"publisher": "Microsoft.Azure.Security", "type": "AzureDiskEncryption", "typeHandlerVersion": "2.2", "autoUpgradeMinorVersion": true, "settings": {"EncryptionOperation": "[variables(\'encryptionOperation\')]", "KeyVaultURL": "[variables(\'keyVaultURL\')]", "KeyVaultResourceId": "[variables(\'keyVaultResourceId\')]", "VolumeType": "All"}}}]}


cli_script
Below is the translated bash script from the provided ARM template and its parameters:\n\n```bash\n#!/bin/bash\n\n# Template Parameters\nvmName="zytest"\nadminUsername="zytest"\nadminPassword="zytest" # Note: In practice, use a secure method to handle the password\nlocation="westus"\nvmSize="Standard_D2_v3"\nvirtualNetworkName="zytest"\nsubnetName="zytest"\nkeyVaultName="zytest"\nenabledForDeployment=true\nenabledForDiskEncryption=true\nenabledForTemplateDeployment=true\nkeysPermissions=("list" "get" "decrypt" "encrypt" "unwrapkey" "wrapkey")\nsecretsPermissions=("list" "get")\nskuName="Standard"\n\n# Variables (not directly translatable to CLI, need to handle with CLI logic)\nimagePublisher="MicrosoftWindowsServer"\nimageOffer="WindowsServer"\nosSku="2012-R2-Datacenter"\n# Note: resourceId and environment functions are ARM template specific and need to be handled differently in CLI\n\n# Create Virtual Network\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --address-prefixes "10.0.0.0/16" \\\n    --subnet-name $subnetName \\\n    --subnet-prefix "10.0.0.0/24"\n\n# Create Public IP Address\ndnsNameForPublicIP=$(echo "$vmName" | tr \'[:upper:]\' \'[:lower:]\')\npublicIPAddressName=$(echo "publicIP$vmName" | tr \'[:upper:]\' \'[:lower:]\')\npublicIPAddressType="Dynamic"\n\naz network public-ip create \\\n    --name $publicIPAddressName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --allocation-method $publicIPAddressType \\\n    --dns-name $dnsNameForPublicIP\n\n# Create Network Interface\nnicName=$(echo "nic$vmName" | tr \'[:upper:]\' \'[:lower:]\')\nsubnetId=$(az network vnet subnet show --name $subnetName --vnet-name $virtualNetworkName --resource-group <ResourceGroup> --query id -o tsv)\npublicIpId=$(az network public-ip show --name $publicIPAddressName --resource-group <ResourceGroup> --query id -o tsv)\n\naz network nic create \\\n    --name $nicName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --subnet $subnetId \\\n    --public-ip-address $publicIpId\n\n# Create Virtual Machine\naz vm create \\\n    --name $vmName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --nics $nicName \\\n    --image "$imagePublisher:$imageOffer:$osSku:latest" \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --authentication-type password\n\n# Add Data Disk to VM\naz vm disk attach \\\n    --vm-name $vmName \\\n    --resource-group <ResourceGroup> \\\n    --name "DataDisk-01" \\\n    --size-gb 512 \\\n    --lun 1 \\\n    --sku Standard_LRS \\\n    --new\n\n# Create Key Vault\naz keyvault create \\\n    --name $keyVaultName \\\n    --resource-group <ResourceGroup> \\\n    --location $location \\\n    --enabled-for-deployment $enabledForDeployment \\\n    --enabled-for-disk-encryption $enabledForDiskEncryption \\\n    --enabled-for-template-deployment $enabledForTemplateDeployment \\\n    --sku $skuName\n\n# Set Key Vault Access Policy for VM\nvmPrincipalId=$(az vm show --name $vmName --resource-group <ResourceGroup> --query identity.principalId -o tsv)\naz keyvault set-policy \\\n    --name $keyVaultName \\\n    --resource-group <ResourceGroup> \\\n    --object-id $vmPrincipalId \\\n    --key-permissions "${keysPermissions[@]}" \\\n    --secret-permissions "${secretsPermissions[@]}"\n\n# Enable Disk Encryption on VM\nkeyVaultUrl=$(az keyvault show --name $keyVaultName --resource-group <ResourceGroup> --query "properties.vaultUri" -o tsv)\nkeyVaultResourceId=$(az keyvault show --name $keyVaultName --resource-group <ResourceGroup> --query id -o tsv)\nencryptionOperation="EnableEncryption"\n\naz vm extension set \\\n    --resource-group <ResourceGroup> \\\n    --vm-name $vmName \\\n    --name "diskEncryption" \\\n    --publisher "Microsoft.Azure.Security" \\\n    --version "2.2" \\\n    --settings "{\\"EncryptionOperation\\":\\"$encryptionOperation\\",\\"KeyVaultURL\\":\\"$keyVaultUrl\\",\\"KeyVaultResourceId\\":\\"$keyVaultResourceId\\",\\"VolumeType\\":\\"All\\"}"\n```\n\nPlease replace `<ResourceGroup>` with the actual resource group name where you want to deploy the resources. Also, note that secure handling of passwords and other sensitive information is important and should be managed appropriately in your scripts.


verify_result
