arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"adminUsername": {"type": "string", "defaultValue": "zytest"}, "adminPassword": {"type": "secureString", "defaultValue": "zytest"}, "domainName": {"type": "string", "defaultValue": "zytest"}, "dnsPrefix": {"type": "string", "defaultValue": "zytest"}}, "variables": {"adUsername": "[parameters(\'adminUsername\')]"}, "resources": [{"name": "createADController", "type": "Microsoft.Resources/deployments", "apiVersion": "2020-06-01", "properties": {"mode": "Incremental", "templateLink": {"uri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/active-directory-new-domain/0.9/azuredeploy.json", "contentVersion": "1.0.0.0"}, "parameters": {"adminUsername": {"value": "[parameters(\'adminUsername\')]"}, "adminPassword": {"value": "[parameters(\'adminPassword\')]"}, "domainName": {"value": "[parameters(\'domainName\')]"}, "dnsPrefix": {"value": "[parameters(\'dnsPrefix\')]"}}}}], "outputs": {"domainName": {"type": "string", "value": "[reference(\'createADController\').outputs.domainName.value]"}, "virtualNetworkName": {"type": "string", "value": "[reference(\'createADController\').outputs.virtualNetworkName.value]"}, "subnetName": {"type": "string", "value": "[reference(\'createADController\').outputs.virtualNetworkSubnetName.value]"}, "adUsername": {"type": "string", "value": "[variables(\'adUsername\')]"}}}


cli_script
Based on the provided JSON data, here is the equivalent bash script using Azure CLI commands. The script sets up variables based on the template parameters and then deploys an ARM template to create an Active Directory domain controller.\n\n```bash\n#!/bin/bash\n\n# Assign template parameter values to variables\nadminUsername="zytest"\nadminPassword="zytest"\ndomainName="zytest"\ndnsPrefix="zytest"\n\n# Deploy the ARM template for creating an Active Directory domain controller\naz deployment group create \\\n  --name createADController \\\n  --resource-group <ResourceGroupName> \\ # Replace <ResourceGroupName> with your actual resource group name\n  --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/modules/active-directory-new-domain/0.9/azuredeploy.json" \\\n  --parameters adminUsername=$adminUsername \\\n               adminPassword=$adminPassword \\\n               domainName=$domainName \\\n               dnsPrefix=$dnsPrefix\n\n# Output variables\n# Note: To fetch the outputs from the deployment, you would typically use the `az deployment group show` command.\n# However, since the ARM template deployment is asynchronous, you may need to wait for the deployment to complete before getting the outputs.\n\n# Fetch deployment outputs (after ensuring the deployment has completed)\ndeploymentOutputs=$(az deployment group show --name createADController --resource-group <ResourceGroupName> --query "properties.outputs")\n\n# Extract and display the domainName\ndomainNameOutput=$(echo $deploymentOutputs | jq -r \'.domainName.value\')\necho "Domain Name: $domainNameOutput"\n\n# Extract and display the virtualNetworkName\nvirtualNetworkNameOutput=$(echo $deploymentOutputs | jq -r \'.virtualNetworkName.value\')\necho "Virtual Network Name: $virtualNetworkNameOutput"\n\n# Extract and display the subnetName\nsubnetNameOutput=$(echo $deploymentOutputs | jq -r \'.subnetName.value\')\necho "Subnet Name: $subnetNameOutput"\n\n# Display the Active Directory username\necho "AD Username: $adminUsername"\n```\n\nPlease ensure that you have the Azure CLI installed and that you are logged in to your Azure account using `az login`. Also, replace `<ResourceGroupName>` with the actual name of your Azure resource group where you want to deploy the resources.\n\nThe `jq` command is used to parse JSON output from the Azure CLI. If you don\'t have `jq` installed on your system, you can install it or modify the script to extract the outputs in a different way.\n\nRemember that deploying resources in Azure may incur costs, so make sure to review the resources and their associated costs before executing the script.


verify_result
