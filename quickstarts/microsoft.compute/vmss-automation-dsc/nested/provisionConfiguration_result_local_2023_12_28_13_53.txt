arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"_artifactsLocation": {"type": "string", "defaultValue": "zytest"}, "_artifactsLocationSasToken": {"type": "string", "defaultValue": "zytest"}, "automationAccountName": {"type": "string", "defaultValue": "zytest"}, "location": {"type": "string", "defaultValue": "westus"}, "compileName": {"type": "string", "defaultValue": "[guid(resourceGroup().id, deployment().name)]"}}, "variables": {"dscConfigurations": {"WindowsIISServerConfig": {"name": "WindowsIISServerConfig", "description": "minimum viable configuration for a web server role", "script": "dscConfigurations/WindowsIISServerConfig.ps1"}}, "dscResources": {"xWebAdministration": {"name": "xWebAdministration", "url": "https://psg-prod-eastus.azureedge.net/packages/xwebadministration.2.4.0.nupkg"}}, "runbook": {"Name": "TombstoneDSCNodes", "Uri": "runbooks/TombstoneDSCNodes.ps1", "Description": "This script provides an example for how to use a runbook in Azure Automation to tombstone stale DSC nodes from State Configuration.", "Version": "1.0.0"}}, "resources": [{"name": "[parameters(\'automationAccountName\')]", "type": "Microsoft.Automation/automationAccounts", "apiversion": "2018-06-30", "location": "[parameters(\'location\')]", "properties": {"sku": {"name": "Basic"}}, "resources": [{"name": "[variables(\'dscResources\').xWebAdministration.name]", "type": "modules", "apiVersion": "2018-06-30", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'AutomationAccountName\')]"], "properties": {"contentLink": {"uri": "[variables(\'dscResources\').xWebAdministration.url]"}}}, {"name": "[variables(\'dscConfigurations\').WindowsIISServerConfig.name]", "type": "configurations", "apiVersion": "2018-06-30", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'AutomationAccountName\')]", "[variables(\'dscResources\').xWebAdministration.name]"], "properties": {"state": "Published", "overwrite": "true", "source": {"type": "uri", "value": "[concat(parameters(\'_artifactsLocation\'), variables(\'dscConfigurations\').WindowsIISServerConfig.script, parameters(\'_artifactsLocationSasToken\'))]"}}}, {"name": "[parameters(\'compileName\')]", "type": "compilationjobs", "apiVersion": "2018-06-30", "tags": {}, "dependsOn": ["[parameters(\'AutomationAccountName\')]", "[variables(\'dscConfigurations\').WindowsIISServerConfig.name]"], "properties": {"configuration": {"name": "[variables(\'dscConfigurations\').WindowsIISServerConfig.name]"}, "parameters": {}}}, {"name": "[variables(\'runbook\').Name]", "type": "runbooks", "apiversion": "2018-06-30", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'AutomationAccountName\')]"], "properties": {"runbookType": "PowerShell", "logProgress": false, "logVerbose": false, "description": "[variables(\'runbook\').Description]", "publishContentLink": {"uri": "[concat(parameters(\'_artifactsLocation\'), variables(\'runbook\').Uri, parameters(\'_artifactsLocationSasToken\'))]", "version": "[variables(\'runbook\').Version]"}}}]}], "outputs": {}}


cli_script
```bash\n#!/bin/bash\n\n# Define the template parameters as variables\n_artifactsLocation="zytest"\n_artifactsLocationSasToken="zytest"\nautomationAccountName="zytest"\nlocation="westus"\ncompileName=$(uuidgen) # Using uuidgen to simulate the [guid(resourceGroup().id, deployment().name)] function\n\n# Define the variables from the ARM template as variables\ndscConfigurationName="WindowsIISServerConfig"\ndscConfigurationDescription="minimum viable configuration for a web server role"\ndscConfigurationScript="dscConfigurations/WindowsIISServerConfig.ps1"\n\ndscResourceName="xWebAdministration"\ndscResourceUrl="https://psg-prod-eastus.azureedge.net/packages/xwebadministration.2.4.0.nupkg"\n\nrunbookName="TombstoneDSCNodes"\nrunbookUri="runbooks/TombstoneDSCNodes.ps1"\nrunbookDescription="This script provides an example for how to use a runbook in Azure Automation to tombstone stale DSC nodes from State Configuration."\nrunbookVersion="1.0.0"\n\n# Create the Automation Account\naz automation account create \\\n  --name $automationAccountName \\\n  --location $location \\\n  --resource-group $(az group show --query name) \\\n  --sku Basic\n\n# Create the DSC Configuration\naz automation module create \\\n  --automation-account-name $automationAccountName \\\n  --name $dscResourceName \\\n  --resource-group $(az group show --query name) \\\n  --location $location \\\n  --content-link-uri $dscResourceUrl\n\n# Create the DSC Configuration\naz automation dsc configuration create \\\n  --automation-account-name $automationAccountName \\\n  --name $dscConfigurationName \\\n  --location $location \\\n  --resource-group $(az group show --query name) \\\n  --log-verbose false \\\n  --description $dscConfigurationDescription \\\n  --source-path "$_artifactsLocation/$dscConfigurationScript$_artifactsLocationSasToken"\n\n# Create the Compilation Job\naz automation dsc compilationjob create \\\n  --automation-account-name $automationAccountName \\\n  --resource-group $(az group show --query name) \\\n  --configuration-name $dscConfigurationName \\\n  --name $compileName\n\n# Create the Runbook\naz automation runbook create \\\n  --automation-account-name $automationAccountName \\\n  --name $runbookName \\\n  --location $location \\\n  --resource-group $(az group show --query name) \\\n  --type PowerShell \\\n  --log-progress false \\\n  --log-verbose false \\\n  --description $runbookDescription \\\n  --publish-content-link-uri "$_artifactsLocation/$runbookUri$_artifactsLocationSasToken" \\\n  --publish-content-link-version $runbookVersion\n```\n\nNote: The ARM template uses a function `[guid(resourceGroup().id, deployment().name)]` to generate a unique name for the `compileName` parameter. In the CLI script, I used `uuidgen` to generate a UUID, which serves a similar purpose. Also, the ARM template is using `concat` to build the URI for the DSC configuration and runbook, which I\'ve translated to simple string concatenation in the bash script. Make sure to replace `$(az group show --query name)` with your actual resource group name if it\'s not set as the default in your Azure CLI context.


verify_result
