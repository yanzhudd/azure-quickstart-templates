arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.19.5.34762", "templateHash": "17899701281085571031"}}, "parameters": {"vmName": {"type": "string", "defaultValue": "WindowsVm", "metadata": {"description": "Name of the VM"}}, "vmSize": {"type": "string", "defaultValue": "Standard_D2s_v3", "metadata": {"description": "Size of the VM"}}, "adminUsername": {"type": "string", "metadata": {"description": "Admin Username"}, "defaultValue": "zytest"}, "adminPassword": {"type": "securestring", "metadata": {"description": "Admin Password"}, "defaultValue": "zytest"}, "vaultResourceId": {"type": "string", "metadata": {"description": "Resource Group of Key Vault that has a secret - must be of the format /subscriptions/xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<vaultName>/providers/Microsoft.KeyVault/vaults/<vaultName>"}, "defaultValue": "zytest"}, "secretUrlWithVersion": {"type": "string", "metadata": {"description": "Url of the certificate in Key Vault - the url must be to a base64 encoded secret, not a key or cert: https://<vaultEndpoint>/secrets/<secretName>/<secretVersion>"}, "defaultValue": "zytest"}, "OSVersion": {"type": "string", "defaultValue": "2022-datacenter-azure-edition", "allowedValues": ["2022-datacenter-azure-edition", "2022-datacenter-azure-edition-core", "2022-datacenter-azure-edition-core-smalldisk", "2022-datacenter-azure-edition-smalldisk", "2022-datacenter-core-g2", "2022-datacenter-core-smalldisk-g2", "2022-datacenter-g2", "2022-datacenter-smalldisk-g2"], "metadata": {"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}}, "securityType": {"type": "string", "defaultValue": "TrustedLaunch", "allowedValues": ["Standard", "TrustedLaunch"], "metadata": {"description": "Security Type of the Virtual Machine."}}, "location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location for all resources."}}}, "variables": {"securityProfileJson": {"uefiSettings": {"secureBootEnabled": true, "vTpmEnabled": true}, "securityType": "[parameters(\'securityType\')]"}, "extensionName": "GuestAttestation", "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation", "extensionVersion": "1.0", "maaTenantName": "GuestAttestation", "subnet1Ref": "[resourceId(\'Microsoft.Network/virtualNetworks/subnets/\', variables(\'virtualNetworkName\'), variables(\'subnet1Name\'))]", "nicName": "certNIC", "subnet1Prefix": "10.0.0.0/24", "subnet1Name": "Subnet-1", "virtualNetworkName": "certVNET", "addressPrefix": "10.0.0.0/16", "publicIPName": "certPublicIP", "networkSecurityGroupName": "[format(\'{0}-nsg\', variables(\'subnet1Name\'))]"}, "resources": [{"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2022-11-01", "name": "[variables(\'publicIPName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "Dynamic"}}, {"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2022-11-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-3389", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "3389", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"type": "Microsoft.Network/virtualNetworks", "apiVersion": "2022-11-01", "name": "[variables(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "properties": {"addressSpace": {"addressPrefixes": ["[variables(\'addressPrefix\')]"]}, "subnets": [{"name": "[variables(\'subnet1Name\')]", "properties": {"addressPrefix": "[variables(\'subnet1Prefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"]}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2022-11-01", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPName\'))]"}, "subnet": {"id": "[variables(\'subnet1Ref\')]"}}}]}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPName\'))]", "[resourceId(\'Microsoft.Network/virtualNetworks\', variables(\'virtualNetworkName\'))]"]}, {"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2023-03-01", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPassword\')]", "secrets": [{"sourceVault": {"id": "[parameters(\'vaultResourceId\')]"}, "vaultCertificates": [{"certificateUrl": "[parameters(\'secretUrlWithVersion\')]", "certificateStore": "My"}]}]}, "storageProfile": {"imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "[parameters(\'OSVersion\')]", "version": "latest"}, "osDisk": {"caching": "ReadWrite", "createOption": "FromImage"}}, "securityProfile": "[if(equals(parameters(\'securityType\'), \'TrustedLaunch\'), variables(\'securityProfileJson\'), null())]", "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"}]}}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"]}, {"condition": "[and(equals(parameters(\'securityType\'), \'TrustedLaunch\'), and(equals(variables(\'securityProfileJson\').uefiSettings.secureBootEnabled, true()), equals(variables(\'securityProfileJson\').uefiSettings.vTpmEnabled, true())))]", "type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2023-03-01", "name": "[format(\'{0}/{1}\', parameters(\'vmName\'), \'GuestAttestation\')]", "location": "[parameters(\'location\')]", "properties": {"publisher": "[variables(\'extensionPublisher\')]", "type": "[variables(\'extensionName\')]", "typeHandlerVersion": "[variables(\'extensionVersion\')]", "autoUpgradeMinorVersion": true, "enableAutomaticUpgrade": true, "settings": {"AttestationConfig": {"MaaSettings": {"maaEndpoint": "", "maaTenantName": "[variables(\'maaTenantName\')]"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}, "useCustomToken": "false", "disableAlerts": "false"}}}, "dependsOn": ["[resourceId(\'Microsoft.Compute/virtualMachines\', parameters(\'vmName\'))]"]}]}


cli_script
Below is the translated Azure CLI script from the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Define variables from the template parameters\nvmName="WindowsVm"\nvmSize="Standard_D2s_v3"\nadminUsername="zytest"\nadminPassword="zytest" # Note: In production, use a secure method to handle passwords\nvaultResourceId="zytest"\nsecretUrlWithVersion="zytest"\nOSVersion="2022-datacenter-azure-edition"\nsecurityType="TrustedLaunch"\nlocation="westus"\n\n# Define variables from the template variables\nsubnet1Name="Subnet-1"\nvirtualNetworkName="certVNET"\naddressPrefix="10.0.0.0/16"\nsubnet1Prefix="10.0.0.0/24"\nnetworkSecurityGroupName="${subnet1Name}-nsg"\npublicIPName="certPublicIP"\nnicName="certNIC"\n\n# Create a public IP address\naz network public-ip create \\\n    --name $publicIPName \\\n    --location $location \\\n    --allocation-method Dynamic\n\n# Create a network security group and a security rule\naz network nsg create \\\n    --name $networkSecurityGroupName \\\n    --location $location\n\naz network nsg rule create \\\n    --nsg-name $networkSecurityGroupName \\\n    --name "default-allow-3389" \\\n    --priority 1000 \\\n    --access Allow \\\n    --direction Inbound \\\n    --destination-port-ranges 3389 \\\n    --protocol Tcp \\\n    --source-address-prefix "*" \\\n    --source-port-range "*" \\\n    --destination-address-prefix "*"\n\n# Create a virtual network and subnet\naz network vnet create \\\n    --name $virtualNetworkName \\\n    --location $location \\\n    --address-prefix $addressPrefix \\\n    --subnet-name $subnet1Name \\\n    --subnet-prefix $subnet1Prefix \\\n    --network-security-group $networkSecurityGroupName\n\n# Create a network interface\naz network nic create \\\n    --name $nicName \\\n    --location $location \\\n    --vnet-name $virtualNetworkName \\\n    --subnet $subnet1Name \\\n    --public-ip-address $publicIPName\n\n# Create a virtual machine\naz vm create \\\n    --name $vmName \\\n    --location $location \\\n    --nics $nicName \\\n    --size $vmSize \\\n    --admin-username $adminUsername \\\n    --admin-password $adminPassword \\\n    --image "MicrosoftWindowsServer:WindowsServer:$OSVersion:latest" \\\n    --authentication-type password\n\n# Add secret from the key vault to the VM\naz vm secret add \\\n    --name $vmName \\\n    --vault-name $vaultResourceId \\\n    --certificate $secretUrlWithVersion\n\n# Conditionally add the Guest Attestation extension to the VM if securityType is TrustedLaunch\nif [ "$securityType" == "TrustedLaunch" ]; then\n    az vm extension set \\\n        --vm-name $vmName \\\n        --name "GuestAttestation" \\\n        --publisher "Microsoft.Azure.Security.WindowsAttestation" \\\n        --version "1.0" \\\n        --settings \'{"AttestationConfig": {"MaaSettings": {"maaEndpoint": "", "maaTenantName": "GuestAttestation"}, "AscSettings": {"ascReportingEndpoint": "", "ascReportingFrequency": ""}, "useCustomToken": "false", "disableAlerts": "false"}}\'\nfi\n```\n\nPlease note that the `adminPassword` should be handled securely, and you should not include sensitive information in plaintext in scripts. Additionally, some values like `vaultResourceId` and `secretUrlWithVersion` are placeholders and should be replaced with actual values before running the script.


verify_result
