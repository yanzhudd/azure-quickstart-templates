arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.13.1.58284", "templateHash": "9285416752927271496"}}, "parameters": {"existingDataFactoryName": {"type": "string", "metadata": {"description": "your existing data factory name"}, "defaultValue": "zytest"}, "existingDataFactoryResourceGroup": {"type": "string", "metadata": {"description": "your existing data factory resource group"}, "defaultValue": "zytest"}, "IntegrationRuntimeName": {"type": "string", "defaultValue": "[format(\'ir-{0}\', uniqueString(resourceGroup().id))]", "metadata": {"description": "IR name must be unique in subscription"}}, "NodeCount": {"type": "int", "defaultValue": 1, "maxValue": 4, "minValue": 1, "metadata": {"description": "the node count is between 1 and 4."}}, "vmSize": {"type": "string", "defaultValue": "Standard_A4_v2", "metadata": {"description": "SKU Size for the VMs"}}, "adminUserName": {"type": "string", "metadata": {"description": "User name for the virtual machine"}, "defaultValue": "zytest"}, "adminPassword": {"type": "secureString", "metadata": {"description": "Password for the virtual machine"}, "defaultValue": "zytest"}, "existingVirtualNetworkName": {"type": "string", "metadata": {"description": "your existing vnet name"}, "defaultValue": "zytest"}, "existingVnetLocation": {"type": "string", "metadata": {"description": "your virtual machine will be create in the same datacenter with VNET"}, "defaultValue": "zytest"}, "existingVnetResourceGroupName": {"type": "string", "metadata": {"description": "Name of the existing VNET resource group"}, "defaultValue": "zytest"}, "existingSubnetInYourVnet": {"type": "string", "metadata": {"description": "Name of the subnet in the virtual network you want to use"}, "defaultValue": "zytest"}, "_artifactsLocation": {"type": "string", "defaultValue": "[deployment().properties.templateLink.uri]", "metadata": {"description": "The base URI where artifacts required by this template are located."}}, "_artifactsLocationSasToken": {"type": "secureString", "defaultValue": "", "metadata": {"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."}}}, "variables": {"delimiters": ["-", "_"], "prefix": "[split(parameters(\'IntegrationRuntimeName\'), variables(\'delimiters\'))[0]]", "networkSecurityGroupName": "[format(\'{0}nsg\', parameters(\'IntegrationRuntimeName\'))]", "subnetId": "[resourceId(parameters(\'existingVnetResourceGroupName\'), \'Microsoft.Network/virtualNetworks/subnets\', parameters(\'existingVirtualNetworkName\'), parameters(\'existingSubnetInYourVnet\'))]", "scriptURL": "[uri(parameters(\'_artifactsLocation\'), format(\'gatewayInstall.ps1{0}\', parameters(\'_artifactsLocationSasToken\')))]"}, "resources": [{"type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2022-05-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'existingVnetLocation\')]", "properties": {"securityRules": [{"name": "default-allow-rdp", "properties": {"priority": 1000, "sourceAddressPrefix": "*", "protocol": "Tcp", "destinationPortRange": "3389", "access": "Allow", "direction": "Inbound", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "name": "nestedTemplate", "resourceGroup": "[parameters(\'existingDataFactoryResourceGroup\')]", "properties": {"expressionEvaluationOptions": {"scope": "inner"}, "mode": "Incremental", "parameters": {"existingDataFactoryName": {"value": "[parameters(\'existingDataFactoryName\')]"}, "IntegrationRuntimeName": {"value": "[parameters(\'IntegrationRuntimeName\')]"}}, "template": {"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.13.1.58284", "templateHash": "4165770150403136675"}}, "parameters": {"existingDataFactoryName": {"type": "string"}, "IntegrationRuntimeName": {"type": "string"}}, "resources": [{"type": "Microsoft.DataFactory/factories/integrationRuntimes", "apiVersion": "2018-06-01", "name": "[format(\'{0}/{1}\', parameters(\'existingDataFactoryName\'), parameters(\'IntegrationRuntimeName\'))]", "properties": {"type": "SelfHosted", "description": "Self-hosted Integration runtime created using ARM template"}}], "outputs": {"irId": {"type": "string", "value": "[resourceId(\'Microsoft.DataFactory/factories/integrationRuntimes\', split(format(\'{0}/{1}\', parameters(\'existingDataFactoryName\'), parameters(\'IntegrationRuntimeName\')), \'/\')[0], split(format(\'{0}/{1}\', parameters(\'existingDataFactoryName\'), parameters(\'IntegrationRuntimeName\')), \'/\')[1])]"}}}}}, {"copy": {"name": "VMtemplate", "count": "[length(range(0, parameters(\'NodeCount\')))]"}, "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "name": "[format(\'vmCopy-{0}\', range(0, parameters(\'NodeCount\'))[copyIndex()])]", "properties": {"expressionEvaluationOptions": {"scope": "inner"}, "mode": "Incremental", "parameters": {"virtualMachineName": {"value": "[take(format(\'vm{0}-{1}\', range(0, parameters(\'NodeCount\'))[copyIndex()], variables(\'prefix\')), 15)]"}, "vmSize": {"value": "[parameters(\'vmSize\')]"}, "adminUserName": {"value": "[parameters(\'adminUserName\')]"}, "adminPassword": {"value": "[parameters(\'adminPassword\')]"}, "existingVnetLocation": {"value": "[parameters(\'existingVnetLocation\')]"}, "subnetId": {"value": "[variables(\'subnetId\')]"}, "nsgId": {"value": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}, "template": {"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.13.1.58284", "templateHash": "5443578025096018367"}}, "parameters": {"virtualMachineName": {"type": "string"}, "vmSize": {"type": "string"}, "adminUserName": {"type": "string"}, "adminPassword": {"type": "secureString"}, "existingVnetLocation": {"type": "string"}, "subnetId": {"type": "string"}, "nsgId": {"type": "string"}}, "variables": {"nicName": "[format(\'{0}Nic\', parameters(\'virtualMachineName\'))]", "publicIPAddressName": "[format(\'{0}-ip\', parameters(\'virtualMachineName\'))]"}, "resources": [{"type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2022-05-01", "name": "[variables(\'publicIPAddressName\')]", "location": "[parameters(\'existingVnetLocation\')]", "properties": {"publicIPAllocationMethod": "Dynamic"}}, {"type": "Microsoft.Network/networkInterfaces", "apiVersion": "2022-05-01", "name": "[variables(\'nicName\')]", "location": "[parameters(\'existingVnetLocation\')]", "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "publicIPAddress": {"id": "[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"}, "subnet": {"id": "[parameters(\'subnetId\')]"}}}], "networkSecurityGroup": {"id": "[parameters(\'nsgId\')]"}}, "dependsOn": ["[resourceId(\'Microsoft.Network/publicIPAddresses\', variables(\'publicIPAddressName\'))]"]}, {"type": "Microsoft.Compute/virtualMachines", "apiVersion": "2022-08-01", "name": "[parameters(\'virtualMachineName\')]", "location": "[parameters(\'existingVnetLocation\')]", "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'virtualMachineName\')]", "adminUsername": "[parameters(\'adminUserName\')]", "adminPassword": "[parameters(\'adminPassword\')]"}, "storageProfile": {"imageReference": {"publisher": "MicrosoftWindowsServer", "offer": "WindowsServer", "sku": "2022-Datacenter", "version": "latest"}, "osDisk": {"name": "[format(\'{0}_OSDisk\', parameters(\'virtualMachineName\'))]", "caching": "ReadWrite", "createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"}]}}, "dependsOn": ["[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"]}]}}, "dependsOn": ["[extensionResourceId(format(\'/subscriptions/{0}/resourceGroups/{1}\', subscription().subscriptionId, parameters(\'existingDataFactoryResourceGroup\')), \'Microsoft.Resources/deployments\', \'nestedTemplate\')]", "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"]}, {"copy": {"name": "IRInstalltemplate", "count": "[length(range(0, parameters(\'NodeCount\')))]", "mode": "serial", "batchSize": 1}, "type": "Microsoft.Resources/deployments", "apiVersion": "2020-10-01", "name": "[format(\'irInstallCopy-{0}\', range(0, parameters(\'NodeCount\'))[copyIndex()])]", "properties": {"expressionEvaluationOptions": {"scope": "inner"}, "mode": "Incremental", "parameters": {"datafactoryId": {"value": "[resourceId(parameters(\'existingDataFactoryResourceGroup\'), \'Microsoft.DataFactory/factories/integrationruntimes\', parameters(\'existingDataFactoryName\'), parameters(\'IntegrationRuntimeName\'))]"}, "virtualMachineName": {"value": "[take(format(\'vm{0}-{1}\', range(0, parameters(\'NodeCount\'))[copyIndex()], variables(\'prefix\')), 15)]"}, "existingVnetLocation": {"value": "[parameters(\'existingVnetLocation\')]"}, "scriptUrl": {"value": "[variables(\'scriptURL\')]"}}, "template": {"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "metadata": {"_generator": {"name": "bicep", "version": "0.13.1.58284", "templateHash": "3302662470492548200"}}, "parameters": {"datafactoryId": {"type": "string"}, "virtualMachineName": {"type": "string"}, "existingVnetLocation": {"type": "string"}, "scriptUrl": {"type": "string"}}, "resources": [{"type": "Microsoft.Compute/virtualMachines/extensions", "apiVersion": "2022-08-01", "name": "[format(\'{0}/{1}installGW\', parameters(\'virtualMachineName\'), parameters(\'virtualMachineName\'))]", "location": "[parameters(\'existingVnetLocation\')]", "tags": {"vmname": "[parameters(\'virtualMachineName\')]"}, "properties": {"publisher": "Microsoft.Compute", "type": "CustomScriptExtension", "typeHandlerVersion": "1.7", "autoUpgradeMinorVersion": true, "settings": {"fileUris": ["[parameters(\'scriptUrl\')]"]}, "protectedSettings": {"commandToExecute": "[format(\'powershell.exe -ExecutionPolicy Unrestricted -File gatewayInstall.ps1 {0}\', listAuthKeys(parameters(\'datafactoryId\'), \'2018-06-01\').authKey1)]"}}}]}}, "dependsOn": ["[extensionResourceId(format(\'/subscriptions/{0}/resourceGroups/{1}\', subscription().subscriptionId, parameters(\'existingDataFactoryResourceGroup\')), \'Microsoft.Resources/deployments\', \'nestedTemplate\')]", "VMtemplate"]}]}


cli_script
Below is the translated equivalent Azure CLI script based on the provided ARM template and parameters. Note that the unique string function and the deployment function are not directly translatable to Azure CLI, so those will need to be handled differently. Additionally, the nested template and copy loop are not directly translatable, so I\'ve provided an example of how to handle one iteration of the loop. You would need to repeat the commands for each iteration or incorporate them into a script loop.\n\n```bash\n#!/bin/bash\n\n# Parameters\nexistingDataFactoryName="zytest"\nexistingDataFactoryResourceGroup="zytest"\nIntegrationRuntimeName="ir-uniqueString" # Replace \'uniqueString\' with actual unique string\nNodeCount=1\nvmSize="Standard_A4_v2"\nadminUserName="zytest"\nadminPassword="zytest" # SecureString should be handled securely\nexistingVirtualNetworkName="zytest"\nexistingVnetLocation="zytest"\nexistingVnetResourceGroupName="zytest"\nexistingSubnetInYourVnet="zytest"\n_artifactsLocation="deploymentPropertiesTemplateLinkUri" # Replace with actual URI\n_artifactsLocationSasToken="" # SecureString should be handled securely\n\n# Variables (some variables are derived from ARM functions which are not directly translatable to CLI)\nnetworkSecurityGroupName="${IntegrationRuntimeName}nsg"\nsubnetId="/subscriptions/{subscriptionId}/resourceGroups/${existingVnetResourceGroupName}/providers/Microsoft.Network/virtualNetworks/${existingVirtualNetworkName}/subnets/${existingSubnetInYourVnet}"\nscriptURL="${_artifactsLocation}gatewayInstall.ps1${_artifactsLocationSasToken}"\n\n# Create Network Security Group\naz network nsg create \\\n  --name "$networkSecurityGroupName" \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --location "$existingVnetLocation"\n\n# Create Security Rule for NSG\naz network nsg rule create \\\n  --nsg-name "$networkSecurityGroupName" \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --name "default-allow-rdp" \\\n  --priority 1000 \\\n  --source-address-prefixes "*" \\\n  --destination-port-ranges 3389 \\\n  --access "Allow" \\\n  --direction "Inbound" \\\n  --protocol "Tcp" \\\n  --source-port-ranges "*" \\\n  --destination-address-prefixes "*"\n\n# Deploy Nested Template (Self-hosted Integration Runtime)\n# Note: This is a nested template deployment in ARM, which does not have a direct CLI equivalent.\n# You would need to deploy the nested template separately, perhaps as an ARM template or by using equivalent CLI commands.\n\n# Example of creating a Self-hosted Integration Runtime using Azure CLI\naz datafactory integration-runtime create \\\n  --resource-group "$existingDataFactoryResourceGroup" \\\n  --factory-name "$existingDataFactoryName" \\\n  --name "$IntegrationRuntimeName" \\\n  --type "SelfHosted"\n\n# Example of creating a single VM (the ARM template uses a loop, which is not directly translatable to CLI)\n# You would need to repeat these commands for each VM or incorporate them into a script loop.\nvirtualMachineName="vm0-${IntegrationRuntimeName:0:15}" # Assuming prefix is derived from IntegrationRuntimeName\nnicName="${virtualMachineName}Nic"\npublicIPAddressName="${virtualMachineName}-ip"\n\n# Create Public IP Address\naz network public-ip create \\\n  --name "$publicIPAddressName" \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --location "$existingVnetLocation" \\\n  --allocation-method "Dynamic"\n\n# Create Network Interface\naz network nic create \\\n  --name "$nicName" \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --location "$existingVnetLocation" \\\n  --subnet "$subnetId" \\\n  --network-security-group "$networkSecurityGroupName" \\\n  --public-ip-address "$publicIPAddressName"\n\n# Create Virtual Machine\naz vm create \\\n  --name "$virtualMachineName" \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --location "$existingVnetLocation" \\\n  --nics "$nicName" \\\n  --image "Win2019Datacenter" \\\n  --size "$vmSize" \\\n  --admin-username "$adminUserName" \\\n  --admin-password "$adminPassword"\n\n# Install Custom Script Extension (for Integration Runtime installation)\n# Note: The commandToExecute would contain the actual command to install the Integration Runtime, which would typically include an auth key.\n# The auth key retrieval is not shown here and should be handled securely.\naz vm extension set \\\n  --resource-group "$existingVnetResourceGroupName" \\\n  --vm-name "$virtualMachineName" \\\n  --name "CustomScriptExtension" \\\n  --publisher "Microsoft.Compute" \\\n  --settings "{\'fileUris\': [\'$scriptURL\']}" \\\n  --protected-settings "{\'commandToExecute\': \'powershell.exe -ExecutionPolicy Unrestricted -File gatewayInstall.ps1 <AUTH_KEY>\'}"\n\n# Repeat the VM creation and Custom Script Extension installation for each node count, if more than one is specified.\n```\n\nPlease replace placeholders like `<AUTH_KEY>` with actual values and handle secure strings securely. The script assumes that you will manually generate the unique string for `IntegrationRuntimeName` and the deployment URI for `_artifactsLocation`. Adjust the script as needed to fit your actual deployment scenario.


verify_result
