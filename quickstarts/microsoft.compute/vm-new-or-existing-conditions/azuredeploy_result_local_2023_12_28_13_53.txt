arm_template
{"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", "contentVersion": "1.0.0.0", "parameters": {"location": {"type": "string", "defaultValue": "westus", "metadata": {"description": "Location to for the resources."}}, "vmName": {"type": "string", "defaultValue": "linux-vm", "metadata": {"description": "Name for the Virtual Machine."}}, "adminUsername": {"type": "string", "metadata": {"description": "User name for the Virtual Machine."}, "defaultValue": "zytest"}, "authenticationType": {"type": "string", "defaultValue": "sshPublicKey", "allowedValues": ["password", "sshPublicKey"], "metadata": {"description": "Type of authentication to use on the Virtual Machine."}}, "adminPasswordOrKey": {"type": "securestring", "metadata": {"description": "Password or ssh key for the Virtual Machine."}, "defaultValue": "zytest"}, "vmSize": {"type": "string", "defaultValue": "Standard_A2_v2", "metadata": {"description": "Size for the Virtual Machine."}}, "storageNewOrExisting": {"type": "string", "defaultValue": "new", "metadata": {"description": "Determines whether or not a new storage account should be provisioned."}}, "storageAccountName": {"type": "string", "defaultValue": "zytest", "metadata": {"description": "Name of the storage account"}}, "storageAccountType": {"type": "string", "defaultValue": "Standard_LRS", "metadata": {"description": "Storage account type"}}, "storageAccountResourceGroupName": {"type": "string", "defaultValue": "[resourceGroup().name]", "metadata": {"description": "Name of the resource group for the existing storage account"}}, "virtualNetworkNewOrExisting": {"type": "string", "defaultValue": "new", "metadata": {"description": "Determines whether or not a new virtual network should be provisioned."}}, "virtualNetworkName": {"type": "string", "defaultValue": "VirtualNetwork", "metadata": {"description": "Name of the virtual network"}}, "addressPrefixes": {"type": "array", "defaultValue": ["10.0.0.0/16"], "metadata": {"description": "Address prefix of the virtual network"}}, "subnetName": {"type": "string", "defaultValue": "default", "metadata": {"description": "Name of the subnet"}}, "subnetPrefix": {"type": "string", "defaultValue": "10.0.0.0/24", "metadata": {"description": "Subnet prefix of the virtual network"}}, "virtualNetworkResourceGroupName": {"type": "string", "defaultValue": "[resourceGroup().name]", "metadata": {"description": "Name of the resource group for the existing virtual network"}}, "publicIpNewOrExisting": {"type": "string", "defaultValue": "new", "metadata": {"description": "Determines whether or not a new public ip should be provisioned."}}, "publicIpName": {"type": "string", "defaultValue": "PublicIp", "metadata": {"description": "Name of the public ip address"}}, "publicIpDns": {"type": "string", "defaultValue": "[concat(\'linux-vm-\', uniqueString(resourceGroup().id))]", "metadata": {"description": "DNS of the public ip address for the VM"}}, "publicIpResourceGroupName": {"type": "string", "defaultValue": "[resourceGroup().name]", "metadata": {"description": "Name of the resource group for the public ip address"}}}, "variables": {"nicName": "[concat(parameters(\'vmName\'), \'-nic\')]", "linuxConfiguration": {"disablePasswordAuthentication": true, "ssh": {"publicKeys": [{"path": "[concat(\'/home/\', parameters(\'adminUsername\'), \'/.ssh/authorized_keys\')]", "keyData": "[parameters(\'adminPasswordOrKey\')]"}]}}, "publicIpAddressId": {"id": "[resourceId(parameters(\'publicIpResourceGroupName\'), \'Microsoft.Network/publicIPAddresses\', parameters(\'publicIpName\'))]"}, "networkSecurityGroupName": "default-NSG"}, "resources": [{"condition": "[equals(parameters(\'storageNewOrExisting\'), \'new\')]", "type": "Microsoft.Storage/storageAccounts", "apiVersion": "2020-08-01-preview", "name": "[parameters(\'storageAccountName\')]", "location": "[parameters(\'location\')]", "kind": "Storage", "sku": {"name": "[parameters(\'storageAccountType\')]"}}, {"condition": "[equals(parameters(\'publicIpNewOrExisting\'), \'new\')]", "type": "Microsoft.Network/publicIPAddresses", "apiVersion": "2017-09-01", "name": "[parameters(\'publicIpName\')]", "location": "[parameters(\'location\')]", "properties": {"publicIPAllocationMethod": "Dynamic", "dnsSettings": {"domainNameLabel": "[parameters(\'publicIpDns\')]"}}}, {"condition": "[equals(parameters(\'virtualNetworkNewOrExisting\'), \'new\')]", "comments": "Default Network Security Group for template", "type": "Microsoft.Network/networkSecurityGroups", "apiVersion": "2019-08-01", "name": "[variables(\'networkSecurityGroupName\')]", "location": "[parameters(\'location\')]", "properties": {"securityRules": [{"name": "default-allow-22", "properties": {"priority": 1000, "access": "Allow", "direction": "Inbound", "destinationPortRange": "22", "protocol": "Tcp", "sourceAddressPrefix": "*", "sourcePortRange": "*", "destinationAddressPrefix": "*"}}]}}, {"condition": "[equals(parameters(\'virtualNetworkNewOrExisting\'), \'new\')]", "type": "Microsoft.Network/virtualNetworks", "apiVersion": "2017-09-01", "name": "[parameters(\'virtualNetworkName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"], "properties": {"addressSpace": {"addressPrefixes": "[parameters(\'addressPrefixes\')]"}, "subnets": [{"name": "[parameters(\'subnetName\')]", "properties": {"addressPrefix": "[parameters(\'subnetPrefix\')]", "networkSecurityGroup": {"id": "[resourceId(\'Microsoft.Network/networkSecurityGroups\', variables(\'networkSecurityGroupName\'))]"}}}]}}, {"apiVersion": "2017-09-01", "type": "Microsoft.Network/networkInterfaces", "name": "[variables(\'nicName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'publicIpName\')]", "[parameters(\'virtualNetworkName\')]"], "properties": {"ipConfigurations": [{"name": "ipconfig1", "properties": {"privateIPAllocationMethod": "Dynamic", "subnet": {"id": "[resourceId(parameters(\'virtualNetworkResourceGroupName\'), \'Microsoft.Network/virtualNetworks/subnets/\', parameters(\'virtualNetworkName\'), parameters(\'subnetName\'))]"}, "publicIPAddress": "[if(not(equals(parameters(\'publicIpNewOrExisting\'), \'none\')), variables(\'publicIpAddressId\') , json(\'null\'))]"}}]}}, {"apiVersion": "2017-03-30", "type": "Microsoft.Compute/virtualMachines", "name": "[parameters(\'vmName\')]", "location": "[parameters(\'location\')]", "dependsOn": ["[parameters(\'storageAccountName\')]", "[variables(\'nicName\')]"], "properties": {"hardwareProfile": {"vmSize": "[parameters(\'vmSize\')]"}, "osProfile": {"computerName": "[parameters(\'vmName\')]", "adminUsername": "[parameters(\'adminUsername\')]", "adminPassword": "[parameters(\'adminPasswordOrKey\')]", "linuxConfiguration": "[if(equals(parameters(\'authenticationType\'), \'password\'), json(\'null\'), variables(\'linuxConfiguration\'))]"}, "storageProfile": {"imageReference": {"publisher": "Canonical", "offer": "UbuntuServer", "sku": "16.04-LTS", "version": "latest"}, "osDisk": {"caching": "ReadWrite", "createOption": "FromImage"}}, "networkProfile": {"networkInterfaces": [{"id": "[resourceId(\'Microsoft.Network/networkInterfaces\', variables(\'nicName\'))]"}]}, "diagnosticsProfile": {"bootDiagnostics": {"enabled": true, "storageUri": "[reference(resourceId(parameters(\'storageAccountResourceGroupName\'), \'Microsoft.Storage/storageAccounts/\', parameters(\'storageAccountName\')), \'2020-08-01-preview\').primaryEndpoints.blob]"}}}}]}


cli_script
Here\'s the equivalent Azure CLI script based on the provided ARM template and parameters:\n\n```bash\n#!/bin/bash\n\n# Parameters\nlocation="westus"\nvmName="linux-vm"\nadminUsername="zytest"\nauthenticationType="sshPublicKey"\nadminPasswordOrKey="zytest"\nvmSize="Standard_A2_v2"\nstorageNewOrExisting="new"\nstorageAccountName="zytest"\nstorageAccountType="Standard_LRS"\nstorageAccountResourceGroupName=$(az group show --query name --output tsv)\nvirtualNetworkNewOrExisting="new"\nvirtualNetworkName="VirtualNetwork"\naddressPrefixes=("10.0.0.0/16")\nsubnetName="default"\nsubnetPrefix="10.0.0.0/24"\nvirtualNetworkResourceGroupName=$(az group show --query name --output tsv)\npublicIpNewOrExisting="new"\npublicIpName="PublicIp"\npublicIpDns=$(az group show --query id --output tsv | xargs -I {} echo "linux-vm-$(az group deployment list --resource-group {} --query "[0].properties.templateLink.uri" --output tsv | sha1sum | cut -c1-8)")\npublicIpResourceGroupName=$(az group show --query name --output tsv)\n\n# Network Security Group Name\nnetworkSecurityGroupName="default-NSG"\n\n# NIC Name\nnicName="${vmName}-nic"\n\n# Public IP Address ID\npublicIpAddressId=$(az network public-ip show --name $publicIpName --resource-group $publicIpResourceGroupName --query id --output tsv)\n\n# Create a new storage account if required\nif [ "$storageNewOrExisting" == "new" ]; then\n  az storage account create --name $storageAccountName --location $location --kind Storage --sku $storageAccountType\nfi\n\n# Create a new public IP if required\nif [ "$publicIpNewOrExisting" == "new" ]; then\n  az network public-ip create --name $publicIpName --location $location --allocation-method Dynamic --dns-name $publicIpDns\nfi\n\n# Create a new Network Security Group if required\nif [ "$virtualNetworkNewOrExisting" == "new" ]; then\n  # Default Network Security Group for template\n  az network nsg create --name $networkSecurityGroupName --location $location\n  az network nsg rule create --nsg-name $networkSecurityGroupName --name default-allow-22 --priority 1000 --access Allow --direction Inbound --destination-port-ranges 22 --protocol Tcp --source-address-prefixes \'*\' --destination-address-prefixes \'*\'\nfi\n\n# Create a new virtual network if required\nif [ "$virtualNetworkNewOrExisting" == "new" ]; then\n  az network vnet create --name $virtualNetworkName --location $location --address-prefixes $addressPrefixes --subnet-name $subnetName --subnet-prefix $subnetPrefix --network-security-group $networkSecurityGroupName\nfi\n\n# Create a network interface\naz network nic create --name $nicName --location $location --subnet $(az network vnet subnet show --vnet-name $virtualNetworkName --name $subnetName --resource-group $virtualNetworkResourceGroupName --query id --output tsv) --public-ip-address $publicIpAddressId\n\n# Create the virtual machine\naz vm create --name $vmName --location $location --nics $nicName --size $vmSize --image UbuntuLTS --admin-username $adminUsername --authentication-type $authenticationType --ssh-key-value "$adminPasswordOrKey" --generate-ssh-keys\n\n# Enable boot diagnostics\nstorageUri=$(az storage account show --name $storageAccountName --query "primaryEndpoints.blob" --output tsv)\naz vm boot-diagnostics enable --name $vmName --storage $storageUri\n```\n\nPlease note that the above script assumes that you are already logged in to the Azure CLI and have the necessary permissions to create these resources. Also, the script assumes that the resource group is already created and available. The script converts the parameters into bash variables and then uses Azure CLI commands to create the resources as per the conditions specified in the ARM template.


verify_result
